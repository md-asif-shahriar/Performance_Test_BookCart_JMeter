/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 108.0, "minX": 0.0, "maxY": 16467.0, "series": [{"data": [[0.0, 108.0], [0.1, 109.0], [0.2, 113.0], [0.3, 273.0], [0.4, 288.0], [0.5, 352.0], [0.6, 434.0], [0.7, 562.0], [0.8, 567.0], [0.9, 573.0], [1.0, 574.0], [1.1, 579.0], [1.2, 583.0], [1.3, 588.0], [1.4, 590.0], [1.5, 591.0], [1.6, 594.0], [1.7, 597.0], [1.8, 598.0], [1.9, 600.0], [2.0, 600.0], [2.1, 602.0], [2.2, 603.0], [2.3, 604.0], [2.4, 610.0], [2.5, 656.0], [2.6, 682.0], [2.7, 693.0], [2.8, 719.0], [2.9, 842.0], [3.0, 1012.0], [3.1, 1029.0], [3.2, 1043.0], [3.3, 1152.0], [3.4, 1170.0], [3.5, 1578.0], [3.6, 1643.0], [3.7, 1660.0], [3.8, 1678.0], [3.9, 1697.0], [4.0, 1715.0], [4.1, 1721.0], [4.2, 1729.0], [4.3, 1741.0], [4.4, 1748.0], [4.5, 1756.0], [4.6, 1771.0], [4.7, 1779.0], [4.8, 1787.0], [4.9, 1794.0], [5.0, 1800.0], [5.1, 1812.0], [5.2, 1826.0], [5.3, 1833.0], [5.4, 1927.0], [5.5, 1968.0], [5.6, 1973.0], [5.7, 1975.0], [5.8, 1978.0], [5.9, 1978.0], [6.0, 1980.0], [6.1, 1980.0], [6.2, 1981.0], [6.3, 1982.0], [6.4, 1983.0], [6.5, 1985.0], [6.6, 1986.0], [6.7, 1987.0], [6.8, 1988.0], [6.9, 1989.0], [7.0, 1992.0], [7.1, 1994.0], [7.2, 1994.0], [7.3, 1997.0], [7.4, 1998.0], [7.5, 2000.0], [7.6, 2000.0], [7.7, 2001.0], [7.8, 2002.0], [7.9, 2003.0], [8.0, 2004.0], [8.1, 2005.0], [8.2, 2005.0], [8.3, 2006.0], [8.4, 2007.0], [8.5, 2007.0], [8.6, 2008.0], [8.7, 2009.0], [8.8, 2011.0], [8.9, 2012.0], [9.0, 2012.0], [9.1, 2013.0], [9.2, 2014.0], [9.3, 2014.0], [9.4, 2015.0], [9.5, 2015.0], [9.6, 2015.0], [9.7, 2016.0], [9.8, 2016.0], [9.9, 2017.0], [10.0, 2017.0], [10.1, 2018.0], [10.2, 2019.0], [10.3, 2020.0], [10.4, 2021.0], [10.5, 2022.0], [10.6, 2023.0], [10.7, 2024.0], [10.8, 2025.0], [10.9, 2026.0], [11.0, 2027.0], [11.1, 2027.0], [11.2, 2028.0], [11.3, 2028.0], [11.4, 2028.0], [11.5, 2029.0], [11.6, 2029.0], [11.7, 2030.0], [11.8, 2030.0], [11.9, 2030.0], [12.0, 2031.0], [12.1, 2031.0], [12.2, 2031.0], [12.3, 2031.0], [12.4, 2032.0], [12.5, 2032.0], [12.6, 2032.0], [12.7, 2032.0], [12.8, 2033.0], [12.9, 2033.0], [13.0, 2033.0], [13.1, 2034.0], [13.2, 2034.0], [13.3, 2034.0], [13.4, 2034.0], [13.5, 2035.0], [13.6, 2035.0], [13.7, 2036.0], [13.8, 2036.0], [13.9, 2037.0], [14.0, 2037.0], [14.1, 2038.0], [14.2, 2038.0], [14.3, 2039.0], [14.4, 2040.0], [14.5, 2041.0], [14.6, 2042.0], [14.7, 2042.0], [14.8, 2042.0], [14.9, 2043.0], [15.0, 2045.0], [15.1, 2045.0], [15.2, 2046.0], [15.3, 2047.0], [15.4, 2048.0], [15.5, 2049.0], [15.6, 2049.0], [15.7, 2050.0], [15.8, 2051.0], [15.9, 2052.0], [16.0, 2053.0], [16.1, 2053.0], [16.2, 2054.0], [16.3, 2055.0], [16.4, 2055.0], [16.5, 2056.0], [16.6, 2057.0], [16.7, 2057.0], [16.8, 2057.0], [16.9, 2058.0], [17.0, 2059.0], [17.1, 2060.0], [17.2, 2060.0], [17.3, 2061.0], [17.4, 2062.0], [17.5, 2063.0], [17.6, 2064.0], [17.7, 2064.0], [17.8, 2066.0], [17.9, 2068.0], [18.0, 2068.0], [18.1, 2070.0], [18.2, 2070.0], [18.3, 2071.0], [18.4, 2073.0], [18.5, 2073.0], [18.6, 2076.0], [18.7, 2078.0], [18.8, 2079.0], [18.9, 2081.0], [19.0, 2083.0], [19.1, 2085.0], [19.2, 2089.0], [19.3, 2092.0], [19.4, 2094.0], [19.5, 2094.0], [19.6, 2095.0], [19.7, 2096.0], [19.8, 2097.0], [19.9, 2098.0], [20.0, 2100.0], [20.1, 2101.0], [20.2, 2101.0], [20.3, 2102.0], [20.4, 2102.0], [20.5, 2103.0], [20.6, 2104.0], [20.7, 2105.0], [20.8, 2106.0], [20.9, 2107.0], [21.0, 2108.0], [21.1, 2111.0], [21.2, 2112.0], [21.3, 2113.0], [21.4, 2115.0], [21.5, 2118.0], [21.6, 2120.0], [21.7, 2121.0], [21.8, 2123.0], [21.9, 2124.0], [22.0, 2125.0], [22.1, 2129.0], [22.2, 2130.0], [22.3, 2133.0], [22.4, 2134.0], [22.5, 2137.0], [22.6, 2138.0], [22.7, 2139.0], [22.8, 2142.0], [22.9, 2144.0], [23.0, 2146.0], [23.1, 2151.0], [23.2, 2152.0], [23.3, 2158.0], [23.4, 2160.0], [23.5, 2163.0], [23.6, 2167.0], [23.7, 2168.0], [23.8, 2173.0], [23.9, 2178.0], [24.0, 2182.0], [24.1, 2187.0], [24.2, 2189.0], [24.3, 2191.0], [24.4, 2192.0], [24.5, 2198.0], [24.6, 2199.0], [24.7, 2202.0], [24.8, 2208.0], [24.9, 2212.0], [25.0, 2216.0], [25.1, 2218.0], [25.2, 2220.0], [25.3, 2223.0], [25.4, 2230.0], [25.5, 2236.0], [25.6, 2239.0], [25.7, 2241.0], [25.8, 2245.0], [25.9, 2251.0], [26.0, 2254.0], [26.1, 2260.0], [26.2, 2265.0], [26.3, 2267.0], [26.4, 2271.0], [26.5, 2275.0], [26.6, 2281.0], [26.7, 2288.0], [26.8, 2294.0], [26.9, 2301.0], [27.0, 2304.0], [27.1, 2306.0], [27.2, 2311.0], [27.3, 2319.0], [27.4, 2325.0], [27.5, 2329.0], [27.6, 2335.0], [27.7, 2337.0], [27.8, 2339.0], [27.9, 2343.0], [28.0, 2345.0], [28.1, 2349.0], [28.2, 2352.0], [28.3, 2354.0], [28.4, 2355.0], [28.5, 2356.0], [28.6, 2357.0], [28.7, 2357.0], [28.8, 2357.0], [28.9, 2358.0], [29.0, 2358.0], [29.1, 2359.0], [29.2, 2359.0], [29.3, 2359.0], [29.4, 2360.0], [29.5, 2360.0], [29.6, 2360.0], [29.7, 2360.0], [29.8, 2361.0], [29.9, 2361.0], [30.0, 2361.0], [30.1, 2361.0], [30.2, 2361.0], [30.3, 2362.0], [30.4, 2362.0], [30.5, 2363.0], [30.6, 2363.0], [30.7, 2364.0], [30.8, 2365.0], [30.9, 2367.0], [31.0, 2367.0], [31.1, 2369.0], [31.2, 2371.0], [31.3, 2371.0], [31.4, 2372.0], [31.5, 2373.0], [31.6, 2374.0], [31.7, 2374.0], [31.8, 2374.0], [31.9, 2375.0], [32.0, 2376.0], [32.1, 2378.0], [32.2, 2378.0], [32.3, 2379.0], [32.4, 2380.0], [32.5, 2382.0], [32.6, 2383.0], [32.7, 2383.0], [32.8, 2384.0], [32.9, 2385.0], [33.0, 2386.0], [33.1, 2386.0], [33.2, 2388.0], [33.3, 2389.0], [33.4, 2390.0], [33.5, 2392.0], [33.6, 2393.0], [33.7, 2394.0], [33.8, 2396.0], [33.9, 2398.0], [34.0, 2400.0], [34.1, 2402.0], [34.2, 2405.0], [34.3, 2406.0], [34.4, 2407.0], [34.5, 2409.0], [34.6, 2410.0], [34.7, 2411.0], [34.8, 2412.0], [34.9, 2413.0], [35.0, 2414.0], [35.1, 2417.0], [35.2, 2418.0], [35.3, 2419.0], [35.4, 2420.0], [35.5, 2421.0], [35.6, 2422.0], [35.7, 2424.0], [35.8, 2424.0], [35.9, 2425.0], [36.0, 2426.0], [36.1, 2426.0], [36.2, 2427.0], [36.3, 2428.0], [36.4, 2429.0], [36.5, 2429.0], [36.6, 2430.0], [36.7, 2432.0], [36.8, 2433.0], [36.9, 2434.0], [37.0, 2436.0], [37.1, 2440.0], [37.2, 2441.0], [37.3, 2442.0], [37.4, 2445.0], [37.5, 2446.0], [37.6, 2447.0], [37.7, 2448.0], [37.8, 2451.0], [37.9, 2452.0], [38.0, 2453.0], [38.1, 2455.0], [38.2, 2457.0], [38.3, 2459.0], [38.4, 2462.0], [38.5, 2464.0], [38.6, 2466.0], [38.7, 2467.0], [38.8, 2469.0], [38.9, 2471.0], [39.0, 2473.0], [39.1, 2475.0], [39.2, 2476.0], [39.3, 2478.0], [39.4, 2481.0], [39.5, 2482.0], [39.6, 2486.0], [39.7, 2487.0], [39.8, 2488.0], [39.9, 2491.0], [40.0, 2493.0], [40.1, 2494.0], [40.2, 2495.0], [40.3, 2496.0], [40.4, 2498.0], [40.5, 2499.0], [40.6, 2501.0], [40.7, 2503.0], [40.8, 2504.0], [40.9, 2505.0], [41.0, 2507.0], [41.1, 2509.0], [41.2, 2510.0], [41.3, 2511.0], [41.4, 2512.0], [41.5, 2513.0], [41.6, 2514.0], [41.7, 2514.0], [41.8, 2515.0], [41.9, 2516.0], [42.0, 2517.0], [42.1, 2519.0], [42.2, 2520.0], [42.3, 2521.0], [42.4, 2522.0], [42.5, 2523.0], [42.6, 2523.0], [42.7, 2524.0], [42.8, 2525.0], [42.9, 2526.0], [43.0, 2527.0], [43.1, 2527.0], [43.2, 2528.0], [43.3, 2529.0], [43.4, 2529.0], [43.5, 2530.0], [43.6, 2531.0], [43.7, 2531.0], [43.8, 2532.0], [43.9, 2532.0], [44.0, 2532.0], [44.1, 2533.0], [44.2, 2533.0], [44.3, 2534.0], [44.4, 2534.0], [44.5, 2535.0], [44.6, 2535.0], [44.7, 2536.0], [44.8, 2536.0], [44.9, 2537.0], [45.0, 2537.0], [45.1, 2537.0], [45.2, 2537.0], [45.3, 2538.0], [45.4, 2538.0], [45.5, 2539.0], [45.6, 2539.0], [45.7, 2540.0], [45.8, 2540.0], [45.9, 2540.0], [46.0, 2540.0], [46.1, 2541.0], [46.2, 2541.0], [46.3, 2541.0], [46.4, 2541.0], [46.5, 2542.0], [46.6, 2542.0], [46.7, 2542.0], [46.8, 2543.0], [46.9, 2543.0], [47.0, 2543.0], [47.1, 2544.0], [47.2, 2544.0], [47.3, 2544.0], [47.4, 2545.0], [47.5, 2545.0], [47.6, 2545.0], [47.7, 2545.0], [47.8, 2546.0], [47.9, 2546.0], [48.0, 2546.0], [48.1, 2547.0], [48.2, 2547.0], [48.3, 2547.0], [48.4, 2547.0], [48.5, 2548.0], [48.6, 2548.0], [48.7, 2548.0], [48.8, 2549.0], [48.9, 2549.0], [49.0, 2549.0], [49.1, 2550.0], [49.2, 2550.0], [49.3, 2550.0], [49.4, 2551.0], [49.5, 2551.0], [49.6, 2551.0], [49.7, 2552.0], [49.8, 2553.0], [49.9, 2553.0], [50.0, 2554.0], [50.1, 2555.0], [50.2, 2555.0], [50.3, 2556.0], [50.4, 2556.0], [50.5, 2557.0], [50.6, 2558.0], [50.7, 2559.0], [50.8, 2559.0], [50.9, 2560.0], [51.0, 2560.0], [51.1, 2561.0], [51.2, 2562.0], [51.3, 2563.0], [51.4, 2563.0], [51.5, 2564.0], [51.6, 2564.0], [51.7, 2565.0], [51.8, 2565.0], [51.9, 2566.0], [52.0, 2567.0], [52.1, 2567.0], [52.2, 2567.0], [52.3, 2568.0], [52.4, 2568.0], [52.5, 2568.0], [52.6, 2569.0], [52.7, 2569.0], [52.8, 2570.0], [52.9, 2570.0], [53.0, 2571.0], [53.1, 2572.0], [53.2, 2572.0], [53.3, 2573.0], [53.4, 2573.0], [53.5, 2574.0], [53.6, 2575.0], [53.7, 2576.0], [53.8, 2577.0], [53.9, 2578.0], [54.0, 2578.0], [54.1, 2579.0], [54.2, 2580.0], [54.3, 2580.0], [54.4, 2581.0], [54.5, 2582.0], [54.6, 2583.0], [54.7, 2584.0], [54.8, 2584.0], [54.9, 2585.0], [55.0, 2586.0], [55.1, 2587.0], [55.2, 2588.0], [55.3, 2589.0], [55.4, 2591.0], [55.5, 2591.0], [55.6, 2592.0], [55.7, 2593.0], [55.8, 2593.0], [55.9, 2594.0], [56.0, 2595.0], [56.1, 2595.0], [56.2, 2596.0], [56.3, 2596.0], [56.4, 2597.0], [56.5, 2597.0], [56.6, 2598.0], [56.7, 2599.0], [56.8, 2600.0], [56.9, 2600.0], [57.0, 2601.0], [57.1, 2602.0], [57.2, 2603.0], [57.3, 2603.0], [57.4, 2604.0], [57.5, 2605.0], [57.6, 2606.0], [57.7, 2607.0], [57.8, 2608.0], [57.9, 2608.0], [58.0, 2609.0], [58.1, 2611.0], [58.2, 2615.0], [58.3, 2616.0], [58.4, 2617.0], [58.5, 2618.0], [58.6, 2620.0], [58.7, 2622.0], [58.8, 2623.0], [58.9, 2624.0], [59.0, 2626.0], [59.1, 2627.0], [59.2, 2628.0], [59.3, 2630.0], [59.4, 2631.0], [59.5, 2631.0], [59.6, 2632.0], [59.7, 2633.0], [59.8, 2634.0], [59.9, 2635.0], [60.0, 2635.0], [60.1, 2636.0], [60.2, 2637.0], [60.3, 2640.0], [60.4, 2640.0], [60.5, 2642.0], [60.6, 2644.0], [60.7, 2644.0], [60.8, 2645.0], [60.9, 2646.0], [61.0, 2648.0], [61.1, 2649.0], [61.2, 2650.0], [61.3, 2651.0], [61.4, 2652.0], [61.5, 2654.0], [61.6, 2656.0], [61.7, 2657.0], [61.8, 2658.0], [61.9, 2659.0], [62.0, 2659.0], [62.1, 2661.0], [62.2, 2662.0], [62.3, 2663.0], [62.4, 2664.0], [62.5, 2667.0], [62.6, 2667.0], [62.7, 2668.0], [62.8, 2669.0], [62.9, 2670.0], [63.0, 2670.0], [63.1, 2672.0], [63.2, 2673.0], [63.3, 2673.0], [63.4, 2674.0], [63.5, 2675.0], [63.6, 2676.0], [63.7, 2677.0], [63.8, 2678.0], [63.9, 2679.0], [64.0, 2679.0], [64.1, 2680.0], [64.2, 2681.0], [64.3, 2681.0], [64.4, 2681.0], [64.5, 2682.0], [64.6, 2682.0], [64.7, 2682.0], [64.8, 2683.0], [64.9, 2684.0], [65.0, 2684.0], [65.1, 2684.0], [65.2, 2685.0], [65.3, 2685.0], [65.4, 2686.0], [65.5, 2686.0], [65.6, 2686.0], [65.7, 2687.0], [65.8, 2687.0], [65.9, 2687.0], [66.0, 2687.0], [66.1, 2688.0], [66.2, 2688.0], [66.3, 2689.0], [66.4, 2689.0], [66.5, 2689.0], [66.6, 2690.0], [66.7, 2691.0], [66.8, 2692.0], [66.9, 2693.0], [67.0, 2693.0], [67.1, 2694.0], [67.2, 2694.0], [67.3, 2695.0], [67.4, 2695.0], [67.5, 2696.0], [67.6, 2697.0], [67.7, 2697.0], [67.8, 2698.0], [67.9, 2699.0], [68.0, 2699.0], [68.1, 2700.0], [68.2, 2701.0], [68.3, 2702.0], [68.4, 2703.0], [68.5, 2704.0], [68.6, 2704.0], [68.7, 2705.0], [68.8, 2705.0], [68.9, 2706.0], [69.0, 2706.0], [69.1, 2707.0], [69.2, 2707.0], [69.3, 2707.0], [69.4, 2708.0], [69.5, 2708.0], [69.6, 2708.0], [69.7, 2708.0], [69.8, 2709.0], [69.9, 2709.0], [70.0, 2709.0], [70.1, 2710.0], [70.2, 2710.0], [70.3, 2710.0], [70.4, 2710.0], [70.5, 2710.0], [70.6, 2711.0], [70.7, 2711.0], [70.8, 2711.0], [70.9, 2712.0], [71.0, 2712.0], [71.1, 2713.0], [71.2, 2714.0], [71.3, 2715.0], [71.4, 2716.0], [71.5, 2716.0], [71.6, 2717.0], [71.7, 2717.0], [71.8, 2718.0], [71.9, 2718.0], [72.0, 2718.0], [72.1, 2719.0], [72.2, 2720.0], [72.3, 2720.0], [72.4, 2721.0], [72.5, 2721.0], [72.6, 2723.0], [72.7, 2723.0], [72.8, 2724.0], [72.9, 2726.0], [73.0, 2727.0], [73.1, 2728.0], [73.2, 2729.0], [73.3, 2731.0], [73.4, 2732.0], [73.5, 2734.0], [73.6, 2736.0], [73.7, 2737.0], [73.8, 2738.0], [73.9, 2740.0], [74.0, 2740.0], [74.1, 2742.0], [74.2, 2742.0], [74.3, 2743.0], [74.4, 2743.0], [74.5, 2744.0], [74.6, 2745.0], [74.7, 2745.0], [74.8, 2746.0], [74.9, 2746.0], [75.0, 2746.0], [75.1, 2747.0], [75.2, 2747.0], [75.3, 2747.0], [75.4, 2748.0], [75.5, 2748.0], [75.6, 2749.0], [75.7, 2749.0], [75.8, 2749.0], [75.9, 2750.0], [76.0, 2750.0], [76.1, 2751.0], [76.2, 2751.0], [76.3, 2752.0], [76.4, 2752.0], [76.5, 2752.0], [76.6, 2753.0], [76.7, 2753.0], [76.8, 2754.0], [76.9, 2754.0], [77.0, 2754.0], [77.1, 2755.0], [77.2, 2755.0], [77.3, 2755.0], [77.4, 2755.0], [77.5, 2756.0], [77.6, 2756.0], [77.7, 2756.0], [77.8, 2757.0], [77.9, 2757.0], [78.0, 2757.0], [78.1, 2757.0], [78.2, 2757.0], [78.3, 2757.0], [78.4, 2758.0], [78.5, 2758.0], [78.6, 2758.0], [78.7, 2758.0], [78.8, 2759.0], [78.9, 2759.0], [79.0, 2759.0], [79.1, 2759.0], [79.2, 2760.0], [79.3, 2760.0], [79.4, 2760.0], [79.5, 2761.0], [79.6, 2761.0], [79.7, 2761.0], [79.8, 2761.0], [79.9, 2762.0], [80.0, 2762.0], [80.1, 2763.0], [80.2, 2763.0], [80.3, 2765.0], [80.4, 2767.0], [80.5, 2769.0], [80.6, 2772.0], [80.7, 2774.0], [80.8, 2777.0], [80.9, 2780.0], [81.0, 2783.0], [81.1, 2787.0], [81.2, 2789.0], [81.3, 2792.0], [81.4, 2794.0], [81.5, 2796.0], [81.6, 2798.0], [81.7, 2799.0], [81.8, 2801.0], [81.9, 2801.0], [82.0, 2803.0], [82.1, 2804.0], [82.2, 2805.0], [82.3, 2807.0], [82.4, 2808.0], [82.5, 2809.0], [82.6, 2811.0], [82.7, 2812.0], [82.8, 2814.0], [82.9, 2815.0], [83.0, 2816.0], [83.1, 2817.0], [83.2, 2818.0], [83.3, 2818.0], [83.4, 2819.0], [83.5, 2821.0], [83.6, 2824.0], [83.7, 2827.0], [83.8, 2832.0], [83.9, 2835.0], [84.0, 2840.0], [84.1, 2843.0], [84.2, 2846.0], [84.3, 2848.0], [84.4, 2850.0], [84.5, 2852.0], [84.6, 2855.0], [84.7, 2857.0], [84.8, 2859.0], [84.9, 2859.0], [85.0, 2860.0], [85.1, 2862.0], [85.2, 2863.0], [85.3, 2868.0], [85.4, 2922.0], [85.5, 5146.0], [85.6, 5197.0], [85.7, 5202.0], [85.8, 5211.0], [85.9, 5279.0], [86.0, 5299.0], [86.1, 5317.0], [86.2, 5327.0], [86.3, 5337.0], [86.4, 5347.0], [86.5, 5370.0], [86.6, 5382.0], [86.7, 5390.0], [86.8, 5395.0], [86.9, 5399.0], [87.0, 5403.0], [87.1, 5406.0], [87.2, 5408.0], [87.3, 5411.0], [87.4, 5413.0], [87.5, 5416.0], [87.6, 6033.0], [87.7, 6425.0], [87.8, 6543.0], [87.9, 6629.0], [88.0, 6654.0], [88.1, 6696.0], [88.2, 6760.0], [88.3, 6781.0], [88.4, 6810.0], [88.5, 6818.0], [88.6, 6873.0], [88.7, 6892.0], [88.8, 6931.0], [88.9, 6960.0], [89.0, 6989.0], [89.1, 7014.0], [89.2, 7045.0], [89.3, 7065.0], [89.4, 7088.0], [89.5, 7124.0], [89.6, 7149.0], [89.7, 7159.0], [89.8, 7166.0], [89.9, 7169.0], [90.0, 7176.0], [90.1, 7199.0], [90.2, 7204.0], [90.3, 7214.0], [90.4, 7228.0], [90.5, 7242.0], [90.6, 7274.0], [90.7, 7289.0], [90.8, 7299.0], [90.9, 7311.0], [91.0, 7329.0], [91.1, 7346.0], [91.2, 7355.0], [91.3, 7362.0], [91.4, 7375.0], [91.5, 7404.0], [91.6, 7423.0], [91.7, 7443.0], [91.8, 7469.0], [91.9, 7482.0], [92.0, 7502.0], [92.1, 7532.0], [92.2, 7579.0], [92.3, 7603.0], [92.4, 7615.0], [92.5, 7653.0], [92.6, 7678.0], [92.7, 7692.0], [92.8, 7709.0], [92.9, 7724.0], [93.0, 7742.0], [93.1, 7788.0], [93.2, 7822.0], [93.3, 7866.0], [93.4, 7889.0], [93.5, 7906.0], [93.6, 7928.0], [93.7, 7965.0], [93.8, 7986.0], [93.9, 7998.0], [94.0, 8026.0], [94.1, 8060.0], [94.2, 8099.0], [94.3, 8106.0], [94.4, 8146.0], [94.5, 8175.0], [94.6, 8197.0], [94.7, 8222.0], [94.8, 8271.0], [94.9, 8301.0], [95.0, 8333.0], [95.1, 8366.0], [95.2, 8373.0], [95.3, 8391.0], [95.4, 8427.0], [95.5, 8452.0], [95.6, 8476.0], [95.7, 8512.0], [95.8, 8570.0], [95.9, 8599.0], [96.0, 8624.0], [96.1, 8643.0], [96.2, 8655.0], [96.3, 8683.0], [96.4, 8706.0], [96.5, 8731.0], [96.6, 8743.0], [96.7, 8763.0], [96.8, 8774.0], [96.9, 8804.0], [97.0, 8820.0], [97.1, 8842.0], [97.2, 8868.0], [97.3, 8873.0], [97.4, 8896.0], [97.5, 8914.0], [97.6, 8939.0], [97.7, 8951.0], [97.8, 8988.0], [97.9, 9009.0], [98.0, 9021.0], [98.1, 9102.0], [98.2, 9131.0], [98.3, 9174.0], [98.4, 9210.0], [98.5, 9278.0], [98.6, 9422.0], [98.7, 9463.0], [98.8, 9486.0], [98.9, 9525.0], [99.0, 9575.0], [99.1, 9652.0], [99.2, 9725.0], [99.3, 9787.0], [99.4, 10093.0], [99.5, 10460.0], [99.6, 12466.0], [99.7, 13563.0], [99.8, 15584.0], [99.9, 15899.0], [100.0, 16467.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 843.0, "series": [{"data": [[600.0, 44.0], [700.0, 5.0], [800.0, 7.0], [1000.0, 15.0], [1100.0, 13.0], [1500.0, 1.0], [1600.0, 20.0], [1700.0, 57.0], [1800.0, 17.0], [1900.0, 112.0], [2000.0, 649.0], [2100.0, 242.0], [2200.0, 117.0], [2300.0, 369.0], [2400.0, 342.0], [2500.0, 843.0], [2600.0, 586.0], [2700.0, 712.0], [2800.0, 191.0], [2900.0, 1.0], [5100.0, 13.0], [5300.0, 46.0], [5200.0, 19.0], [5400.0, 31.0], [5800.0, 1.0], [5900.0, 3.0], [6000.0, 3.0], [6200.0, 1.0], [6400.0, 6.0], [6600.0, 14.0], [6500.0, 4.0], [6800.0, 22.0], [6900.0, 16.0], [6700.0, 11.0], [7000.0, 18.0], [7100.0, 37.0], [7200.0, 36.0], [7300.0, 34.0], [7400.0, 26.0], [7600.0, 24.0], [7500.0, 17.0], [7700.0, 19.0], [7800.0, 17.0], [7900.0, 24.0], [8000.0, 16.0], [8100.0, 21.0], [8200.0, 14.0], [8300.0, 22.0], [8500.0, 12.0], [8600.0, 24.0], [8400.0, 19.0], [8700.0, 26.0], [8800.0, 29.0], [8900.0, 22.0], [9000.0, 13.0], [9100.0, 13.0], [9200.0, 8.0], [9400.0, 13.0], [9300.0, 4.0], [9500.0, 11.0], [9600.0, 8.0], [9700.0, 6.0], [9800.0, 1.0], [9900.0, 3.0], [10200.0, 1.0], [10100.0, 2.0], [10000.0, 1.0], [10400.0, 2.0], [10500.0, 1.0], [10700.0, 1.0], [10800.0, 2.0], [12400.0, 2.0], [12600.0, 2.0], [12900.0, 1.0], [13500.0, 2.0], [13800.0, 1.0], [13600.0, 1.0], [14900.0, 1.0], [15800.0, 3.0], [15700.0, 1.0], [15500.0, 2.0], [15600.0, 1.0], [15900.0, 2.0], [16400.0, 3.0], [100.0, 13.0], [200.0, 10.0], [300.0, 5.0], [400.0, 7.0], [500.0, 63.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 16400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 35.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5018.0, "series": [{"data": [[0.0, 35.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 147.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5018.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 590.0688461538452, "minX": 1.69668558E12, "maxY": 590.0688461538452, "series": [{"data": [[1.69668558E12, 590.0688461538452]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69668558E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 108.0, "minX": 1.0, "maxY": 3492.6761633428337, "series": [{"data": [[3.0, 110.5], [4.0, 110.0], [5.0, 116.0], [6.0, 108.0], [7.0, 108.0], [8.0, 110.0], [9.0, 110.0], [10.0, 113.0], [12.0, 109.0], [13.0, 108.0], [14.0, 243.0], [15.0, 280.0], [16.0, 352.0], [17.0, 352.0], [18.0, 347.5], [19.0, 361.0], [20.0, 427.0], [21.0, 429.0], [22.0, 441.5], [23.0, 557.0], [24.0, 562.0], [25.0, 563.0], [26.0, 566.0], [27.0, 567.0], [28.0, 565.0], [30.0, 570.0], [31.0, 566.0], [35.0, 574.75], [37.0, 570.0], [36.0, 567.0], [39.0, 573.0], [38.0, 572.0], [41.0, 577.0], [40.0, 573.0], [43.0, 576.0], [42.0, 574.0], [45.0, 579.0], [44.0, 575.0], [47.0, 581.0], [46.0, 580.0], [49.0, 591.0], [48.0, 583.0], [51.0, 582.0], [50.0, 590.0], [53.0, 590.0], [52.0, 577.0], [55.0, 588.5], [58.0, 595.0], [61.0, 599.3333333333334], [63.0, 589.0], [62.0, 587.0], [66.0, 590.0], [65.0, 592.0], [64.0, 590.0], [71.0, 598.0], [70.0, 594.0], [69.0, 594.0], [68.0, 591.0], [75.0, 592.0], [74.0, 598.0], [73.0, 597.0], [72.0, 598.0], [79.0, 598.0], [78.0, 600.0], [77.0, 600.0], [76.0, 598.0], [83.0, 598.0], [82.0, 598.0], [81.0, 611.0], [80.0, 600.0], [87.0, 601.0], [86.0, 599.5], [84.0, 600.0], [91.0, 593.0], [90.0, 586.0], [89.0, 589.0], [88.0, 598.0], [95.0, 603.0], [94.0, 604.0], [93.0, 590.0], [92.0, 591.0], [99.0, 601.0], [98.0, 604.0], [97.0, 601.0], [96.0, 602.0], [103.0, 599.0], [102.0, 600.0], [101.0, 603.0], [100.0, 603.0], [107.0, 603.0], [106.0, 603.0], [105.0, 600.0], [104.0, 600.0], [111.0, 605.0], [110.0, 604.0], [109.0, 607.0], [108.0, 603.0], [115.0, 631.0], [114.0, 613.0], [113.0, 606.0], [112.0, 604.0], [119.0, 662.0], [118.0, 660.0], [117.0, 645.0], [116.0, 634.0], [123.0, 691.0], [122.0, 693.0], [121.0, 674.5], [127.0, 693.0], [126.0, 693.0], [125.0, 693.0], [124.0, 694.0], [135.0, 1029.0], [134.0, 1028.0], [133.0, 1027.0], [132.0, 1031.0], [131.0, 888.4285714285713], [130.0, 718.0], [129.0, 704.0], [128.0, 703.0], [143.0, 1171.25], [142.0, 1165.0], [141.0, 1120.5], [140.0, 1048.0], [139.0, 1043.0], [138.0, 1033.0], [137.0, 1035.0], [136.0, 1036.0], [151.0, 1915.5], [150.0, 1766.1688311688308], [149.0, 1674.142857142857], [148.0, 1655.0], [147.0, 1570.375], [146.0, 1190.0], [145.0, 1186.0], [144.0, 1187.0], [159.0, 1991.0], [158.0, 1988.0], [157.0, 1978.0], [156.0, 1963.0], [155.0, 1961.0], [154.0, 1935.0], [153.0, 1973.0], [152.0, 1928.0], [167.0, 2018.0], [166.0, 2012.0], [165.0, 2007.0], [164.0, 2010.6666666666667], [162.0, 2000.0], [160.0, 1998.3333333333333], [175.0, 2037.0], [174.0, 2017.5], [173.0, 2025.0], [172.0, 2040.0], [171.0, 2031.0], [170.0, 2036.0], [169.0, 2035.0], [168.0, 2010.5], [183.0, 2041.0], [182.0, 2047.0], [181.0, 2040.0], [180.0, 2042.6666666666667], [179.0, 2042.0], [178.0, 2046.0], [177.0, 2036.3333333333333], [189.0, 2034.5], [187.0, 2037.0], [186.0, 2034.0], [185.0, 2037.0], [184.0, 2037.0], [199.0, 2045.0], [198.0, 2038.0], [197.0, 2045.0], [196.0, 2050.0], [194.0, 2042.0], [192.0, 2045.6666666666667], [207.0, 2050.0], [205.0, 2042.0], [204.0, 2051.0], [203.0, 2042.0], [202.0, 2053.0], [201.0, 2049.0], [200.0, 2053.0], [215.0, 2029.0], [214.0, 2032.0], [213.0, 2029.0], [212.0, 2037.0], [211.0, 2033.0], [210.0, 2031.0], [209.0, 2033.0], [208.0, 2047.5], [223.0, 2022.0], [222.0, 2020.0], [221.0, 2017.0], [220.0, 2023.0], [219.0, 2019.0], [218.0, 2034.5], [217.0, 2027.0], [216.0, 2031.0], [231.0, 2015.5], [230.0, 2019.0], [229.0, 2015.0], [228.0, 2072.5], [227.0, 2016.0], [226.0, 2022.0], [225.0, 2021.0], [224.0, 2023.0], [239.0, 2012.0], [238.0, 2013.0], [237.0, 2017.0], [236.0, 2015.0], [235.0, 2023.0], [234.0, 2022.0], [233.0, 2016.0], [232.0, 2016.0], [247.0, 2018.0], [246.0, 2017.5], [245.0, 2017.0], [244.0, 2014.0], [243.0, 2013.0], [242.0, 2013.0], [241.0, 2015.0], [240.0, 2025.0], [255.0, 2008.0], [254.0, 2015.0], [253.0, 2015.0], [252.0, 2016.0], [251.0, 2014.0], [250.0, 2028.0], [249.0, 2015.0], [248.0, 2019.0], [270.0, 2000.0], [271.0, 2000.0], [269.0, 2009.0], [268.0, 2005.0], [266.0, 2005.0], [265.0, 2012.0], [264.0, 2006.0], [263.0, 2005.0], [256.0, 2013.0], [259.0, 2003.0], [257.0, 2007.0], [262.0, 2008.0], [261.0, 2011.0], [260.0, 2007.0], [286.0, 2005.0], [287.0, 1990.0], [285.0, 1986.0], [284.0, 1992.0], [283.0, 1997.0], [282.0, 1996.0], [281.0, 1997.0], [280.0, 1997.0], [279.0, 1994.0], [273.0, 2004.0], [272.0, 2004.0], [275.0, 2005.0], [274.0, 2012.0], [278.0, 2001.0], [277.0, 2001.0], [276.0, 1999.0], [302.0, 1993.0], [303.0, 1989.0], [301.0, 1980.0], [300.0, 1982.0], [298.0, 1980.0], [297.0, 1986.0], [296.0, 1986.0], [295.0, 1985.0], [289.0, 1987.0], [288.0, 1987.0], [291.0, 1988.0], [290.0, 1986.0], [294.0, 1991.0], [293.0, 1984.0], [292.0, 1986.0], [318.0, 1979.0], [319.0, 1978.0], [317.0, 1984.0], [316.0, 1980.0], [315.0, 1982.0], [314.0, 1984.5], [313.0, 1983.0], [312.0, 1984.5], [311.0, 1983.0], [305.0, 1980.0], [304.0, 1986.0], [307.0, 1983.0], [306.0, 1983.5], [310.0, 1986.6666666666667], [309.0, 1983.3333333333333], [308.0, 1985.0], [334.0, 1972.0], [335.0, 1978.0], [333.0, 1970.0], [332.0, 1973.5], [331.0, 1972.0], [330.0, 2003.0], [329.0, 1977.6666666666667], [328.0, 1980.0], [327.0, 1982.0], [321.0, 1978.0], [320.0, 1978.0], [323.0, 1981.0], [322.0, 1981.0], [326.0, 1980.0], [325.0, 1979.0], [324.0, 1974.0], [350.0, 2006.0], [351.0, 2005.0], [349.0, 2006.0], [348.0, 2009.5], [346.0, 2022.0], [345.0, 2006.0], [344.0, 2000.3333333333333], [343.0, 1994.0], [337.0, 1978.0], [336.0, 1982.0], [339.0, 1975.0], [338.0, 1977.0], [342.0, 1994.0], [341.0, 1997.75], [340.0, 1989.5], [365.0, 2016.0], [367.0, 2025.0], [364.0, 2024.0], [355.0, 2005.0], [354.0, 2007.0], [353.0, 2009.0], [352.0, 2009.0], [362.0, 2017.0], [361.0, 2013.0], [360.0, 2012.0], [359.0, 2015.0], [358.0, 2009.0], [356.0, 2007.0], [382.0, 2024.0], [383.0, 2028.0], [381.0, 2030.0], [380.0, 2026.0], [379.0, 2030.0], [378.0, 2032.0], [377.0, 2028.0], [374.0, 2024.0], [368.0, 2020.0], [371.0, 2021.0], [370.0, 2027.0], [373.0, 2027.0], [372.0, 2027.0], [398.0, 2032.0], [399.0, 2034.0], [397.0, 2035.0], [396.0, 2030.0], [395.0, 2033.0], [394.0, 2030.0], [393.0, 2030.0], [392.0, 2033.8], [387.0, 2024.0], [386.0, 2030.0], [385.0, 2038.0], [384.0, 2031.0], [414.0, 2027.0], [415.0, 2029.0], [413.0, 2031.0], [412.0, 2032.0], [411.0, 2035.0], [410.0, 2033.0], [408.0, 2034.0], [407.0, 2031.0], [401.0, 2033.0], [400.0, 2034.0], [403.0, 2040.0], [402.0, 2032.0], [406.0, 2035.0], [405.0, 2034.0], [404.0, 2035.0], [430.0, 2030.0], [431.0, 2036.0], [429.0, 2030.0], [428.0, 2032.0], [427.0, 2030.0], [426.0, 2027.0], [425.0, 2032.0], [424.0, 2024.0], [423.0, 2027.0], [416.0, 2033.0], [419.0, 2038.0], [418.0, 2031.5], [422.0, 2025.0], [421.0, 2024.0], [420.0, 2025.0], [446.0, 2029.0], [447.0, 2027.0], [445.0, 2029.0], [444.0, 2030.0], [443.0, 2032.0], [442.0, 2033.0], [441.0, 2055.0], [440.0, 2030.0], [439.0, 2033.0], [433.0, 2031.0], [432.0, 2031.0], [435.0, 2029.0], [434.0, 2032.0], [438.0, 2033.0], [437.0, 2033.0], [436.0, 2027.0], [462.0, 2042.0], [463.0, 2046.0], [461.0, 2042.0], [460.0, 2042.0], [459.0, 2039.0], [458.0, 2039.0], [457.0, 2043.0], [456.0, 2034.0], [455.0, 2033.0], [449.0, 2035.0], [448.0, 2028.0], [451.0, 2034.0], [450.0, 2036.0], [454.0, 2038.0], [453.0, 2034.0], [452.0, 2034.0], [478.0, 2059.0], [479.0, 2052.0], [477.0, 2053.0], [476.0, 2061.0], [475.0, 2053.0], [474.0, 2058.0], [473.0, 2056.0], [472.0, 2049.0], [471.0, 2049.0], [465.0, 2045.0], [464.0, 2045.0], [467.0, 2042.0], [466.0, 2044.0], [470.0, 2047.0], [469.0, 2049.0], [468.0, 2044.0], [494.0, 2061.0], [495.0, 2057.0], [493.0, 2057.0], [492.0, 2056.0], [491.0, 2050.0], [490.0, 2052.0], [489.0, 2053.0], [488.0, 2051.0], [487.0, 2054.0], [481.0, 2054.5], [483.0, 2057.0], [482.0, 2055.0], [486.0, 2054.0], [485.0, 2055.0], [484.0, 2058.0], [510.0, 2057.2857142857147], [511.0, 2057.0], [509.0, 2059.0], [508.0, 2057.0], [507.0, 2060.0], [506.0, 2055.0], [505.0, 2064.3333333333335], [504.0, 2060.0], [503.0, 2059.0], [497.0, 2063.5], [499.0, 2063.0], [498.0, 2057.0], [502.0, 2059.0], [501.0, 2060.0], [500.0, 2060.0], [540.0, 2095.0], [543.0, 2097.0], [529.0, 2097.0], [528.0, 2098.0], [531.0, 2096.0], [530.0, 2097.0], [533.0, 2099.0], [532.0, 2101.0], [542.0, 2096.0], [541.0, 2098.0], [539.0, 2101.0], [538.0, 2098.0], [537.0, 2092.0], [536.0, 2094.0], [527.0, 2095.0], [513.0, 2069.75], [512.0, 2062.5], [515.0, 2055.6666666666665], [514.0, 2056.0], [517.0, 2062.5], [516.0, 2061.25], [519.0, 2070.0], [518.0, 2068.2000000000007], [526.0, 2091.25], [525.0, 2097.4], [524.0, 2076.0], [523.0, 2101.8], [522.0, 2088.6], [521.0, 2081.8181818181824], [520.0, 2072.375], [535.0, 2094.0], [534.0, 2094.0], [569.0, 2100.0], [573.0, 2106.0], [575.0, 2114.0], [561.0, 2101.0], [560.0, 2094.0], [563.0, 2104.0], [562.0, 2103.0], [565.0, 2100.0], [564.0, 2106.0], [572.0, 2103.0], [571.0, 2102.0], [570.0, 2102.0], [568.0, 2100.0], [551.0, 2095.0], [550.0, 2097.0], [549.0, 2100.0], [547.0, 2100.0], [546.0, 2091.5], [545.0, 2096.0], [544.0, 2097.0], [559.0, 2095.0], [558.0, 2097.0], [557.0, 2098.0], [556.0, 2102.0], [555.0, 2103.0], [554.0, 2093.0], [553.0, 2093.0], [552.0, 2094.0], [567.0, 2101.0], [566.0, 2101.0], [604.0, 2108.0], [607.0, 2108.0], [593.0, 2113.6666666666665], [595.0, 2108.0], [594.0, 2109.5], [597.0, 2108.0], [596.0, 2123.0], [606.0, 2108.0], [605.0, 2111.0], [603.0, 2105.0], [602.0, 2109.0], [601.0, 2107.0], [600.0, 2106.0], [590.0, 2104.0], [576.0, 2097.0], [578.0, 2101.0], [577.0, 2102.0], [581.0, 2102.0], [580.0, 2102.0], [583.0, 2106.0], [582.0, 2118.5], [589.0, 2105.0], [588.0, 2100.0], [587.0, 2122.0], [586.0, 2104.0], [585.0, 2102.0], [584.0, 2101.0], [599.0, 2111.0], [598.0, 2106.0], [636.0, 2129.5], [637.0, 2132.25], [625.0, 2121.0], [624.0, 2121.5], [635.0, 2125.75], [634.0, 2123.0], [633.0, 2124.0], [632.0, 2130.0], [623.0, 2116.0], [608.0, 2108.0], [610.0, 2103.0], [609.0, 2106.0], [615.0, 2112.0], [613.0, 2110.3333333333335], [622.0, 2120.0], [618.0, 2125.0], [617.0, 2114.0], [616.0, 2115.0], [631.0, 2125.0], [629.0, 2122.3333333333335], [627.0, 2121.0], [626.0, 2122.3333333333335], [650.0, 3492.6761633428337], [648.0, 2159.5], [647.0, 2146.5], [646.0, 2141.1428571428573], [645.0, 2139.5], [644.0, 2135.3333333333335], [643.0, 2133.5], [642.0, 2129.3333333333335], [641.0, 2137.0], [640.0, 2136.3333333333335], [1.0, 110.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[590.0688461538452, 3163.4011538461614]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 650.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 13552.5, "minX": 1.69668558E12, "maxY": 287491.5, "series": [{"data": [[1.69668558E12, 287491.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69668558E12, 13552.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69668558E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3163.4011538461614, "minX": 1.69668558E12, "maxY": 3163.4011538461614, "series": [{"data": [[1.69668558E12, 3163.4011538461614]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69668558E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3163.123076923078, "minX": 1.69668558E12, "maxY": 3163.123076923078, "series": [{"data": [[1.69668558E12, 3163.123076923078]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69668558E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 733.2809615384618, "minX": 1.69668558E12, "maxY": 733.2809615384618, "series": [{"data": [[1.69668558E12, 733.2809615384618]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69668558E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 108.0, "minX": 1.69668558E12, "maxY": 16467.0, "series": [{"data": [[1.69668558E12, 16467.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69668558E12, 108.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69668558E12, 7179.600000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69668558E12, 9576.98]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69668558E12, 2554.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.69668558E12, 8333.95]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69668558E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 598.0, "minX": 134.0, "maxY": 8312.0, "series": [{"data": [[134.0, 6993.5], [176.0, 2570.0], [183.0, 598.0], [195.0, 2787.0], [192.0, 2758.0], [201.0, 2165.0], [211.0, 2608.0], [209.0, 2584.0], [217.0, 7579.0], [233.0, 2527.0], [237.0, 2721.0], [243.0, 2414.0], [252.0, 2500.0], [256.0, 2705.0], [279.0, 2045.0], [303.0, 2816.0], [289.0, 2390.0], [333.0, 2687.0], [325.0, 1988.0], [358.0, 8312.0], [374.0, 2147.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 374.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 597.0, "minX": 134.0, "maxY": 8312.0, "series": [{"data": [[134.0, 6993.5], [176.0, 2570.0], [183.0, 597.0], [195.0, 2787.0], [192.0, 2758.0], [201.0, 2165.0], [211.0, 2608.0], [209.0, 2584.0], [217.0, 7579.0], [233.0, 2527.0], [237.0, 2721.0], [243.0, 2414.0], [252.0, 2499.5], [256.0, 2705.0], [279.0, 2045.0], [303.0, 2816.0], [289.0, 2390.0], [333.0, 2687.0], [325.0, 1987.0], [358.0, 8312.0], [374.0, 2146.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 374.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 86.66666666666667, "minX": 1.69668558E12, "maxY": 86.66666666666667, "series": [{"data": [[1.69668558E12, 86.66666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69668558E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 86.66666666666667, "minX": 1.69668558E12, "maxY": 86.66666666666667, "series": [{"data": [[1.69668558E12, 86.66666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69668558E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 86.66666666666667, "minX": 1.69668558E12, "maxY": 86.66666666666667, "series": [{"data": [[1.69668558E12, 86.66666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69668558E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 86.66666666666667, "minX": 1.69668558E12, "maxY": 86.66666666666667, "series": [{"data": [[1.69668558E12, 86.66666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69668558E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

