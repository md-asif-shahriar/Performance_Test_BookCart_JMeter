/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 113.0, "minX": 0.0, "maxY": 99727.0, "series": [{"data": [[0.0, 113.0], [0.1, 280.0], [0.2, 392.0], [0.3, 430.0], [0.4, 475.0], [0.5, 485.0], [0.6, 531.0], [0.7, 707.0], [0.8, 713.0], [0.9, 717.0], [1.0, 722.0], [1.1, 732.0], [1.2, 736.0], [1.3, 743.0], [1.4, 750.0], [1.5, 780.0], [1.6, 854.0], [1.7, 911.0], [1.8, 933.0], [1.9, 957.0], [2.0, 980.0], [2.1, 985.0], [2.2, 989.0], [2.3, 991.0], [2.4, 995.0], [2.5, 998.0], [2.6, 1003.0], [2.7, 1009.0], [2.8, 1043.0], [2.9, 1060.0], [3.0, 1086.0], [3.1, 1100.0], [3.2, 1136.0], [3.3, 1147.0], [3.4, 1184.0], [3.5, 1210.0], [3.6, 1249.0], [3.7, 1271.0], [3.8, 1291.0], [3.9, 1319.0], [4.0, 1333.0], [4.1, 1350.0], [4.2, 1375.0], [4.3, 1391.0], [4.4, 1426.0], [4.5, 1450.0], [4.6, 1465.0], [4.7, 1480.0], [4.8, 1494.0], [4.9, 1504.0], [5.0, 1509.0], [5.1, 1516.0], [5.2, 1521.0], [5.3, 1525.0], [5.4, 1530.0], [5.5, 1539.0], [5.6, 1551.0], [5.7, 1560.0], [5.8, 1575.0], [5.9, 1586.0], [6.0, 1591.0], [6.1, 1593.0], [6.2, 1595.0], [6.3, 1600.0], [6.4, 1617.0], [6.5, 1630.0], [6.6, 1637.0], [6.7, 1650.0], [6.8, 1664.0], [6.9, 1682.0], [7.0, 1695.0], [7.1, 1756.0], [7.2, 1774.0], [7.3, 1786.0], [7.4, 1797.0], [7.5, 1802.0], [7.6, 1816.0], [7.7, 1834.0], [7.8, 1837.0], [7.9, 1840.0], [8.0, 1848.0], [8.1, 1856.0], [8.2, 1876.0], [8.3, 1884.0], [8.4, 1927.0], [8.5, 1963.0], [8.6, 1978.0], [8.7, 1986.0], [8.8, 2005.0], [8.9, 2008.0], [9.0, 2013.0], [9.1, 2035.0], [9.2, 2048.0], [9.3, 2051.0], [9.4, 2060.0], [9.5, 2062.0], [9.6, 2067.0], [9.7, 2072.0], [9.8, 2100.0], [9.9, 2112.0], [10.0, 2127.0], [10.1, 2134.0], [10.2, 2141.0], [10.3, 2146.0], [10.4, 2149.0], [10.5, 2159.0], [10.6, 2172.0], [10.7, 2186.0], [10.8, 2198.0], [10.9, 2211.0], [11.0, 2223.0], [11.1, 2249.0], [11.2, 2264.0], [11.3, 2277.0], [11.4, 2291.0], [11.5, 2316.0], [11.6, 2326.0], [11.7, 2336.0], [11.8, 2342.0], [11.9, 2356.0], [12.0, 2370.0], [12.1, 2384.0], [12.2, 2396.0], [12.3, 2404.0], [12.4, 2413.0], [12.5, 2425.0], [12.6, 2429.0], [12.7, 2443.0], [12.8, 2459.0], [12.9, 2505.0], [13.0, 2517.0], [13.1, 2542.0], [13.2, 2550.0], [13.3, 2553.0], [13.4, 2559.0], [13.5, 2569.0], [13.6, 2571.0], [13.7, 2580.0], [13.8, 2585.0], [13.9, 2589.0], [14.0, 2591.0], [14.1, 2595.0], [14.2, 2602.0], [14.3, 2610.0], [14.4, 2622.0], [14.5, 2634.0], [14.6, 2640.0], [14.7, 2646.0], [14.8, 2649.0], [14.9, 2655.0], [15.0, 2667.0], [15.1, 2671.0], [15.2, 2673.0], [15.3, 2676.0], [15.4, 2679.0], [15.5, 2695.0], [15.6, 2697.0], [15.7, 2700.0], [15.8, 2701.0], [15.9, 2703.0], [16.0, 2704.0], [16.1, 2707.0], [16.2, 2710.0], [16.3, 2711.0], [16.4, 2713.0], [16.5, 2716.0], [16.6, 2718.0], [16.7, 2722.0], [16.8, 2725.0], [16.9, 2727.0], [17.0, 2730.0], [17.1, 2732.0], [17.2, 2740.0], [17.3, 2743.0], [17.4, 2747.0], [17.5, 2748.0], [17.6, 2751.0], [17.7, 2754.0], [17.8, 2755.0], [17.9, 2757.0], [18.0, 2757.0], [18.1, 2758.0], [18.2, 2759.0], [18.3, 2760.0], [18.4, 2761.0], [18.5, 2762.0], [18.6, 2763.0], [18.7, 2764.0], [18.8, 2765.0], [18.9, 2767.0], [19.0, 2768.0], [19.1, 2771.0], [19.2, 2772.0], [19.3, 2774.0], [19.4, 2776.0], [19.5, 2779.0], [19.6, 2786.0], [19.7, 2797.0], [19.8, 2808.0], [19.9, 2813.0], [20.0, 2817.0], [20.1, 2819.0], [20.2, 2822.0], [20.3, 2824.0], [20.4, 2829.0], [20.5, 2830.0], [20.6, 2832.0], [20.7, 2835.0], [20.8, 2838.0], [20.9, 2839.0], [21.0, 2840.0], [21.1, 2843.0], [21.2, 2844.0], [21.3, 2847.0], [21.4, 2848.0], [21.5, 2849.0], [21.6, 2850.0], [21.7, 2852.0], [21.8, 2854.0], [21.9, 2856.0], [22.0, 2857.0], [22.1, 2858.0], [22.2, 2859.0], [22.3, 2860.0], [22.4, 2862.0], [22.5, 2863.0], [22.6, 2866.0], [22.7, 2867.0], [22.8, 2869.0], [22.9, 2870.0], [23.0, 2871.0], [23.1, 2872.0], [23.2, 2874.0], [23.3, 2876.0], [23.4, 2877.0], [23.5, 2879.0], [23.6, 2880.0], [23.7, 2880.0], [23.8, 2882.0], [23.9, 2883.0], [24.0, 2884.0], [24.1, 2884.0], [24.2, 2885.0], [24.3, 2887.0], [24.4, 2888.0], [24.5, 2890.0], [24.6, 2892.0], [24.7, 2893.0], [24.8, 2894.0], [24.9, 2896.0], [25.0, 2898.0], [25.1, 2900.0], [25.2, 2902.0], [25.3, 2903.0], [25.4, 2905.0], [25.5, 2907.0], [25.6, 2908.0], [25.7, 2909.0], [25.8, 2911.0], [25.9, 2913.0], [26.0, 2914.0], [26.1, 2915.0], [26.2, 2916.0], [26.3, 2917.0], [26.4, 2918.0], [26.5, 2919.0], [26.6, 2920.0], [26.7, 2921.0], [26.8, 2922.0], [26.9, 2923.0], [27.0, 2924.0], [27.1, 2924.0], [27.2, 2926.0], [27.3, 2927.0], [27.4, 2928.0], [27.5, 2928.0], [27.6, 2930.0], [27.7, 2932.0], [27.8, 2934.0], [27.9, 2935.0], [28.0, 2937.0], [28.1, 2939.0], [28.2, 2940.0], [28.3, 2943.0], [28.4, 2947.0], [28.5, 2950.0], [28.6, 2953.0], [28.7, 2958.0], [28.8, 2966.0], [28.9, 2972.0], [29.0, 2976.0], [29.1, 2980.0], [29.2, 2982.0], [29.3, 2985.0], [29.4, 2988.0], [29.5, 2989.0], [29.6, 2991.0], [29.7, 2993.0], [29.8, 2997.0], [29.9, 3001.0], [30.0, 3003.0], [30.1, 3006.0], [30.2, 3010.0], [30.3, 3013.0], [30.4, 3019.0], [30.5, 3029.0], [30.6, 3035.0], [30.7, 3036.0], [30.8, 3040.0], [30.9, 3043.0], [31.0, 3048.0], [31.1, 3054.0], [31.2, 3061.0], [31.3, 3065.0], [31.4, 3076.0], [31.5, 3089.0], [31.6, 3096.0], [31.7, 3099.0], [31.8, 3103.0], [31.9, 3108.0], [32.0, 3113.0], [32.1, 3127.0], [32.2, 3137.0], [32.3, 3142.0], [32.4, 3144.0], [32.5, 3145.0], [32.6, 3148.0], [32.7, 3150.0], [32.8, 3151.0], [32.9, 3154.0], [33.0, 3157.0], [33.1, 3160.0], [33.2, 3164.0], [33.3, 3171.0], [33.4, 3180.0], [33.5, 3190.0], [33.6, 3198.0], [33.7, 3205.0], [33.8, 3209.0], [33.9, 3216.0], [34.0, 3219.0], [34.1, 3225.0], [34.2, 3232.0], [34.3, 3235.0], [34.4, 3241.0], [34.5, 3244.0], [34.6, 3248.0], [34.7, 3253.0], [34.8, 3260.0], [34.9, 3269.0], [35.0, 3278.0], [35.1, 3310.0], [35.2, 3316.0], [35.3, 3325.0], [35.4, 3344.0], [35.5, 3355.0], [35.6, 3372.0], [35.7, 3381.0], [35.8, 3394.0], [35.9, 3415.0], [36.0, 3436.0], [36.1, 3446.0], [36.2, 3454.0], [36.3, 3470.0], [36.4, 3501.0], [36.5, 3511.0], [36.6, 3516.0], [36.7, 3523.0], [36.8, 3528.0], [36.9, 3534.0], [37.0, 3537.0], [37.1, 3542.0], [37.2, 3550.0], [37.3, 3566.0], [37.4, 3579.0], [37.5, 3582.0], [37.6, 3585.0], [37.7, 3589.0], [37.8, 3593.0], [37.9, 3597.0], [38.0, 3604.0], [38.1, 3610.0], [38.2, 3632.0], [38.3, 3650.0], [38.4, 3665.0], [38.5, 3670.0], [38.6, 3672.0], [38.7, 3675.0], [38.8, 3679.0], [38.9, 3684.0], [39.0, 3691.0], [39.1, 3696.0], [39.2, 3699.0], [39.3, 3710.0], [39.4, 3722.0], [39.5, 3727.0], [39.6, 3730.0], [39.7, 3733.0], [39.8, 3759.0], [39.9, 3798.0], [40.0, 3802.0], [40.1, 3804.0], [40.2, 3807.0], [40.3, 3812.0], [40.4, 3817.0], [40.5, 3857.0], [40.6, 3878.0], [40.7, 3890.0], [40.8, 3900.0], [40.9, 3905.0], [41.0, 3932.0], [41.1, 3953.0], [41.2, 3969.0], [41.3, 3975.0], [41.4, 3994.0], [41.5, 4001.0], [41.6, 4007.0], [41.7, 4013.0], [41.8, 4027.0], [41.9, 4052.0], [42.0, 4068.0], [42.1, 4071.0], [42.2, 4074.0], [42.3, 4076.0], [42.4, 4079.0], [42.5, 4080.0], [42.6, 4081.0], [42.7, 4082.0], [42.8, 4084.0], [42.9, 4086.0], [43.0, 4087.0], [43.1, 4089.0], [43.2, 4091.0], [43.3, 4094.0], [43.4, 4097.0], [43.5, 4100.0], [43.6, 4102.0], [43.7, 4105.0], [43.8, 4107.0], [43.9, 4110.0], [44.0, 4112.0], [44.1, 4113.0], [44.2, 4115.0], [44.3, 4116.0], [44.4, 4119.0], [44.5, 4122.0], [44.6, 4126.0], [44.7, 4127.0], [44.8, 4128.0], [44.9, 4130.0], [45.0, 4132.0], [45.1, 4134.0], [45.2, 4135.0], [45.3, 4137.0], [45.4, 4138.0], [45.5, 4141.0], [45.6, 4143.0], [45.7, 4144.0], [45.8, 4146.0], [45.9, 4147.0], [46.0, 4151.0], [46.1, 4154.0], [46.2, 4159.0], [46.3, 4163.0], [46.4, 4175.0], [46.5, 4207.0], [46.6, 4276.0], [46.7, 4841.0], [46.8, 4914.0], [46.9, 5066.0], [47.0, 5089.0], [47.1, 5101.0], [47.2, 5126.0], [47.3, 5148.0], [47.4, 5178.0], [47.5, 5195.0], [47.6, 5217.0], [47.7, 5239.0], [47.8, 5275.0], [47.9, 5305.0], [48.0, 5342.0], [48.1, 5375.0], [48.2, 5425.0], [48.3, 5545.0], [48.4, 5624.0], [48.5, 5650.0], [48.6, 5694.0], [48.7, 5757.0], [48.8, 5848.0], [48.9, 5942.0], [49.0, 6055.0], [49.1, 6129.0], [49.2, 6180.0], [49.3, 6216.0], [49.4, 6275.0], [49.5, 6294.0], [49.6, 6328.0], [49.7, 6411.0], [49.8, 6475.0], [49.9, 6548.0], [50.0, 6604.0], [50.1, 6618.0], [50.2, 6631.0], [50.3, 6643.0], [50.4, 6675.0], [50.5, 6714.0], [50.6, 6732.0], [50.7, 6744.0], [50.8, 6762.0], [50.9, 6790.0], [51.0, 6833.0], [51.1, 6878.0], [51.2, 6919.0], [51.3, 6953.0], [51.4, 6981.0], [51.5, 7006.0], [51.6, 7030.0], [51.7, 7089.0], [51.8, 7127.0], [51.9, 7152.0], [52.0, 7246.0], [52.1, 7257.0], [52.2, 7267.0], [52.3, 7271.0], [52.4, 7283.0], [52.5, 7288.0], [52.6, 7294.0], [52.7, 7299.0], [52.8, 7304.0], [52.9, 7312.0], [53.0, 7331.0], [53.1, 7337.0], [53.2, 7347.0], [53.3, 7367.0], [53.4, 7371.0], [53.5, 7377.0], [53.6, 7388.0], [53.7, 7394.0], [53.8, 7404.0], [53.9, 7422.0], [54.0, 7442.0], [54.1, 7447.0], [54.2, 7450.0], [54.3, 7453.0], [54.4, 7459.0], [54.5, 7467.0], [54.6, 7483.0], [54.7, 7540.0], [54.8, 7611.0], [54.9, 7622.0], [55.0, 8084.0], [55.1, 9598.0], [55.2, 9976.0], [55.3, 10254.0], [55.4, 10446.0], [55.5, 10656.0], [55.6, 10812.0], [55.7, 11021.0], [55.8, 11161.0], [55.9, 11308.0], [56.0, 11483.0], [56.1, 11560.0], [56.2, 11846.0], [56.3, 12001.0], [56.4, 12062.0], [56.5, 12129.0], [56.6, 12186.0], [56.7, 12267.0], [56.8, 12455.0], [56.9, 12546.0], [57.0, 12597.0], [57.1, 12655.0], [57.2, 12691.0], [57.3, 12755.0], [57.4, 12804.0], [57.5, 12857.0], [57.6, 12886.0], [57.7, 12964.0], [57.8, 13029.0], [57.9, 13073.0], [58.0, 13104.0], [58.1, 13131.0], [58.2, 13195.0], [58.3, 13258.0], [58.4, 13302.0], [58.5, 13349.0], [58.6, 13373.0], [58.7, 13440.0], [58.8, 13470.0], [58.9, 13511.0], [59.0, 13546.0], [59.1, 13580.0], [59.2, 13636.0], [59.3, 13702.0], [59.4, 13746.0], [59.5, 13806.0], [59.6, 13843.0], [59.7, 13899.0], [59.8, 13928.0], [59.9, 13965.0], [60.0, 13989.0], [60.1, 14019.0], [60.2, 14034.0], [60.3, 14060.0], [60.4, 14087.0], [60.5, 14118.0], [60.6, 14131.0], [60.7, 14173.0], [60.8, 14195.0], [60.9, 14218.0], [61.0, 14244.0], [61.1, 14261.0], [61.2, 14280.0], [61.3, 14295.0], [61.4, 14313.0], [61.5, 14335.0], [61.6, 14344.0], [61.7, 14364.0], [61.8, 14383.0], [61.9, 14397.0], [62.0, 14434.0], [62.1, 14454.0], [62.2, 14477.0], [62.3, 14493.0], [62.4, 14502.0], [62.5, 14510.0], [62.6, 14519.0], [62.7, 14533.0], [62.8, 14545.0], [62.9, 14555.0], [63.0, 14559.0], [63.1, 14566.0], [63.2, 14578.0], [63.3, 14587.0], [63.4, 14597.0], [63.5, 14614.0], [63.6, 14623.0], [63.7, 14631.0], [63.8, 14634.0], [63.9, 14641.0], [64.0, 14644.0], [64.1, 14649.0], [64.2, 14654.0], [64.3, 14667.0], [64.4, 14678.0], [64.5, 14688.0], [64.6, 14693.0], [64.7, 14700.0], [64.8, 14708.0], [64.9, 14717.0], [65.0, 14724.0], [65.1, 14733.0], [65.2, 14744.0], [65.3, 14753.0], [65.4, 14759.0], [65.5, 14769.0], [65.6, 14777.0], [65.7, 14797.0], [65.8, 14808.0], [65.9, 14815.0], [66.0, 14829.0], [66.1, 14839.0], [66.2, 14853.0], [66.3, 14865.0], [66.4, 14876.0], [66.5, 14888.0], [66.6, 14900.0], [66.7, 14907.0], [66.8, 14914.0], [66.9, 14923.0], [67.0, 14928.0], [67.1, 14935.0], [67.2, 14942.0], [67.3, 14954.0], [67.4, 14967.0], [67.5, 14975.0], [67.6, 14983.0], [67.7, 14993.0], [67.8, 15002.0], [67.9, 15008.0], [68.0, 15016.0], [68.1, 15024.0], [68.2, 15039.0], [68.3, 15048.0], [68.4, 15058.0], [68.5, 15070.0], [68.6, 15077.0], [68.7, 15085.0], [68.8, 15095.0], [68.9, 15108.0], [69.0, 15126.0], [69.1, 15134.0], [69.2, 15150.0], [69.3, 15164.0], [69.4, 15174.0], [69.5, 15190.0], [69.6, 15209.0], [69.7, 15221.0], [69.8, 15238.0], [69.9, 15257.0], [70.0, 15274.0], [70.1, 15283.0], [70.2, 15322.0], [70.3, 15367.0], [70.4, 15409.0], [70.5, 15439.0], [70.6, 15466.0], [70.7, 15494.0], [70.8, 15552.0], [70.9, 15575.0], [71.0, 15647.0], [71.1, 15714.0], [71.2, 15771.0], [71.3, 15794.0], [71.4, 15860.0], [71.5, 15929.0], [71.6, 15983.0], [71.7, 16016.0], [71.8, 16057.0], [71.9, 16084.0], [72.0, 16127.0], [72.1, 16194.0], [72.2, 16236.0], [72.3, 16260.0], [72.4, 16310.0], [72.5, 16333.0], [72.6, 16349.0], [72.7, 16367.0], [72.8, 16378.0], [72.9, 16426.0], [73.0, 16448.0], [73.1, 16472.0], [73.2, 16492.0], [73.3, 16512.0], [73.4, 16547.0], [73.5, 16580.0], [73.6, 16607.0], [73.7, 16623.0], [73.8, 16648.0], [73.9, 16665.0], [74.0, 16700.0], [74.1, 16726.0], [74.2, 16743.0], [74.3, 16765.0], [74.4, 16792.0], [74.5, 16854.0], [74.6, 16897.0], [74.7, 16940.0], [74.8, 16994.0], [74.9, 17043.0], [75.0, 17083.0], [75.1, 17130.0], [75.2, 17218.0], [75.3, 17288.0], [75.4, 17330.0], [75.5, 17420.0], [75.6, 17486.0], [75.7, 17572.0], [75.8, 17622.0], [75.9, 17683.0], [76.0, 17720.0], [76.1, 17774.0], [76.2, 17822.0], [76.3, 17848.0], [76.4, 17877.0], [76.5, 17898.0], [76.6, 17914.0], [76.7, 17946.0], [76.8, 17963.0], [76.9, 17980.0], [77.0, 17996.0], [77.1, 18028.0], [77.2, 18052.0], [77.3, 18063.0], [77.4, 18082.0], [77.5, 18100.0], [77.6, 18131.0], [77.7, 18154.0], [77.8, 18168.0], [77.9, 18195.0], [78.0, 18216.0], [78.1, 18259.0], [78.2, 18301.0], [78.3, 18357.0], [78.4, 18423.0], [78.5, 18471.0], [78.6, 18489.0], [78.7, 18545.0], [78.8, 18605.0], [78.9, 18636.0], [79.0, 18686.0], [79.1, 18743.0], [79.2, 18804.0], [79.3, 18862.0], [79.4, 18915.0], [79.5, 19000.0], [79.6, 19032.0], [79.7, 19053.0], [79.8, 19058.0], [79.9, 19060.0], [80.0, 19061.0], [80.1, 19062.0], [80.2, 19063.0], [80.3, 19063.0], [80.4, 19064.0], [80.5, 19065.0], [80.6, 19065.0], [80.7, 19065.0], [80.8, 19066.0], [80.9, 19066.0], [81.0, 19067.0], [81.1, 19067.0], [81.2, 19067.0], [81.3, 19068.0], [81.4, 19068.0], [81.5, 19069.0], [81.6, 19069.0], [81.7, 19070.0], [81.8, 19070.0], [81.9, 19071.0], [82.0, 19071.0], [82.1, 19072.0], [82.2, 19072.0], [82.3, 19072.0], [82.4, 19073.0], [82.5, 19073.0], [82.6, 19073.0], [82.7, 19074.0], [82.8, 19074.0], [82.9, 19075.0], [83.0, 19075.0], [83.1, 19075.0], [83.2, 19075.0], [83.3, 19076.0], [83.4, 19076.0], [83.5, 19077.0], [83.6, 19077.0], [83.7, 19078.0], [83.8, 19078.0], [83.9, 19078.0], [84.0, 19079.0], [84.1, 19079.0], [84.2, 19080.0], [84.3, 19080.0], [84.4, 19080.0], [84.5, 19081.0], [84.6, 19081.0], [84.7, 19082.0], [84.8, 19082.0], [84.9, 19082.0], [85.0, 19083.0], [85.1, 19083.0], [85.2, 19084.0], [85.3, 19084.0], [85.4, 19085.0], [85.5, 19086.0], [85.6, 19086.0], [85.7, 19089.0], [85.8, 19090.0], [85.9, 19092.0], [86.0, 19094.0], [86.1, 19095.0], [86.2, 19096.0], [86.3, 19099.0], [86.4, 19107.0], [86.5, 19291.0], [86.6, 19743.0], [86.7, 20449.0], [86.8, 21219.0], [86.9, 22268.0], [87.0, 22520.0], [87.1, 22787.0], [87.2, 23000.0], [87.3, 23097.0], [87.4, 23341.0], [87.5, 23737.0], [87.6, 29885.0], [87.7, 29980.0], [87.8, 30015.0], [87.9, 30075.0], [88.0, 30120.0], [88.1, 30181.0], [88.2, 30293.0], [88.3, 30425.0], [88.4, 30551.0], [88.5, 30677.0], [88.6, 30781.0], [88.7, 31071.0], [88.8, 31200.0], [88.9, 31381.0], [89.0, 31521.0], [89.1, 31997.0], [89.2, 32450.0], [89.3, 32645.0], [89.4, 32896.0], [89.5, 33007.0], [89.6, 33031.0], [89.7, 33058.0], [89.8, 33077.0], [89.9, 33122.0], [90.0, 33326.0], [90.1, 33434.0], [90.2, 33618.0], [90.3, 33755.0], [90.4, 33850.0], [90.5, 33966.0], [90.6, 34015.0], [90.7, 34082.0], [90.8, 34252.0], [90.9, 34370.0], [91.0, 34557.0], [91.1, 34810.0], [91.2, 34948.0], [91.3, 35140.0], [91.4, 35364.0], [91.5, 35628.0], [91.6, 35768.0], [91.7, 35980.0], [91.8, 36604.0], [91.9, 43972.0], [92.0, 44054.0], [92.1, 44100.0], [92.2, 44223.0], [92.3, 44607.0], [92.4, 44793.0], [92.5, 44864.0], [92.6, 44955.0], [92.7, 45058.0], [92.8, 45222.0], [92.9, 45373.0], [93.0, 45510.0], [93.1, 45644.0], [93.2, 45830.0], [93.3, 45948.0], [93.4, 46053.0], [93.5, 46217.0], [93.6, 46288.0], [93.7, 46476.0], [93.8, 46685.0], [93.9, 46824.0], [94.0, 47017.0], [94.1, 47113.0], [94.2, 47390.0], [94.3, 47921.0], [94.4, 48096.0], [94.5, 50741.0], [94.6, 62552.0], [94.7, 62629.0], [94.8, 62701.0], [94.9, 62768.0], [95.0, 62842.0], [95.1, 62889.0], [95.2, 62940.0], [95.3, 63033.0], [95.4, 63462.0], [95.5, 63518.0], [95.6, 63665.0], [95.7, 64233.0], [95.8, 64299.0], [95.9, 64385.0], [96.0, 64413.0], [96.1, 64517.0], [96.2, 65290.0], [96.3, 65541.0], [96.4, 65870.0], [96.5, 66086.0], [96.6, 66510.0], [96.7, 66585.0], [96.8, 66755.0], [96.9, 66914.0], [97.0, 66987.0], [97.1, 67171.0], [97.2, 67381.0], [97.3, 67533.0], [97.4, 67889.0], [97.5, 67998.0], [97.6, 68175.0], [97.7, 68280.0], [97.8, 68386.0], [97.9, 68486.0], [98.0, 68575.0], [98.1, 68978.0], [98.2, 69139.0], [98.3, 69395.0], [98.4, 69515.0], [98.5, 69710.0], [98.6, 69842.0], [98.7, 70060.0], [98.8, 70217.0], [98.9, 70561.0], [99.0, 71494.0], [99.1, 72117.0], [99.2, 72395.0], [99.3, 72887.0], [99.4, 72974.0], [99.5, 73011.0], [99.6, 73073.0], [99.7, 73204.0], [99.8, 73379.0], [99.9, 81708.0], [100.0, 99727.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 600.0, "series": [{"data": [[66700.0, 8.0], [68300.0, 10.0], [69900.0, 5.0], [73100.0, 4.0], [100.0, 1.0], [32900.0, 8.0], [33700.0, 9.0], [34500.0, 4.0], [35300.0, 6.0], [36100.0, 3.0], [44100.0, 9.0], [44900.0, 8.0], [46500.0, 3.0], [47300.0, 2.0], [200.0, 8.0], [62500.0, 7.0], [63300.0, 2.0], [64100.0, 3.0], [65800.0, 7.0], [67400.0, 6.0], [69000.0, 4.0], [70600.0, 2.0], [72200.0, 4.0], [300.0, 12.0], [400.0, 26.0], [500.0, 8.0], [600.0, 4.0], [700.0, 78.0], [800.0, 8.0], [900.0, 77.0], [1000.0, 50.0], [1100.0, 32.0], [1200.0, 33.0], [1300.0, 48.0], [1400.0, 43.0], [1500.0, 125.0], [1600.0, 64.0], [1700.0, 37.0], [1800.0, 80.0], [1900.0, 38.0], [2000.0, 90.0], [2100.0, 90.0], [2200.0, 54.0], [2300.0, 73.0], [2400.0, 56.0], [2500.0, 112.0], [2600.0, 133.0], [2700.0, 357.0], [2800.0, 469.0], [2900.0, 423.0], [3000.0, 163.0], [3100.0, 168.0], [3200.0, 122.0], [3300.0, 71.0], [3400.0, 50.0], [3500.0, 137.0], [3700.0, 65.0], [3600.0, 110.0], [3800.0, 75.0], [3900.0, 58.0], [4000.0, 180.0], [4100.0, 261.0], [4300.0, 3.0], [66500.0, 12.0], [68100.0, 7.0], [4200.0, 12.0], [4500.0, 2.0], [69700.0, 5.0], [72900.0, 13.0], [4700.0, 1.0], [4800.0, 11.0], [74500.0, 1.0], [5100.0, 39.0], [5000.0, 25.0], [4900.0, 1.0], [5300.0, 25.0], [5200.0, 30.0], [84100.0, 1.0], [5600.0, 20.0], [5500.0, 14.0], [5400.0, 7.0], [5800.0, 11.0], [5700.0, 9.0], [6100.0, 15.0], [6000.0, 13.0], [5900.0, 6.0], [6300.0, 13.0], [6200.0, 25.0], [6600.0, 46.0], [6500.0, 9.0], [6400.0, 16.0], [6900.0, 31.0], [6800.0, 21.0], [6700.0, 38.0], [7100.0, 19.0], [7000.0, 21.0], [7400.0, 76.0], [7300.0, 93.0], [7200.0, 67.0], [7600.0, 12.0], [7500.0, 14.0], [7700.0, 1.0], [7900.0, 4.0], [7800.0, 1.0], [8000.0, 1.0], [9200.0, 2.0], [9400.0, 1.0], [9600.0, 1.0], [10000.0, 2.0], [10200.0, 5.0], [9800.0, 1.0], [10600.0, 5.0], [10400.0, 6.0], [10800.0, 6.0], [11200.0, 5.0], [11000.0, 4.0], [11400.0, 7.0], [11600.0, 4.0], [12200.0, 10.0], [12000.0, 14.0], [11800.0, 2.0], [12400.0, 7.0], [12600.0, 17.0], [13200.0, 16.0], [12800.0, 19.0], [13000.0, 22.0], [13400.0, 23.0], [13600.0, 15.0], [13800.0, 20.0], [14000.0, 35.0], [14200.0, 41.0], [14400.0, 41.0], [14600.0, 109.0], [14800.0, 76.0], [15000.0, 95.0], [15200.0, 54.0], [15400.0, 30.0], [15600.0, 10.0], [15800.0, 12.0], [16000.0, 28.0], [16200.0, 23.0], [17200.0, 13.0], [16400.0, 33.0], [16800.0, 17.0], [17600.0, 18.0], [18000.0, 43.0], [18400.0, 22.0], [18800.0, 16.0], [19200.0, 4.0], [19600.0, 2.0], [20400.0, 5.0], [21200.0, 3.0], [22000.0, 1.0], [21600.0, 1.0], [22400.0, 4.0], [22800.0, 4.0], [23200.0, 4.0], [29600.0, 1.0], [30400.0, 12.0], [30000.0, 17.0], [31200.0, 4.0], [30800.0, 1.0], [31600.0, 1.0], [32400.0, 3.0], [32000.0, 3.0], [32800.0, 5.0], [33600.0, 4.0], [34400.0, 3.0], [35200.0, 2.0], [36000.0, 1.0], [44000.0, 15.0], [44800.0, 11.0], [45600.0, 6.0], [46400.0, 6.0], [48000.0, 3.0], [47200.0, 1.0], [62400.0, 5.0], [65600.0, 1.0], [67200.0, 3.0], [70400.0, 4.0], [72000.0, 1.0], [81600.0, 3.0], [67100.0, 7.0], [68700.0, 1.0], [70300.0, 2.0], [71900.0, 1.0], [33900.0, 12.0], [33100.0, 1.0], [34700.0, 4.0], [35500.0, 1.0], [37100.0, 1.0], [44300.0, 2.0], [45100.0, 6.0], [45900.0, 7.0], [46700.0, 4.0], [47500.0, 2.0], [50700.0, 1.0], [62700.0, 11.0], [63500.0, 7.0], [64300.0, 12.0], [69400.0, 7.0], [67800.0, 3.0], [72600.0, 2.0], [66900.0, 10.0], [68500.0, 7.0], [70100.0, 6.0], [71700.0, 4.0], [73300.0, 5.0], [98900.0, 1.0], [16500.0, 29.0], [16900.0, 18.0], [17300.0, 15.0], [17700.0, 16.0], [18100.0, 38.0], [18500.0, 16.0], [18900.0, 11.0], [19300.0, 3.0], [19700.0, 3.0], [20500.0, 3.0], [20900.0, 1.0], [22500.0, 4.0], [22100.0, 1.0], [22900.0, 4.0], [23300.0, 5.0], [23700.0, 1.0], [30100.0, 16.0], [30500.0, 4.0], [29700.0, 1.0], [31300.0, 8.0], [30900.0, 4.0], [32500.0, 3.0], [32100.0, 3.0], [33800.0, 7.0], [33000.0, 35.0], [34600.0, 3.0], [35400.0, 3.0], [45000.0, 6.0], [44200.0, 3.0], [45800.0, 9.0], [46600.0, 6.0], [47400.0, 3.0], [50600.0, 1.0], [62600.0, 12.0], [63400.0, 13.0], [64200.0, 11.0], [65000.0, 1.0], [66000.0, 1.0], [67600.0, 1.0], [69200.0, 2.0], [70800.0, 1.0], [72400.0, 3.0], [65900.0, 4.0], [67500.0, 4.0], [69100.0, 3.0], [70700.0, 1.0], [72300.0, 2.0], [81900.0, 1.0], [33300.0, 9.0], [34100.0, 5.0], [34900.0, 7.0], [35700.0, 8.0], [36500.0, 2.0], [44500.0, 1.0], [46100.0, 2.0], [46900.0, 3.0], [45300.0, 10.0], [47700.0, 2.0], [48500.0, 2.0], [50900.0, 1.0], [62900.0, 11.0], [65300.0, 2.0], [63700.0, 2.0], [64500.0, 6.0], [66600.0, 5.0], [68200.0, 8.0], [69800.0, 8.0], [71400.0, 2.0], [73000.0, 17.0], [84200.0, 1.0], [65700.0, 3.0], [67300.0, 6.0], [68900.0, 5.0], [70500.0, 3.0], [72100.0, 6.0], [75300.0, 1.0], [81700.0, 2.0], [9100.0, 1.0], [9500.0, 2.0], [9700.0, 5.0], [9300.0, 2.0], [10100.0, 2.0], [9900.0, 4.0], [10700.0, 4.0], [10300.0, 3.0], [10500.0, 4.0], [10900.0, 4.0], [11100.0, 8.0], [11300.0, 5.0], [11500.0, 9.0], [11700.0, 1.0], [11900.0, 8.0], [12100.0, 14.0], [12700.0, 15.0], [12500.0, 16.0], [12300.0, 3.0], [13300.0, 21.0], [12900.0, 13.0], [13100.0, 18.0], [13500.0, 21.0], [13700.0, 16.0], [13900.0, 29.0], [14100.0, 36.0], [14300.0, 53.0], [14500.0, 93.0], [14700.0, 93.0], [14900.0, 102.0], [15100.0, 62.0], [15300.0, 20.0], [15500.0, 20.0], [15700.0, 22.0], [15900.0, 18.0], [16100.0, 13.0], [16300.0, 44.0], [16600.0, 36.0], [17000.0, 22.0], [17400.0, 13.0], [18200.0, 23.0], [17800.0, 32.0], [18600.0, 20.0], [19000.0, 600.0], [20200.0, 2.0], [21000.0, 1.0], [22200.0, 6.0], [22600.0, 2.0], [23000.0, 11.0], [23400.0, 4.0], [23800.0, 2.0], [30600.0, 8.0], [29800.0, 4.0], [30200.0, 7.0], [31000.0, 5.0], [31400.0, 5.0], [32600.0, 6.0], [31800.0, 1.0], [32200.0, 1.0], [34000.0, 13.0], [33200.0, 6.0], [34800.0, 5.0], [35600.0, 5.0], [36400.0, 2.0], [44400.0, 3.0], [46000.0, 10.0], [46800.0, 7.0], [45200.0, 5.0], [48400.0, 1.0], [62800.0, 18.0], [65200.0, 4.0], [63600.0, 3.0], [64400.0, 12.0], [66400.0, 5.0], [68000.0, 2.0], [69600.0, 3.0], [72800.0, 3.0], [76000.0, 1.0], [66300.0, 1.0], [67900.0, 9.0], [69500.0, 6.0], [72700.0, 1.0], [71100.0, 1.0], [33500.0, 6.0], [34300.0, 5.0], [35100.0, 5.0], [35900.0, 5.0], [44700.0, 9.0], [43900.0, 7.0], [46300.0, 5.0], [45500.0, 8.0], [47100.0, 7.0], [47900.0, 7.0], [51100.0, 1.0], [49500.0, 1.0], [65500.0, 3.0], [63900.0, 1.0], [67000.0, 3.0], [68600.0, 4.0], [70200.0, 2.0], [73400.0, 1.0], [84600.0, 1.0], [69300.0, 7.0], [67700.0, 2.0], [70900.0, 1.0], [82100.0, 2.0], [99700.0, 1.0], [16700.0, 37.0], [17100.0, 9.0], [17500.0, 12.0], [17900.0, 44.0], [18300.0, 15.0], [18700.0, 15.0], [19100.0, 13.0], [19900.0, 2.0], [19500.0, 1.0], [20700.0, 1.0], [21900.0, 1.0], [22300.0, 1.0], [22700.0, 4.0], [23100.0, 2.0], [23500.0, 1.0], [23900.0, 1.0], [30300.0, 5.0], [30700.0, 6.0], [29900.0, 12.0], [31100.0, 7.0], [31500.0, 6.0], [31900.0, 2.0], [32300.0, 1.0], [32700.0, 2.0], [33400.0, 4.0], [34200.0, 10.0], [35000.0, 6.0], [35800.0, 1.0], [36600.0, 2.0], [38200.0, 1.0], [44600.0, 2.0], [46200.0, 11.0], [47000.0, 9.0], [45400.0, 5.0], [47800.0, 1.0], [49400.0, 1.0], [50200.0, 1.0], [63000.0, 6.0], [65400.0, 4.0], [63800.0, 1.0], [64600.0, 1.0], [66800.0, 4.0], [68400.0, 10.0], [70000.0, 2.0], [73200.0, 5.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 99700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 47.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7350.0, "series": [{"data": [[0.0, 47.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 380.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7350.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1023.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 208.7137096774191, "minX": 1.69670652E12, "maxY": 1100.0, "series": [{"data": [[1.69670658E12, 882.8113872040674], [1.69670664E12, 208.7137096774191], [1.69670652E12, 1100.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69670664E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 236.0, "minX": 1.0, "maxY": 59470.287499999984, "series": [{"data": [[2.0, 541.0], [3.0, 523.0], [4.0, 451.0], [5.0, 287.3333333333333], [6.0, 236.0], [7.0, 247.0], [8.0, 253.0], [9.0, 263.0], [10.0, 280.0], [11.0, 272.0], [12.0, 514.0], [13.0, 343.0], [14.0, 866.0], [15.0, 376.0], [16.0, 417.4444444444445], [17.0, 390.2], [18.0, 394.5], [19.0, 430.0], [20.0, 476.11111111111114], [21.0, 481.5], [22.0, 485.0], [23.0, 485.0], [24.0, 492.5], [25.0, 500.0], [26.0, 510.0], [27.0, 523.5], [28.0, 610.0], [29.0, 669.0], [30.0, 689.0], [31.0, 735.75], [33.0, 748.0], [32.0, 747.0], [35.0, 745.0], [34.0, 748.0], [37.0, 736.0], [36.0, 742.0], [39.0, 732.0], [38.0, 728.0], [41.0, 740.0], [40.0, 727.0], [43.0, 737.0], [42.0, 737.5], [45.0, 721.0], [44.0, 724.0], [47.0, 719.0], [46.0, 727.0], [49.0, 720.0], [48.0, 722.0], [51.0, 712.0], [50.0, 724.0], [53.0, 711.0], [52.0, 719.0], [55.0, 714.3333333333334], [54.0, 713.0], [57.0, 713.0], [56.0, 708.0], [59.0, 709.8], [58.0, 707.0], [61.0, 714.0], [60.0, 717.0], [63.0, 730.0], [62.0, 716.8], [67.0, 734.0], [66.0, 733.0], [65.0, 734.0], [64.0, 732.0], [71.0, 743.0], [70.0, 742.0], [69.0, 735.0], [68.0, 739.0], [73.0, 750.0], [72.0, 747.0], [79.0, 769.0], [78.0, 739.0], [77.0, 768.5], [76.0, 751.3333333333334], [83.0, 789.0], [82.0, 796.0], [81.0, 796.0], [80.0, 793.0], [87.0, 868.5], [86.0, 833.3333333333334], [84.0, 808.0], [89.0, 911.0], [88.0, 889.0], [95.0, 908.0], [94.0, 906.0], [93.0, 913.25], [99.0, 925.5], [97.0, 931.0], [96.0, 916.0], [103.0, 938.0], [102.0, 935.0], [101.0, 933.0], [100.0, 928.0], [107.0, 947.0], [106.0, 951.0], [105.0, 944.0], [104.0, 941.0], [110.0, 953.0], [109.0, 955.0], [108.0, 957.0], [113.0, 970.0], [112.0, 964.0], [118.0, 978.5], [116.0, 967.0], [123.0, 1006.0], [121.0, 984.3333333333334], [127.0, 994.3333333333334], [124.0, 975.0], [135.0, 1000.0], [134.0, 1003.0], [133.0, 1003.0], [132.0, 1005.3333333333334], [129.0, 989.5], [143.0, 995.6666666666667], [142.0, 994.6666666666666], [140.0, 995.0], [139.0, 992.0], [138.0, 993.5], [137.0, 993.0], [136.0, 988.0], [151.0, 993.5714285714286], [150.0, 989.8333333333334], [149.0, 986.0], [148.0, 992.5], [147.0, 992.5], [146.0, 997.0], [145.0, 988.0], [144.0, 987.0], [159.0, 1093.0], [158.0, 1089.5], [157.0, 1089.0], [156.0, 1074.3333333333333], [155.0, 1063.5], [154.0, 1062.0], [153.0, 1053.4285714285713], [152.0, 1024.75], [167.0, 1190.0], [166.0, 1188.0], [165.0, 1161.0], [164.0, 1140.4615384615386], [163.0, 1123.5], [161.0, 1108.75], [160.0, 1100.0], [175.0, 5224.0], [174.0, 1200.0], [173.0, 1203.0], [172.0, 1184.0], [171.0, 1178.0], [170.0, 1181.0], [169.0, 3909.333333333333], [182.0, 1248.0], [181.0, 1242.0], [180.0, 1241.0], [179.0, 1249.0], [178.0, 1217.0], [177.0, 1218.5], [191.0, 1280.0], [190.0, 1276.5], [189.0, 1268.5], [188.0, 1267.0], [187.0, 1252.0], [186.0, 1262.75], [184.0, 1260.0], [199.0, 1304.0], [198.0, 1305.0], [197.0, 1295.0], [196.0, 1294.0], [195.0, 1291.0], [194.0, 1287.5], [192.0, 1281.0], [207.0, 1315.0], [206.0, 1345.5], [205.0, 1336.0], [204.0, 1329.6666666666667], [201.0, 1317.0], [215.0, 1310.0], [214.0, 1318.0], [213.0, 1322.0], [212.0, 1336.0], [211.0, 1329.0], [209.0, 5358.5], [208.0, 1322.0], [220.0, 1357.4285714285713], [218.0, 1350.0], [217.0, 1349.0], [216.0, 1328.0], [231.0, 1421.0], [230.0, 1392.0], [229.0, 1393.0], [228.0, 1382.6666666666667], [226.0, 1396.0], [225.0, 1381.6666666666665], [224.0, 1385.0], [239.0, 1466.25], [238.0, 1456.3333333333333], [237.0, 1445.0], [236.0, 1449.6666666666667], [234.0, 1440.0], [233.0, 1437.0], [232.0, 1423.0], [247.0, 1499.0], [246.0, 1493.25], [245.0, 1492.0], [243.0, 1485.0], [242.0, 1480.0], [241.0, 1481.5], [240.0, 1467.0], [255.0, 1524.75], [254.0, 1513.2], [252.0, 1509.0], [251.0, 1505.6666666666667], [250.0, 1503.25], [248.0, 1497.0], [270.0, 1540.0], [271.0, 1548.0], [269.0, 1537.5], [268.0, 1528.6666666666667], [267.0, 5838.0], [266.0, 1505.0], [265.0, 1508.75], [264.0, 1520.0], [263.0, 1515.5], [257.0, 1523.25], [256.0, 1523.0], [259.0, 1515.0], [258.0, 1522.5], [262.0, 1517.5], [261.0, 1523.0], [260.0, 1522.0], [286.0, 1589.5], [287.0, 1593.0], [285.0, 5484.0], [284.0, 1579.0], [283.0, 1583.0], [282.0, 1579.0], [281.0, 1577.25], [280.0, 1567.5], [279.0, 1571.4], [273.0, 1548.3333333333333], [275.0, 1549.0], [274.0, 1555.0], [278.0, 1586.0], [277.0, 1872.2857142857142], [276.0, 1551.3333333333333], [302.0, 1600.0], [303.0, 1595.5], [301.0, 1598.5], [291.0, 1589.5], [290.0, 5328.0], [289.0, 1593.0], [288.0, 1592.5], [299.0, 6604.0], [298.0, 1587.5], [297.0, 6437.833333333333], [296.0, 3984.5], [295.0, 1592.0], [294.0, 1595.0], [293.0, 4559.0], [292.0, 1587.0], [318.0, 1635.0], [319.0, 1631.5], [317.0, 1633.6666666666667], [316.0, 1632.3333333333333], [314.0, 1624.0], [313.0, 1615.0], [312.0, 1619.0], [311.0, 1617.75], [306.0, 1597.0], [304.0, 1596.0], [310.0, 1611.0], [309.0, 7864.333333333334], [308.0, 1606.2], [334.0, 1682.0], [335.0, 1695.0], [333.0, 1686.5], [332.0, 1681.3333333333333], [331.0, 1684.0], [330.0, 1671.0], [329.0, 1665.7142857142858], [328.0, 1660.5], [327.0, 1657.0], [321.0, 1638.3333333333333], [323.0, 1631.0], [322.0, 1630.0], [326.0, 1654.6666666666667], [325.0, 1650.5], [324.0, 1645.6666666666667], [351.0, 1793.5], [349.0, 1791.5], [339.0, 1723.0], [338.0, 1720.0], [337.0, 1695.0], [336.0, 1695.0], [347.0, 1774.0], [346.0, 1768.6666666666667], [345.0, 1770.3333333333335], [344.0, 1758.0], [343.0, 1738.0], [342.0, 1748.0], [341.0, 1734.0], [355.0, 1789.75], [365.0, 1803.6], [366.0, 1809.6666666666667], [364.0, 1812.75], [361.0, 1796.0], [359.0, 1783.0], [358.0, 1789.25], [356.0, 1782.0], [354.0, 1800.0], [353.0, 1790.0], [382.0, 1837.5], [383.0, 1853.0], [381.0, 1840.0], [380.0, 1851.0], [379.0, 1842.5], [378.0, 1840.0], [377.0, 1835.0], [376.0, 1835.0], [375.0, 1842.6666666666667], [369.0, 1818.0], [368.0, 1831.2], [371.0, 1830.75], [370.0, 1813.0], [374.0, 1835.0], [373.0, 1840.0], [372.0, 1824.0], [398.0, 1935.0], [399.0, 1967.1666666666667], [397.0, 1926.25], [387.0, 1850.0], [386.0, 1847.5], [385.0, 1848.8], [384.0, 1846.0], [395.0, 1910.0], [394.0, 1940.0], [393.0, 1899.5], [392.0, 1898.0], [391.0, 1880.7272727272727], [390.0, 1869.3333333333333], [389.0, 1874.0], [388.0, 1855.5], [413.0, 2008.0], [414.0, 2008.0], [412.0, 2007.0], [402.0, 1988.2], [401.0, 1985.25], [400.0, 1980.0], [411.0, 2005.6666666666667], [410.0, 2010.3333333333333], [408.0, 2008.5], [407.0, 1989.0], [406.0, 1991.0], [405.0, 2000.3333333333333], [404.0, 2005.0], [430.0, 2059.0], [431.0, 2059.5], [429.0, 2050.6666666666665], [428.0, 2050.0], [427.0, 2049.6666666666665], [426.0, 2048.0], [425.0, 2055.5], [424.0, 2049.0], [423.0, 2045.6], [417.0, 2013.0], [416.0, 2010.4], [419.0, 2029.3333333333333], [418.0, 2018.0], [421.0, 2046.0], [420.0, 2035.75], [446.0, 2701.2], [447.0, 2132.0], [445.0, 2149.6666666666665], [444.0, 2128.4166666666665], [443.0, 2128.6666666666665], [442.0, 2110.0], [441.0, 2105.5], [440.0, 2106.3333333333335], [439.0, 2112.0], [433.0, 2062.0], [432.0, 2066.0], [435.0, 2067.6666666666665], [434.0, 2061.75], [438.0, 2077.5], [437.0, 2070.333333333333], [436.0, 2070.0], [462.0, 2147.0], [463.0, 2146.0], [461.0, 2151.5], [451.0, 2149.0], [450.0, 2143.6666666666665], [448.0, 2136.0], [459.0, 2146.5], [458.0, 3506.0], [457.0, 3486.5], [455.0, 2132.0], [454.0, 2135.0], [453.0, 2155.5], [478.0, 2231.857142857143], [479.0, 2232.0], [477.0, 2217.3333333333335], [467.0, 2159.0], [466.0, 3506.5], [465.0, 2530.7142857142853], [464.0, 3497.25], [475.0, 2547.625], [474.0, 2199.0], [473.0, 2199.0], [472.0, 2195.0], [471.0, 2180.5], [470.0, 2562.428571428571], [469.0, 2172.0], [468.0, 2167.6666666666665], [494.0, 2328.5], [495.0, 2342.0], [493.0, 2316.5], [492.0, 2317.0], [491.0, 2316.4], [490.0, 2314.0], [489.0, 2316.0], [488.0, 2303.5], [487.0, 2286.8], [480.0, 2260.6666666666665], [483.0, 2266.4444444444443], [481.0, 2255.0], [486.0, 2973.75], [485.0, 2277.0], [484.0, 2275.5], [509.0, 2370.0], [511.0, 2380.5], [508.0, 2368.3333333333335], [498.0, 2338.833333333333], [496.0, 2343.5], [507.0, 2369.5], [506.0, 3303.6666666666665], [505.0, 2353.0], [504.0, 2355.0], [503.0, 2353.0], [502.0, 2348.0], [501.0, 2336.0], [500.0, 2340.5], [537.0, 2756.222222222222], [541.0, 2458.0], [543.0, 2459.0], [529.0, 3840.5], [528.0, 2412.5], [531.0, 2782.0], [530.0, 2414.0], [540.0, 2447.5], [539.0, 2442.0], [538.0, 2451.0], [526.0, 2416.0], [513.0, 2384.0], [512.0, 3323.0], [515.0, 2386.25], [514.0, 2381.0], [517.0, 3345.6666666666665], [516.0, 3101.25], [519.0, 2410.0], [518.0, 2398.0], [525.0, 2408.4], [524.0, 2407.75], [522.0, 3819.0], [521.0, 2396.6666666666665], [535.0, 2425.0], [534.0, 2426.0], [533.0, 2429.0], [532.0, 2426.6666666666665], [572.0, 2567.6], [575.0, 2579.3333333333335], [561.0, 2550.5], [560.0, 2548.0], [563.0, 2553.0], [562.0, 8561.333333333332], [565.0, 2552.5], [564.0, 2550.0], [574.0, 2571.0], [573.0, 2570.5], [571.0, 2559.0], [570.0, 2561.5], [569.0, 2555.0], [568.0, 7230.25], [559.0, 2551.5], [545.0, 2463.0], [544.0, 2469.0], [547.0, 2507.0], [546.0, 2471.8], [549.0, 2511.0], [548.0, 2509.6666666666665], [551.0, 2519.0], [550.0, 2518.5], [558.0, 2542.0], [557.0, 2544.0], [556.0, 2541.5], [555.0, 2524.5], [553.0, 2517.0], [552.0, 2518.0], [567.0, 2559.0], [566.0, 2550.0], [604.0, 2684.0], [607.0, 2707.0], [595.0, 2870.1538461538457], [593.0, 2653.5], [597.0, 2650.0], [596.0, 2645.0], [606.0, 2707.5], [605.0, 3356.3333333333335], [603.0, 2678.6666666666665], [602.0, 4371.333333333333], [601.0, 2678.5], [600.0, 2677.0], [591.0, 2831.7333333333336], [578.0, 2585.166666666667], [577.0, 3318.0], [582.0, 2588.5], [579.0, 2588.0], [590.0, 2615.0], [589.0, 4373.4], [588.0, 3094.6666666666665], [587.0, 2587.3333333333335], [585.0, 2591.0], [584.0, 2591.5], [599.0, 2672.625], [598.0, 2952.9], [636.0, 2706.0], [639.0, 2700.083333333333], [625.0, 2774.933333333334], [624.0, 2761.5], [627.0, 2768.0], [626.0, 2770.0], [629.0, 2761.0], [628.0, 2762.0], [638.0, 3194.5], [637.0, 2714.3333333333335], [635.0, 2820.294117647059], [634.0, 2877.1249999999995], [633.0, 2769.25], [632.0, 2760.9], [622.0, 2761.0], [609.0, 2720.3333333333335], [608.0, 2730.0], [611.0, 2730.5], [610.0, 4231.0], [613.0, 2741.3333333333335], [612.0, 2753.75], [615.0, 2758.3333333333335], [614.0, 2746.0], [621.0, 2770.0], [620.0, 2767.2], [619.0, 2769.9999999999995], [618.0, 2771.0], [617.0, 2763.3333333333335], [616.0, 2756.5], [631.0, 2759.6666666666665], [630.0, 2754.0], [666.0, 2745.25], [658.0, 2731.0], [670.0, 2742.8], [671.0, 2747.0], [657.0, 2731.0], [656.0, 2730.0], [669.0, 2743.0], [664.0, 2741.0], [647.0, 2701.916666666667], [646.0, 2710.3333333333335], [645.0, 4242.272727272727], [644.0, 2709.5], [643.0, 2705.833333333333], [642.0, 2702.0], [640.0, 2697.3333333333335], [655.0, 2727.0], [654.0, 2727.6666666666665], [653.0, 2734.0], [652.0, 2713.6666666666665], [651.0, 2723.5555555555557], [650.0, 2717.5], [649.0, 5546.833333333334], [648.0, 2699.1428571428573], [662.0, 2729.0], [661.0, 6975.25], [659.0, 2726.3333333333335], [700.0, 2871.5], [703.0, 2879.5], [688.0, 2829.0], [690.0, 2832.714285714286], [689.0, 2830.6666666666665], [692.0, 2845.1666666666665], [691.0, 2844.5], [702.0, 2882.5], [701.0, 5440.2], [699.0, 5162.842105263158], [698.0, 2863.333333333333], [697.0, 3787.166666666667], [696.0, 2857.0], [687.0, 2824.8], [673.0, 2762.0], [672.0, 2757.454545454545], [675.0, 2767.8333333333335], [674.0, 2760.6666666666665], [677.0, 2774.333333333333], [676.0, 2767.0], [679.0, 2785.4166666666665], [678.0, 2777.75], [686.0, 2822.0], [685.0, 2821.4], [684.0, 2814.8571428571427], [682.0, 2819.0], [681.0, 3068.25], [680.0, 2796.4], [695.0, 2851.0], [693.0, 2851.625], [732.0, 2932.0], [735.0, 2949.75], [720.0, 2876.4], [722.0, 2881.0], [721.0, 2878.3333333333335], [724.0, 2882.5], [723.0, 2884.0], [734.0, 2930.285714285714], [733.0, 2926.2999999999997], [731.0, 2922.5555555555557], [730.0, 2922.0], [729.0, 3945.6470588235293], [728.0, 2894.285714285714], [718.0, 2874.3333333333335], [704.0, 2877.75], [706.0, 2884.6666666666665], [705.0, 2874.0], [708.0, 2894.5], [707.0, 6367.6], [710.0, 2857.0], [709.0, 2896.0], [717.0, 2870.5], [716.0, 2867.0], [715.0, 2866.0], [714.0, 2864.0], [713.0, 2866.0], [712.0, 2859.0], [726.0, 2881.5], [725.0, 2881.0], [766.0, 2982.75], [756.0, 2994.0], [767.0, 9393.777777777776], [753.0, 2977.0], [752.0, 2986.0], [755.0, 2994.0], [754.0, 2982.6666666666665], [765.0, 2986.8], [762.0, 2986.6], [761.0, 2981.0], [743.0, 2925.461538461538], [742.0, 2926.0], [741.0, 2926.0], [740.0, 2927.5], [739.0, 2932.0], [738.0, 2940.0], [737.0, 2944.0], [736.0, 2938.1818181818185], [751.0, 2962.0], [750.0, 2947.25], [749.0, 2927.0833333333335], [748.0, 2912.0], [747.0, 2923.4999999999995], [746.0, 2919.0], [745.0, 2921.1666666666665], [744.0, 2924.333333333333], [759.0, 3003.6000000000004], [758.0, 3000.75], [757.0, 2992.0], [796.0, 5428.333333333333], [799.0, 8365.2], [785.0, 4410.875], [784.0, 4477.555555555556], [787.0, 6832.0], [786.0, 6080.22033898305], [789.0, 8475.857142857143], [788.0, 3150.0], [798.0, 6967.5], [797.0, 5672.0], [795.0, 3156.6666666666665], [794.0, 10385.0], [793.0, 7505.363636363637], [792.0, 8627.5], [783.0, 5970.050000000002], [768.0, 5823.666666666666], [770.0, 2906.5], [769.0, 3909.3333333333335], [773.0, 4542.142857142857], [771.0, 3131.357142857142], [775.0, 4054.1999999999994], [774.0, 2920.5], [782.0, 5073.0], [781.0, 2970.3333333333335], [780.0, 6907.44827586207], [779.0, 7188.092592592592], [778.0, 4769.0270270270275], [777.0, 5760.387096774193], [776.0, 5231.285714285715], [791.0, 3150.0], [790.0, 7515.043478260869], [828.0, 10771.802325581391], [831.0, 10748.857142857145], [817.0, 3107.6666666666665], [816.0, 11373.14705882353], [819.0, 9728.0], [818.0, 12092.181818181818], [821.0, 13723.363636363638], [820.0, 12984.666666666668], [830.0, 2883.0], [829.0, 6882.0], [827.0, 26280.75], [826.0, 12407.916666666666], [825.0, 9609.2], [824.0, 7979.555555555556], [815.0, 9960.35714285714], [801.0, 3218.75], [800.0, 8703.0], [803.0, 6431.375], [802.0, 3220.0], [805.0, 6542.666666666667], [804.0, 3235.0], [807.0, 10701.75], [806.0, 8151.166666666667], [814.0, 9025.294117647061], [813.0, 3194.5], [812.0, 11179.236363636366], [811.0, 11386.699999999999], [810.0, 10700.0], [809.0, 6618.25], [808.0, 6871.090909090909], [823.0, 9400.714285714286], [822.0, 3064.0], [857.0, 6797.0], [862.0, 6945.0], [863.0, 2871.0], [850.0, 10390.2], [848.0, 2882.5], [860.0, 8765.0], [859.0, 2878.0], [858.0, 2888.0], [847.0, 8798.0], [834.0, 10967.0], [833.0, 5427.6], [836.0, 2884.0], [835.0, 8805.0], [839.0, 2882.0], [838.0, 2884.5], [846.0, 8879.0], [845.0, 5289.4], [842.0, 15267.0], [841.0, 11220.0], [840.0, 11933.5], [855.0, 12162.5], [854.0, 2883.0], [852.0, 2887.0], [851.0, 2883.0], [889.0, 2902.0], [894.0, 2901.0], [895.0, 12515.8], [880.0, 2943.0], [882.0, 2939.0], [881.0, 12014.5], [885.0, 6992.333333333333], [883.0, 12028.25], [893.0, 8980.0], [892.0, 6970.333333333333], [890.0, 8966.5], [888.0, 8862.5], [871.0, 9110.5], [870.0, 13516.588235294117], [869.0, 11025.0], [868.0, 6931.0], [866.0, 9086.25], [865.0, 2893.0], [864.0, 9010.5], [879.0, 12984.333333333334], [878.0, 2937.0], [877.0, 2938.0], [876.0, 2943.0], [874.0, 10982.0], [873.0, 11653.75], [872.0, 12507.0], [887.0, 8837.0], [886.0, 2916.0], [921.0, 11924.75], [926.0, 2815.0], [927.0, 2820.0], [913.0, 2851.0], [912.0, 2849.0], [915.0, 12239.0], [914.0, 2854.0], [917.0, 8880.0], [916.0, 10813.333333333334], [925.0, 2812.0], [924.0, 2814.0], [923.0, 2819.0], [920.0, 10864.333333333334], [903.0, 8748.5], [902.0, 11797.0], [901.0, 2885.0], [900.0, 10874.666666666666], [899.0, 2889.0], [898.0, 8737.0], [897.0, 10883.333333333332], [911.0, 2852.0], [910.0, 2847.5], [908.0, 11892.125], [907.0, 10298.875], [906.0, 10912.666666666668], [905.0, 11740.75], [904.0, 10872.666666666666], [919.0, 9433.0], [918.0, 2832.0], [952.0, 5365.8], [958.0, 2871.0], [959.0, 11118.666666666668], [957.0, 2883.0], [956.0, 2871.0], [954.0, 8968.833333333334], [943.0, 11044.0], [930.0, 2812.0], [929.0, 2817.0], [932.0, 2817.0], [931.0, 2823.5], [935.0, 8921.0], [933.0, 2820.0], [942.0, 7000.0], [941.0, 2872.0], [940.0, 9978.0], [939.0, 10939.333333333334], [938.0, 2829.0], [937.0, 8876.25], [936.0, 2832.0], [948.0, 2885.0], [947.0, 2888.0], [945.0, 2898.5], [988.0, 13983.938461538462], [991.0, 3732.5], [977.0, 2861.0], [976.0, 2863.0], [979.0, 2856.0], [978.0, 2858.0], [981.0, 12107.764705882351], [980.0, 11743.0], [990.0, 10837.366255144032], [989.0, 16703.45454545454], [987.0, 8150.285714285715], [986.0, 8852.5], [985.0, 8982.0], [984.0, 8983.5], [975.0, 6885.333333333333], [961.0, 2867.0], [960.0, 6992.666666666666], [964.0, 6995.666666666666], [962.0, 8871.5], [967.0, 2858.0], [965.0, 8872.5], [973.0, 8950.5], [972.0, 2868.0], [971.0, 2865.0], [970.0, 8965.0], [969.0, 7005.666666666666], [968.0, 29300.333333333336], [983.0, 10989.0], [982.0, 7787.0], [1020.0, 5598.5], [1023.0, 3975.0], [1009.0, 6804.5], [1011.0, 5823.5], [1010.0, 4199.0], [1013.0, 4201.0], [1012.0, 5824.0], [1022.0, 6936.6], [1021.0, 5601.0], [1019.0, 7061.6875], [1018.0, 6938.900000000001], [1017.0, 7197.812499999999], [1016.0, 7383.290322580644], [1007.0, 6989.857142857143], [993.0, 3795.416666666667], [992.0, 7496.684210526316], [995.0, 4140.0], [994.0, 5607.649122807019], [997.0, 7075.5], [996.0, 4149.0], [999.0, 7440.833333333333], [998.0, 6491.0], [1006.0, 10822.35], [1005.0, 7920.0], [1004.0, 4301.0], [1003.0, 5945.0], [1002.0, 6499.333333333333], [1001.0, 4255.0], [1000.0, 6491.0], [1015.0, 6644.25], [1014.0, 6802.4], [1080.0, 3371.0], [1076.0, 3381.0], [1084.0, 3356.0], [1056.0, 26183.333333333336], [1060.0, 4894.0], [1058.0, 3676.5], [1062.0, 5461.0], [1064.0, 3586.0], [1066.0, 16894.833333333336], [1068.0, 3448.0], [1086.0, 3343.0], [1082.0, 5140.0], [1078.0, 3375.0], [1074.0, 3411.0], [1072.0, 4585.5], [1054.0, 5504.0], [1024.0, 5618.5], [1026.0, 5628.0], [1028.0, 5619.5], [1030.0, 6869.571428571428], [1032.0, 7093.0], [1034.0, 6220.666666666667], [1036.0, 3891.0], [1038.0, 5648.5], [1052.0, 3687.0], [1050.0, 5507.5], [1048.0, 3819.0], [1046.0, 6249.333333333333], [1044.0, 5646.0], [1042.0, 5653.0], [1040.0, 3890.0], [1100.0, 19989.46925415014], [1098.0, 6343.5], [1094.0, 3313.0], [1092.0, 3323.0], [1090.0, 3325.0], [1088.0, 3328.0], [1081.0, 3354.0], [1087.0, 4496.0], [1061.0, 6414.75], [1063.0, 3592.0], [1065.0, 3570.0], [1067.0, 3447.0], [1071.0, 3434.3333333333335], [1069.0, 3442.0], [1085.0, 3354.0], [1083.0, 3354.0], [1079.0, 3372.0], [1077.0, 3395.0], [1075.0, 3388.0], [1073.0, 3416.0], [1025.0, 5626.0], [1027.0, 5618.0], [1029.0, 6771.333333333333], [1031.0, 6932.75], [1033.0, 3889.0], [1035.0, 6893.428571428572], [1039.0, 6520.0], [1053.0, 6114.333333333333], [1051.0, 5509.5], [1049.0, 6637.6], [1047.0, 6215.666666666667], [1045.0, 5664.5], [1043.0, 3920.0], [1041.0, 6714.0], [1097.0, 59470.287499999984], [1099.0, 25359.302439024377], [1095.0, 3301.0], [1093.0, 3320.0], [1091.0, 3333.0], [1089.0, 3320.0], [1.0, 1628.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[898.5036363636362, 13487.55113636361]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2502.883333333333, "minX": 1.69670652E12, "maxY": 258482.56666666668, "series": [{"data": [[1.69670658E12, 258482.56666666668], [1.69670664E12, 29657.666666666668], [1.69670652E12, 161670.83333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69670658E12, 13862.3], [1.69670664E12, 2502.883333333333], [1.69670652E12, 6569.816666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69670664E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1480.2889784946256, "minX": 1.69670652E12, "maxY": 16130.297789082373, "series": [{"data": [[1.69670658E12, 16130.297789082373], [1.69670664E12, 1480.2889784946256], [1.69670652E12, 11934.520543293736]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69670664E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1478.6827956989248, "minX": 1.69670652E12, "maxY": 16126.746429270173, "series": [{"data": [[1.69670658E12, 16126.746429270173], [1.69670664E12, 1478.6827956989248], [1.69670652E12, 11934.487945670626]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69670664E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 199.04166666666657, "minX": 1.69670652E12, "maxY": 4530.468930390481, "series": [{"data": [[1.69670658E12, 1762.702602230485], [1.69670664E12, 199.04166666666657], [1.69670652E12, 4530.468930390481]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69670664E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 212.0, "minX": 1.69670652E12, "maxY": 99727.0, "series": [{"data": [[1.69670658E12, 99727.0], [1.69670664E12, 13456.0], [1.69670652E12, 23950.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69670658E12, 1880.0], [1.69670664E12, 212.0], [1.69670652E12, 2196.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69670658E12, 62606.200000000004], [1.69670664E12, 1819.0], [1.69670652E12, 18151.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69670658E12, 73000.44], [1.69670664E12, 11528.749999999998], [1.69670652E12, 23068.36]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69670658E12, 3671.5], [1.69670664E12, 1380.5], [1.69670652E12, 7011.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.69670658E12, 67586.15000000001], [1.69670664E12, 1850.0], [1.69670652E12, 18846.8]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69670664E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 391.5, "minX": 1.0, "maxY": 72961.0, "series": [{"data": [[32.0, 391.5], [2.0, 576.5], [34.0, 5096.0], [40.0, 3919.5], [60.0, 3537.5], [69.0, 3670.0], [79.0, 13059.0], [77.0, 72961.0], [92.0, 7443.5], [105.0, 4119.0], [111.0, 3642.0], [119.0, 11134.0], [135.0, 4083.0], [8.0, 8814.0], [136.0, 4141.0], [139.0, 3730.0], [159.0, 743.0], [165.0, 7287.0], [170.0, 14744.0], [187.0, 15010.0], [214.0, 13988.5], [208.0, 4130.5], [13.0, 3323.0], [215.0, 14719.0], [244.0, 23306.5], [242.0, 2928.0], [250.0, 2751.5], [270.0, 3242.0], [264.0, 17728.5], [263.0, 3214.0], [258.0, 1269.0], [1.0, 584.0], [17.0, 66522.0], [277.0, 2909.0], [285.0, 2838.0], [290.0, 2823.0], [296.0, 2116.5], [307.0, 30635.0], [315.0, 16588.0], [314.0, 2559.5], [469.0, 6621.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 14600.0], [8.0, 36543.5], [140.0, 19074.5], [34.0, 35700.0], [9.0, 19071.0], [39.0, 34872.0], [3.0, 45838.0], [50.0, 33963.0], [55.0, 14632.0], [14.0, 5225.5], [1.0, 19069.0], [17.0, 31381.0], [76.0, 33088.0], [5.0, 31880.0], [338.0, 19077.0], [6.0, 3931.0], [26.0, 32706.0], [27.0, 30477.0], [112.0, 19072.0], [31.0, 31016.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 469.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 391.0, "minX": 1.0, "maxY": 72961.0, "series": [{"data": [[32.0, 391.0], [2.0, 575.5], [34.0, 5096.0], [40.0, 3902.5], [60.0, 3536.5], [69.0, 3668.0], [79.0, 13058.0], [77.0, 72961.0], [92.0, 7443.5], [105.0, 4119.0], [111.0, 3642.0], [119.0, 11134.0], [135.0, 4083.0], [8.0, 8814.0], [136.0, 4141.0], [139.0, 3729.0], [159.0, 742.0], [165.0, 7287.0], [170.0, 14744.0], [187.0, 15010.0], [214.0, 13988.5], [208.0, 4130.5], [13.0, 3319.0], [215.0, 14719.0], [244.0, 23306.5], [242.0, 2927.5], [250.0, 2751.0], [270.0, 3241.0], [264.0, 17728.0], [263.0, 3214.0], [258.0, 1265.0], [1.0, 584.0], [17.0, 66522.0], [277.0, 2909.0], [285.0, 2837.0], [290.0, 2821.5], [296.0, 2116.0], [307.0, 30635.0], [315.0, 16588.0], [314.0, 2559.0], [469.0, 6621.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 14600.0], [8.0, 36543.5], [140.0, 19074.5], [34.0, 35700.0], [9.0, 19070.0], [39.0, 34872.0], [3.0, 45838.0], [50.0, 33963.0], [55.0, 14632.0], [14.0, 5225.5], [1.0, 19069.0], [17.0, 31381.0], [76.0, 33088.0], [5.0, 31880.0], [338.0, 19077.0], [6.0, 3931.0], [26.0, 32706.0], [27.0, 30477.0], [112.0, 19072.0], [31.0, 31016.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 469.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.883333333333334, "minX": 1.69670652E12, "maxY": 73.36666666666666, "series": [{"data": [[1.69670658E12, 73.36666666666666], [1.69670664E12, 5.883333333333334], [1.69670652E12, 67.41666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69670664E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.69670652E12, "maxY": 78.13333333333334, "series": [{"data": [[1.69670658E12, 78.13333333333334], [1.69670664E12, 12.4], [1.69670652E12, 39.083333333333336]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69670658E12, 6.733333333333333], [1.69670652E12, 10.0]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.69670658E12, 0.31666666666666665]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69670664E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 7.05, "minX": 1.69670652E12, "maxY": 78.13333333333334, "series": [{"data": [[1.69670658E12, 78.13333333333334], [1.69670664E12, 12.4], [1.69670652E12, 39.083333333333336]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.69670658E12, 7.05], [1.69670652E12, 10.0]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69670664E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 7.05, "minX": 1.69670652E12, "maxY": 78.13333333333334, "series": [{"data": [[1.69670658E12, 78.13333333333334], [1.69670664E12, 12.4], [1.69670652E12, 39.083333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69670658E12, 7.05], [1.69670652E12, 10.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69670664E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

