/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 99.0, "minX": 0.0, "maxY": 18076.0, "series": [{"data": [[0.0, 99.0], [0.1, 101.0], [0.2, 102.0], [0.3, 102.0], [0.4, 104.0], [0.5, 107.0], [0.6, 243.0], [0.7, 313.0], [0.8, 402.0], [0.9, 416.0], [1.0, 426.0], [1.1, 430.0], [1.2, 438.0], [1.3, 459.0], [1.4, 496.0], [1.5, 519.0], [1.6, 549.0], [1.7, 576.0], [1.8, 594.0], [1.9, 618.0], [2.0, 693.0], [2.1, 712.0], [2.2, 751.0], [2.3, 784.0], [2.4, 790.0], [2.5, 813.0], [2.6, 852.0], [2.7, 878.0], [2.8, 902.0], [2.9, 904.0], [3.0, 908.0], [3.1, 909.0], [3.2, 913.0], [3.3, 916.0], [3.4, 923.0], [3.5, 928.0], [3.6, 936.0], [3.7, 942.0], [3.8, 950.0], [3.9, 952.0], [4.0, 955.0], [4.1, 965.0], [4.2, 979.0], [4.3, 989.0], [4.4, 990.0], [4.5, 998.0], [4.6, 1002.0], [4.7, 1008.0], [4.8, 1011.0], [4.9, 1013.0], [5.0, 1015.0], [5.1, 1019.0], [5.2, 1021.0], [5.3, 1023.0], [5.4, 1024.0], [5.5, 1025.0], [5.6, 1028.0], [5.7, 1034.0], [5.8, 1037.0], [5.9, 1047.0], [6.0, 1049.0], [6.1, 1058.0], [6.2, 1073.0], [6.3, 1084.0], [6.4, 1105.0], [6.5, 1117.0], [6.6, 1141.0], [6.7, 1158.0], [6.8, 1197.0], [6.9, 1216.0], [7.0, 1242.0], [7.1, 1259.0], [7.2, 1270.0], [7.3, 1296.0], [7.4, 1353.0], [7.5, 1392.0], [7.6, 1398.0], [7.7, 1406.0], [7.8, 1432.0], [7.9, 1436.0], [8.0, 1438.0], [8.1, 1440.0], [8.2, 1442.0], [8.3, 1445.0], [8.4, 1448.0], [8.5, 1450.0], [8.6, 1452.0], [8.7, 1454.0], [8.8, 1459.0], [8.9, 1460.0], [9.0, 1464.0], [9.1, 1469.0], [9.2, 1481.0], [9.3, 1485.0], [9.4, 1498.0], [9.5, 1504.0], [9.6, 1517.0], [9.7, 1518.0], [9.8, 1535.0], [9.9, 1543.0], [10.0, 1550.0], [10.1, 1559.0], [10.2, 1564.0], [10.3, 1567.0], [10.4, 1569.0], [10.5, 1571.0], [10.6, 1574.0], [10.7, 1577.0], [10.8, 1579.0], [10.9, 1582.0], [11.0, 1585.0], [11.1, 1585.0], [11.2, 1589.0], [11.3, 1592.0], [11.4, 1594.0], [11.5, 1597.0], [11.6, 1598.0], [11.7, 1599.0], [11.8, 1600.0], [11.9, 1601.0], [12.0, 1602.0], [12.1, 1602.0], [12.2, 1603.0], [12.3, 1605.0], [12.4, 1607.0], [12.5, 1609.0], [12.6, 1612.0], [12.7, 1614.0], [12.8, 1615.0], [12.9, 1618.0], [13.0, 1621.0], [13.1, 1624.0], [13.2, 1626.0], [13.3, 1626.0], [13.4, 1630.0], [13.5, 1632.0], [13.6, 1633.0], [13.7, 1637.0], [13.8, 1639.0], [13.9, 1640.0], [14.0, 1644.0], [14.1, 1646.0], [14.2, 1647.0], [14.3, 1648.0], [14.4, 1649.0], [14.5, 1652.0], [14.6, 1657.0], [14.7, 1657.0], [14.8, 1659.0], [14.9, 1659.0], [15.0, 1662.0], [15.1, 1663.0], [15.2, 1665.0], [15.3, 1666.0], [15.4, 1667.0], [15.5, 1669.0], [15.6, 1671.0], [15.7, 1672.0], [15.8, 1674.0], [15.9, 1675.0], [16.0, 1678.0], [16.1, 1682.0], [16.2, 1684.0], [16.3, 1687.0], [16.4, 1689.0], [16.5, 1690.0], [16.6, 1693.0], [16.7, 1693.0], [16.8, 1695.0], [16.9, 1697.0], [17.0, 1697.0], [17.1, 1699.0], [17.2, 1700.0], [17.3, 1701.0], [17.4, 1701.0], [17.5, 1702.0], [17.6, 1702.0], [17.7, 1703.0], [17.8, 1703.0], [17.9, 1704.0], [18.0, 1704.0], [18.1, 1704.0], [18.2, 1705.0], [18.3, 1705.0], [18.4, 1706.0], [18.5, 1706.0], [18.6, 1706.0], [18.7, 1707.0], [18.8, 1708.0], [18.9, 1708.0], [19.0, 1709.0], [19.1, 1709.0], [19.2, 1709.0], [19.3, 1711.0], [19.4, 1711.0], [19.5, 1711.0], [19.6, 1712.0], [19.7, 1713.0], [19.8, 1714.0], [19.9, 1714.0], [20.0, 1715.0], [20.1, 1715.0], [20.2, 1715.0], [20.3, 1717.0], [20.4, 1718.0], [20.5, 1718.0], [20.6, 1719.0], [20.7, 1719.0], [20.8, 1721.0], [20.9, 1722.0], [21.0, 1723.0], [21.1, 1723.0], [21.2, 1724.0], [21.3, 1725.0], [21.4, 1725.0], [21.5, 1726.0], [21.6, 1727.0], [21.7, 1727.0], [21.8, 1728.0], [21.9, 1729.0], [22.0, 1730.0], [22.1, 1730.0], [22.2, 1730.0], [22.3, 1731.0], [22.4, 1731.0], [22.5, 1731.0], [22.6, 1732.0], [22.7, 1733.0], [22.8, 1733.0], [22.9, 1733.0], [23.0, 1734.0], [23.1, 1734.0], [23.2, 1735.0], [23.3, 1735.0], [23.4, 1736.0], [23.5, 1737.0], [23.6, 1737.0], [23.7, 1738.0], [23.8, 1739.0], [23.9, 1739.0], [24.0, 1740.0], [24.1, 1741.0], [24.2, 1742.0], [24.3, 1743.0], [24.4, 1744.0], [24.5, 1744.0], [24.6, 1746.0], [24.7, 1748.0], [24.8, 1749.0], [24.9, 1750.0], [25.0, 1751.0], [25.1, 1752.0], [25.2, 1754.0], [25.3, 1756.0], [25.4, 1758.0], [25.5, 1760.0], [25.6, 1762.0], [25.7, 1763.0], [25.8, 1764.0], [25.9, 1766.0], [26.0, 1767.0], [26.1, 1768.0], [26.2, 1768.0], [26.3, 1769.0], [26.4, 1770.0], [26.5, 1771.0], [26.6, 1772.0], [26.7, 1773.0], [26.8, 1774.0], [26.9, 1775.0], [27.0, 1776.0], [27.1, 1777.0], [27.2, 1778.0], [27.3, 1779.0], [27.4, 1779.0], [27.5, 1779.0], [27.6, 1780.0], [27.7, 1781.0], [27.8, 1783.0], [27.9, 1783.0], [28.0, 1785.0], [28.1, 1785.0], [28.2, 1787.0], [28.3, 1789.0], [28.4, 1789.0], [28.5, 1789.0], [28.6, 1791.0], [28.7, 1792.0], [28.8, 1793.0], [28.9, 1794.0], [29.0, 1795.0], [29.1, 1796.0], [29.2, 1797.0], [29.3, 1799.0], [29.4, 1800.0], [29.5, 1800.0], [29.6, 1802.0], [29.7, 1803.0], [29.8, 1804.0], [29.9, 1806.0], [30.0, 1807.0], [30.1, 1807.0], [30.2, 1808.0], [30.3, 1809.0], [30.4, 1810.0], [30.5, 1811.0], [30.6, 1812.0], [30.7, 1812.0], [30.8, 1814.0], [30.9, 1815.0], [31.0, 1816.0], [31.1, 1817.0], [31.2, 1817.0], [31.3, 1818.0], [31.4, 1819.0], [31.5, 1819.0], [31.6, 1820.0], [31.7, 1821.0], [31.8, 1822.0], [31.9, 1823.0], [32.0, 1825.0], [32.1, 1827.0], [32.2, 1828.0], [32.3, 1829.0], [32.4, 1830.0], [32.5, 1831.0], [32.6, 1833.0], [32.7, 1834.0], [32.8, 1834.0], [32.9, 1837.0], [33.0, 1838.0], [33.1, 1840.0], [33.2, 1841.0], [33.3, 1842.0], [33.4, 1844.0], [33.5, 1844.0], [33.6, 1845.0], [33.7, 1849.0], [33.8, 1850.0], [33.9, 1850.0], [34.0, 1851.0], [34.1, 1854.0], [34.2, 1855.0], [34.3, 1856.0], [34.4, 1856.0], [34.5, 1856.0], [34.6, 1857.0], [34.7, 1858.0], [34.8, 1859.0], [34.9, 1860.0], [35.0, 1861.0], [35.1, 1861.0], [35.2, 1862.0], [35.3, 1862.0], [35.4, 1863.0], [35.5, 1864.0], [35.6, 1865.0], [35.7, 1866.0], [35.8, 1866.0], [35.9, 1867.0], [36.0, 1867.0], [36.1, 1868.0], [36.2, 1870.0], [36.3, 1870.0], [36.4, 1871.0], [36.5, 1872.0], [36.6, 1873.0], [36.7, 1874.0], [36.8, 1875.0], [36.9, 1875.0], [37.0, 1876.0], [37.1, 1876.0], [37.2, 1877.0], [37.3, 1877.0], [37.4, 1878.0], [37.5, 1879.0], [37.6, 1879.0], [37.7, 1880.0], [37.8, 1880.0], [37.9, 1881.0], [38.0, 1881.0], [38.1, 1882.0], [38.2, 1882.0], [38.3, 1883.0], [38.4, 1883.0], [38.5, 1884.0], [38.6, 1885.0], [38.7, 1886.0], [38.8, 1886.0], [38.9, 1887.0], [39.0, 1888.0], [39.1, 1888.0], [39.2, 1889.0], [39.3, 1890.0], [39.4, 1890.0], [39.5, 1890.0], [39.6, 1890.0], [39.7, 1892.0], [39.8, 1892.0], [39.9, 1893.0], [40.0, 1894.0], [40.1, 1895.0], [40.2, 1897.0], [40.3, 1897.0], [40.4, 1898.0], [40.5, 1898.0], [40.6, 1900.0], [40.7, 1900.0], [40.8, 1901.0], [40.9, 1902.0], [41.0, 1902.0], [41.1, 1902.0], [41.2, 1904.0], [41.3, 1904.0], [41.4, 1906.0], [41.5, 1907.0], [41.6, 1907.0], [41.7, 1908.0], [41.8, 1909.0], [41.9, 1909.0], [42.0, 1911.0], [42.1, 1912.0], [42.2, 1914.0], [42.3, 1915.0], [42.4, 1916.0], [42.5, 1917.0], [42.6, 1918.0], [42.7, 1919.0], [42.8, 1919.0], [42.9, 1921.0], [43.0, 1921.0], [43.1, 1922.0], [43.2, 1923.0], [43.3, 1924.0], [43.4, 1924.0], [43.5, 1924.0], [43.6, 1925.0], [43.7, 1926.0], [43.8, 1928.0], [43.9, 1929.0], [44.0, 1929.0], [44.1, 1930.0], [44.2, 1931.0], [44.3, 1931.0], [44.4, 1932.0], [44.5, 1932.0], [44.6, 1933.0], [44.7, 1933.0], [44.8, 1934.0], [44.9, 1935.0], [45.0, 1937.0], [45.1, 1937.0], [45.2, 1938.0], [45.3, 1939.0], [45.4, 1940.0], [45.5, 1941.0], [45.6, 1942.0], [45.7, 1944.0], [45.8, 1944.0], [45.9, 1945.0], [46.0, 1946.0], [46.1, 1946.0], [46.2, 1947.0], [46.3, 1948.0], [46.4, 1949.0], [46.5, 1950.0], [46.6, 1950.0], [46.7, 1951.0], [46.8, 1952.0], [46.9, 1952.0], [47.0, 1953.0], [47.1, 1953.0], [47.2, 1954.0], [47.3, 1954.0], [47.4, 1954.0], [47.5, 1955.0], [47.6, 1955.0], [47.7, 1955.0], [47.8, 1956.0], [47.9, 1956.0], [48.0, 1957.0], [48.1, 1957.0], [48.2, 1958.0], [48.3, 1958.0], [48.4, 1959.0], [48.5, 1959.0], [48.6, 1960.0], [48.7, 1960.0], [48.8, 1961.0], [48.9, 1961.0], [49.0, 1961.0], [49.1, 1961.0], [49.2, 1962.0], [49.3, 1963.0], [49.4, 1963.0], [49.5, 1964.0], [49.6, 1964.0], [49.7, 1964.0], [49.8, 1965.0], [49.9, 1965.0], [50.0, 1965.0], [50.1, 1966.0], [50.2, 1966.0], [50.3, 1966.0], [50.4, 1967.0], [50.5, 1967.0], [50.6, 1967.0], [50.7, 1968.0], [50.8, 1968.0], [50.9, 1969.0], [51.0, 1969.0], [51.1, 1969.0], [51.2, 1970.0], [51.3, 1970.0], [51.4, 1971.0], [51.5, 1971.0], [51.6, 1971.0], [51.7, 1972.0], [51.8, 1972.0], [51.9, 1972.0], [52.0, 1972.0], [52.1, 1972.0], [52.2, 1973.0], [52.3, 1973.0], [52.4, 1974.0], [52.5, 1974.0], [52.6, 1974.0], [52.7, 1975.0], [52.8, 1975.0], [52.9, 1975.0], [53.0, 1976.0], [53.1, 1977.0], [53.2, 1977.0], [53.3, 1978.0], [53.4, 1978.0], [53.5, 1978.0], [53.6, 1979.0], [53.7, 1979.0], [53.8, 1980.0], [53.9, 1981.0], [54.0, 1981.0], [54.1, 1981.0], [54.2, 1982.0], [54.3, 1982.0], [54.4, 1982.0], [54.5, 1982.0], [54.6, 1983.0], [54.7, 1984.0], [54.8, 1984.0], [54.9, 1984.0], [55.0, 1985.0], [55.1, 1985.0], [55.2, 1985.0], [55.3, 1985.0], [55.4, 1985.0], [55.5, 1986.0], [55.6, 1986.0], [55.7, 1987.0], [55.8, 1987.0], [55.9, 1987.0], [56.0, 1988.0], [56.1, 1988.0], [56.2, 1988.0], [56.3, 1988.0], [56.4, 1989.0], [56.5, 1989.0], [56.6, 1989.0], [56.7, 1989.0], [56.8, 1990.0], [56.9, 1990.0], [57.0, 1991.0], [57.1, 1991.0], [57.2, 1991.0], [57.3, 1992.0], [57.4, 1992.0], [57.5, 1992.0], [57.6, 1993.0], [57.7, 1993.0], [57.8, 1993.0], [57.9, 1994.0], [58.0, 1994.0], [58.1, 1994.0], [58.2, 1994.0], [58.3, 1995.0], [58.4, 1995.0], [58.5, 1996.0], [58.6, 1996.0], [58.7, 1997.0], [58.8, 1997.0], [58.9, 1998.0], [59.0, 1998.0], [59.1, 1998.0], [59.2, 1999.0], [59.3, 1999.0], [59.4, 2000.0], [59.5, 2000.0], [59.6, 2001.0], [59.7, 2001.0], [59.8, 2001.0], [59.9, 2002.0], [60.0, 2003.0], [60.1, 2004.0], [60.2, 2005.0], [60.3, 2005.0], [60.4, 2005.0], [60.5, 2006.0], [60.6, 2007.0], [60.7, 2007.0], [60.8, 2008.0], [60.9, 2009.0], [61.0, 2010.0], [61.1, 2010.0], [61.2, 2011.0], [61.3, 2012.0], [61.4, 2013.0], [61.5, 2014.0], [61.6, 2015.0], [61.7, 2015.0], [61.8, 2016.0], [61.9, 2017.0], [62.0, 2018.0], [62.1, 2019.0], [62.2, 2019.0], [62.3, 2019.0], [62.4, 2021.0], [62.5, 2022.0], [62.6, 2022.0], [62.7, 2022.0], [62.8, 2023.0], [62.9, 2024.0], [63.0, 2025.0], [63.1, 2025.0], [63.2, 2026.0], [63.3, 2027.0], [63.4, 2027.0], [63.5, 2028.0], [63.6, 2028.0], [63.7, 2030.0], [63.8, 2033.0], [63.9, 2034.0], [64.0, 2035.0], [64.1, 2036.0], [64.2, 2037.0], [64.3, 2038.0], [64.4, 2039.0], [64.5, 2041.0], [64.6, 2042.0], [64.7, 2044.0], [64.8, 2045.0], [64.9, 2046.0], [65.0, 2048.0], [65.1, 2050.0], [65.2, 2051.0], [65.3, 2052.0], [65.4, 2059.0], [65.5, 2061.0], [65.6, 2063.0], [65.7, 2065.0], [65.8, 2066.0], [65.9, 2067.0], [66.0, 2068.0], [66.1, 2069.0], [66.2, 2069.0], [66.3, 2071.0], [66.4, 2073.0], [66.5, 2074.0], [66.6, 2075.0], [66.7, 2076.0], [66.8, 2077.0], [66.9, 2078.0], [67.0, 2079.0], [67.1, 2081.0], [67.2, 2082.0], [67.3, 2083.0], [67.4, 2084.0], [67.5, 2085.0], [67.6, 2086.0], [67.7, 2088.0], [67.8, 2088.0], [67.9, 2089.0], [68.0, 2090.0], [68.1, 2092.0], [68.2, 2094.0], [68.3, 2096.0], [68.4, 2097.0], [68.5, 2100.0], [68.6, 2104.0], [68.7, 2106.0], [68.8, 2108.0], [68.9, 2110.0], [69.0, 2111.0], [69.1, 2113.0], [69.2, 2114.0], [69.3, 2114.0], [69.4, 2116.0], [69.5, 2118.0], [69.6, 2118.0], [69.7, 2120.0], [69.8, 2121.0], [69.9, 2122.0], [70.0, 2122.0], [70.1, 2123.0], [70.2, 2125.0], [70.3, 2125.0], [70.4, 2127.0], [70.5, 2128.0], [70.6, 2129.0], [70.7, 2132.0], [70.8, 2134.0], [70.9, 2135.0], [71.0, 2136.0], [71.1, 2139.0], [71.2, 2141.0], [71.3, 2144.0], [71.4, 2148.0], [71.5, 2151.0], [71.6, 2154.0], [71.7, 2155.0], [71.8, 2156.0], [71.9, 2157.0], [72.0, 2159.0], [72.1, 2161.0], [72.2, 2161.0], [72.3, 2162.0], [72.4, 2163.0], [72.5, 2164.0], [72.6, 2165.0], [72.7, 2165.0], [72.8, 2166.0], [72.9, 2167.0], [73.0, 2167.0], [73.1, 2168.0], [73.2, 2168.0], [73.3, 2170.0], [73.4, 2172.0], [73.5, 2172.0], [73.6, 2173.0], [73.7, 2174.0], [73.8, 2175.0], [73.9, 2176.0], [74.0, 2177.0], [74.1, 2177.0], [74.2, 2178.0], [74.3, 2178.0], [74.4, 2179.0], [74.5, 2179.0], [74.6, 2179.0], [74.7, 2180.0], [74.8, 2180.0], [74.9, 2182.0], [75.0, 2182.0], [75.1, 2183.0], [75.2, 2183.0], [75.3, 2184.0], [75.4, 2184.0], [75.5, 2185.0], [75.6, 2185.0], [75.7, 2185.0], [75.8, 2186.0], [75.9, 2186.0], [76.0, 2186.0], [76.1, 2187.0], [76.2, 2188.0], [76.3, 2188.0], [76.4, 2189.0], [76.5, 2189.0], [76.6, 2189.0], [76.7, 2190.0], [76.8, 2190.0], [76.9, 2191.0], [77.0, 2191.0], [77.1, 2192.0], [77.2, 2192.0], [77.3, 2193.0], [77.4, 2194.0], [77.5, 2194.0], [77.6, 2195.0], [77.7, 2195.0], [77.8, 2196.0], [77.9, 2197.0], [78.0, 2197.0], [78.1, 2197.0], [78.2, 2198.0], [78.3, 2198.0], [78.4, 2199.0], [78.5, 2199.0], [78.6, 2200.0], [78.7, 2200.0], [78.8, 2201.0], [78.9, 2201.0], [79.0, 2202.0], [79.1, 2203.0], [79.2, 2203.0], [79.3, 2205.0], [79.4, 2206.0], [79.5, 2206.0], [79.6, 2208.0], [79.7, 2208.0], [79.8, 2209.0], [79.9, 2210.0], [80.0, 2211.0], [80.1, 2212.0], [80.2, 2213.0], [80.3, 2213.0], [80.4, 2214.0], [80.5, 2215.0], [80.6, 2217.0], [80.7, 2217.0], [80.8, 2218.0], [80.9, 2219.0], [81.0, 2220.0], [81.1, 2221.0], [81.2, 2223.0], [81.3, 2223.0], [81.4, 2223.0], [81.5, 2225.0], [81.6, 2225.0], [81.7, 2227.0], [81.8, 2227.0], [81.9, 2229.0], [82.0, 2230.0], [82.1, 2232.0], [82.2, 2235.0], [82.3, 2238.0], [82.4, 2241.0], [82.5, 2243.0], [82.6, 2259.0], [82.7, 2300.0], [82.8, 2373.0], [82.9, 2477.0], [83.0, 2721.0], [83.1, 2827.0], [83.2, 3040.0], [83.3, 3498.0], [83.4, 3829.0], [83.5, 3905.0], [83.6, 3917.0], [83.7, 3923.0], [83.8, 3927.0], [83.9, 3931.0], [84.0, 3933.0], [84.1, 3937.0], [84.2, 3941.0], [84.3, 3942.0], [84.4, 3950.0], [84.5, 3960.0], [84.6, 3970.0], [84.7, 3974.0], [84.8, 3975.0], [84.9, 3983.0], [85.0, 3986.0], [85.1, 3990.0], [85.2, 3992.0], [85.3, 3996.0], [85.4, 4002.0], [85.5, 4009.0], [85.6, 4012.0], [85.7, 4014.0], [85.8, 4015.0], [85.9, 4017.0], [86.0, 4019.0], [86.1, 4022.0], [86.2, 4024.0], [86.3, 4026.0], [86.4, 4028.0], [86.5, 4029.0], [86.6, 4030.0], [86.7, 4033.0], [86.8, 4036.0], [86.9, 4043.0], [87.0, 4051.0], [87.1, 4077.0], [87.2, 4249.0], [87.3, 4454.0], [87.4, 5000.0], [87.5, 5115.0], [87.6, 5152.0], [87.7, 5198.0], [87.8, 5272.0], [87.9, 5378.0], [88.0, 5432.0], [88.1, 5487.0], [88.2, 5511.0], [88.3, 5527.0], [88.4, 5552.0], [88.5, 5586.0], [88.6, 5620.0], [88.7, 5637.0], [88.8, 5665.0], [88.9, 5686.0], [89.0, 5713.0], [89.1, 5729.0], [89.2, 5737.0], [89.3, 5745.0], [89.4, 5750.0], [89.5, 5757.0], [89.6, 5778.0], [89.7, 5798.0], [89.8, 5801.0], [89.9, 5809.0], [90.0, 5813.0], [90.1, 5834.0], [90.2, 5839.0], [90.3, 5855.0], [90.4, 5884.0], [90.5, 5896.0], [90.6, 5915.0], [90.7, 5930.0], [90.8, 5947.0], [90.9, 5967.0], [91.0, 5983.0], [91.1, 6001.0], [91.2, 6014.0], [91.3, 6028.0], [91.4, 6061.0], [91.5, 6075.0], [91.6, 6082.0], [91.7, 6117.0], [91.8, 6144.0], [91.9, 6167.0], [92.0, 6186.0], [92.1, 6203.0], [92.2, 6237.0], [92.3, 6266.0], [92.4, 6280.0], [92.5, 6301.0], [92.6, 6314.0], [92.7, 6327.0], [92.8, 6341.0], [92.9, 6347.0], [93.0, 6358.0], [93.1, 6379.0], [93.2, 6390.0], [93.3, 6395.0], [93.4, 6398.0], [93.5, 6410.0], [93.6, 6426.0], [93.7, 6439.0], [93.8, 6447.0], [93.9, 6453.0], [94.0, 6465.0], [94.1, 6475.0], [94.2, 6480.0], [94.3, 6493.0], [94.4, 6503.0], [94.5, 6519.0], [94.6, 6525.0], [94.7, 6547.0], [94.8, 6559.0], [94.9, 6577.0], [95.0, 6590.0], [95.1, 6610.0], [95.2, 6618.0], [95.3, 6631.0], [95.4, 6654.0], [95.5, 6675.0], [95.6, 6685.0], [95.7, 6700.0], [95.8, 6705.0], [95.9, 6724.0], [96.0, 6758.0], [96.1, 6784.0], [96.2, 6791.0], [96.3, 6807.0], [96.4, 6812.0], [96.5, 6823.0], [96.6, 6832.0], [96.7, 6856.0], [96.8, 6884.0], [96.9, 6909.0], [97.0, 6928.0], [97.1, 6942.0], [97.2, 6967.0], [97.3, 6988.0], [97.4, 7002.0], [97.5, 7039.0], [97.6, 7062.0], [97.7, 7079.0], [97.8, 7100.0], [97.9, 7115.0], [98.0, 7141.0], [98.1, 7200.0], [98.2, 7291.0], [98.3, 7303.0], [98.4, 7336.0], [98.5, 7408.0], [98.6, 7948.0], [98.7, 8393.0], [98.8, 8773.0], [98.9, 9246.0], [99.0, 10412.0], [99.1, 10559.0], [99.2, 10634.0], [99.3, 10673.0], [99.4, 11005.0], [99.5, 11973.0], [99.6, 12496.0], [99.7, 12870.0], [99.8, 15727.0], [99.9, 16461.0], [100.0, 18076.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 751.0, "series": [{"data": [[0.0, 1.0], [100.0, 21.0], [200.0, 3.0], [300.0, 5.0], [400.0, 28.0], [500.0, 15.0], [600.0, 11.0], [700.0, 16.0], [800.0, 12.0], [900.0, 70.0], [1000.0, 71.0], [1100.0, 19.0], [1200.0, 20.0], [1300.0, 13.0], [1400.0, 71.0], [1500.0, 94.0], [1600.0, 214.0], [1700.0, 489.0], [1800.0, 450.0], [1900.0, 751.0], [2000.0, 364.0], [2100.0, 404.0], [2200.0, 165.0], [2300.0, 5.0], [2400.0, 4.0], [2500.0, 1.0], [2800.0, 4.0], [2700.0, 4.0], [2900.0, 2.0], [3000.0, 1.0], [3100.0, 2.0], [3400.0, 2.0], [3500.0, 1.0], [3700.0, 1.0], [3600.0, 1.0], [3800.0, 4.0], [3900.0, 74.0], [4000.0, 72.0], [4100.0, 2.0], [4200.0, 1.0], [4300.0, 2.0], [4400.0, 2.0], [4600.0, 1.0], [4500.0, 1.0], [4700.0, 1.0], [5100.0, 9.0], [5000.0, 4.0], [5200.0, 4.0], [5300.0, 5.0], [5400.0, 8.0], [5600.0, 15.0], [5500.0, 17.0], [5700.0, 32.0], [5800.0, 31.0], [5900.0, 22.0], [6000.0, 23.0], [6100.0, 18.0], [6200.0, 16.0], [6300.0, 38.0], [6400.0, 36.0], [6500.0, 28.0], [6600.0, 26.0], [6700.0, 21.0], [6800.0, 27.0], [6900.0, 20.0], [7000.0, 16.0], [7100.0, 12.0], [7200.0, 7.0], [7300.0, 9.0], [7400.0, 4.0], [7900.0, 1.0], [8100.0, 1.0], [8000.0, 1.0], [8700.0, 2.0], [8200.0, 1.0], [8300.0, 1.0], [8400.0, 2.0], [9100.0, 1.0], [9200.0, 2.0], [8900.0, 2.0], [9400.0, 1.0], [10100.0, 1.0], [10500.0, 7.0], [10400.0, 1.0], [10600.0, 7.0], [11200.0, 1.0], [10800.0, 1.0], [11000.0, 1.0], [11400.0, 1.0], [11800.0, 1.0], [11900.0, 1.0], [12100.0, 1.0], [12400.0, 3.0], [12500.0, 2.0], [12700.0, 1.0], [12800.0, 2.0], [12900.0, 1.0], [14400.0, 1.0], [15700.0, 1.0], [16000.0, 1.0], [15900.0, 1.0], [16400.0, 2.0], [16500.0, 1.0], [17800.0, 1.0], [18000.0, 1.0], [17900.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 18000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 58.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3623.0, "series": [{"data": [[0.0, 58.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 319.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3623.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 442.7985685071579, "minX": 1.69667052E12, "maxY": 500.0, "series": [{"data": [[1.69667052E12, 500.0], [1.69667058E12, 442.7985685071579]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69667058E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 101.0, "minX": 1.0, "maxY": 4144.666666666667, "series": [{"data": [[2.0, 774.6666666666667], [3.0, 726.0], [4.0, 1285.3333333333335], [5.0, 2472.0], [6.0, 1280.0], [7.0, 104.0], [8.0, 103.0], [9.0, 101.33333333333333], [10.0, 101.5], [11.0, 108.0], [12.0, 293.6], [13.0, 1512.3333333333335], [14.0, 105.0], [15.0, 169.5], [16.0, 581.75], [17.0, 311.0], [18.0, 330.0], [19.0, 343.0], [20.0, 402.0], [21.0, 404.0], [22.0, 402.0], [23.0, 405.0], [24.0, 416.0], [25.0, 427.6666666666667], [26.0, 511.3], [27.0, 600.6], [28.0, 458.0], [29.0, 495.0], [30.0, 515.5], [31.0, 496.0], [33.0, 519.0], [32.0, 516.0], [35.0, 537.0], [34.0, 511.0], [37.0, 545.0], [36.0, 549.0], [39.0, 576.0], [38.0, 559.0], [41.0, 575.0], [40.0, 572.0], [43.0, 582.0], [42.0, 578.0], [45.0, 601.0], [44.0, 592.0], [47.0, 605.0], [46.0, 600.5], [49.0, 692.5], [48.0, 646.3333333333334], [51.0, 698.0], [50.0, 693.0], [53.0, 694.0], [52.0, 1192.0], [55.0, 717.5], [54.0, 725.0], [57.0, 825.0], [56.0, 779.0769230769231], [59.0, 872.0], [58.0, 857.3333333333334], [61.0, 877.0], [60.0, 881.0], [63.0, 892.0], [62.0, 1114.5], [67.0, 917.0], [66.0, 906.75], [65.0, 905.5], [64.0, 904.5], [71.0, 916.5], [70.0, 915.0], [69.0, 909.0], [68.0, 903.0], [75.0, 913.0], [74.0, 908.0], [73.0, 938.0], [72.0, 914.3333333333334], [79.0, 927.5], [78.0, 916.0], [77.0, 914.6666666666666], [76.0, 905.0], [83.0, 938.5], [82.0, 928.0], [81.0, 932.5], [80.0, 936.0], [87.0, 943.0], [86.0, 945.0], [85.0, 940.0], [84.0, 952.0], [91.0, 961.5], [89.0, 957.0], [88.0, 951.5], [95.0, 953.0], [94.0, 959.5], [93.0, 965.0], [92.0, 954.0], [99.0, 994.0], [98.0, 968.0], [97.0, 950.0], [96.0, 951.5], [103.0, 999.0], [102.0, 979.0], [101.0, 981.0], [100.0, 990.0], [107.0, 990.0], [106.0, 985.0], [105.0, 1000.0], [104.0, 990.0], [111.0, 998.0], [110.0, 989.0], [109.0, 990.0], [108.0, 994.0], [114.0, 1002.0], [113.0, 994.0], [112.0, 1003.0], [119.0, 1008.0], [118.0, 1028.0], [117.0, 1015.5], [123.0, 1002.0], [122.0, 1013.0], [121.0, 1010.0], [120.0, 1021.0], [127.0, 1015.0], [126.0, 1006.0], [125.0, 1009.0], [124.0, 1015.0], [135.0, 1024.6666666666667], [133.0, 1014.0], [132.0, 1021.0], [131.0, 1010.0], [130.0, 1014.0], [129.0, 1012.0], [142.0, 1021.0], [141.0, 1032.0], [140.0, 1013.0], [139.0, 1023.0], [138.0, 1012.0], [137.0, 1026.0], [136.0, 1024.0], [151.0, 1032.0], [150.0, 1874.0], [149.0, 1866.5], [148.0, 1024.5], [147.0, 1019.0], [146.0, 1024.0], [145.0, 1025.0], [144.0, 1028.5], [159.0, 1038.0], [158.0, 1037.0], [157.0, 1027.0], [156.0, 1027.0], [155.0, 1023.0], [154.0, 2161.6666666666665], [153.0, 1020.0], [167.0, 1054.0], [166.0, 1051.5], [165.0, 1046.0], [164.0, 1045.5], [163.0, 1041.5], [162.0, 1053.5], [160.0, 1049.0], [175.0, 1080.5], [174.0, 1073.0], [173.0, 1084.0], [172.0, 1091.0], [171.0, 1081.0], [170.0, 1062.0], [169.0, 1058.0], [168.0, 1066.0], [183.0, 1140.0], [182.0, 1124.5], [181.0, 1120.0], [179.0, 1106.0], [178.0, 1116.0], [177.0, 1105.0], [176.0, 1101.0], [191.0, 1218.0], [190.0, 1217.5], [189.0, 1211.5], [188.0, 1197.0], [187.0, 1197.0], [186.0, 1173.0], [185.0, 1156.3333333333333], [184.0, 1141.0], [199.0, 1353.0], [198.0, 1319.0], [197.0, 1296.0], [196.0, 1290.0], [195.0, 1270.0], [194.0, 1686.75], [193.0, 1680.0], [192.0, 1245.25], [207.0, 1563.3333333333333], [206.0, 1520.0], [205.0, 1969.5], [204.0, 1469.0], [203.0, 1429.0], [202.0, 1585.0], [201.0, 1392.0], [200.0, 1518.3333333333333], [215.0, 1600.0], [214.0, 1603.0], [213.0, 1592.0], [212.0, 1600.0], [211.0, 1594.5], [210.0, 1593.3333333333333], [209.0, 1571.5], [208.0, 1577.0], [223.0, 1627.8333333333333], [221.0, 1634.3333333333335], [219.0, 1607.5], [218.0, 1615.047619047619], [217.0, 1606.6666666666667], [216.0, 1728.7142857142856], [231.0, 1712.3333333333335], [229.0, 1630.3333333333333], [228.0, 1620.0], [227.0, 1637.25], [239.0, 1726.0], [238.0, 1715.1111111111109], [237.0, 1680.0000000000002], [236.0, 1672.5], [235.0, 1663.8333333333333], [234.0, 1653.1818181818185], [233.0, 1699.8571428571427], [232.0, 1634.4], [247.0, 1742.0], [246.0, 1730.5], [245.0, 1722.0], [244.0, 1733.5], [243.0, 1722.8333333333333], [242.0, 1739.0], [241.0, 1716.3333333333333], [240.0, 1738.0], [255.0, 1721.0], [254.0, 1731.0], [253.0, 1743.0], [252.0, 1732.0], [251.0, 1725.0], [250.0, 1734.75], [249.0, 1728.0], [248.0, 1724.0], [270.0, 1750.0], [271.0, 1741.0], [269.0, 1744.0], [268.0, 1744.6666666666667], [267.0, 1745.0], [266.0, 1741.5], [265.0, 1750.0], [264.0, 1740.0], [263.0, 1750.0], [257.0, 1734.8], [256.0, 1729.0], [259.0, 1735.0], [258.0, 1735.0], [262.0, 1738.0], [261.0, 1748.0], [260.0, 1741.0], [286.0, 1723.0], [287.0, 1727.6666666666667], [285.0, 1742.0], [284.0, 1741.0], [283.0, 1733.0], [282.0, 1742.0], [281.0, 1736.0], [280.0, 2687.5], [279.0, 1757.0], [273.0, 1741.0], [272.0, 1758.0], [275.0, 1737.0], [274.0, 1750.0], [278.0, 1756.5], [277.0, 1758.0], [276.0, 1739.0], [302.0, 1715.0], [303.0, 1709.5], [301.0, 1718.0], [300.0, 1717.5], [299.0, 1726.5], [297.0, 1717.0], [296.0, 1718.0], [295.0, 1736.0], [289.0, 1735.0], [288.0, 1742.0], [291.0, 1714.0], [290.0, 1726.0], [294.0, 1717.6666666666667], [293.0, 1723.0], [292.0, 1736.0], [318.0, 1689.5], [319.0, 1692.0], [317.0, 1711.0], [316.0, 1703.0], [315.0, 1705.0], [314.0, 1702.0], [313.0, 1701.0], [312.0, 1698.5], [311.0, 1702.0], [304.0, 1713.0], [306.0, 1705.5], [305.0, 1698.3333333333333], [310.0, 1697.0], [309.0, 1710.0], [308.0, 1706.0], [334.0, 1726.0], [335.0, 1714.0], [333.0, 1708.5], [323.0, 1700.0], [322.0, 1706.0], [321.0, 1709.0], [320.0, 1699.0], [331.0, 1704.0], [330.0, 1718.0], [329.0, 1704.0], [328.0, 1707.0], [327.0, 1706.0], [326.0, 1708.0], [325.0, 1708.0], [324.0, 1693.0], [350.0, 2925.0], [351.0, 1707.0], [349.0, 1710.5], [348.0, 1703.0], [347.0, 1706.0], [346.0, 1705.0], [345.0, 1705.0], [344.0, 1697.0], [343.0, 1706.0], [337.0, 1708.0], [336.0, 1713.0], [339.0, 1707.0], [338.0, 1707.5], [342.0, 1711.0], [341.0, 1709.0], [340.0, 1698.0], [366.0, 1715.0], [367.0, 1706.0], [365.0, 2731.5], [364.0, 1708.0], [362.0, 1702.0], [361.0, 1711.0], [360.0, 1712.0], [359.0, 1705.0], [353.0, 1708.0], [352.0, 1706.0], [355.0, 1706.0], [354.0, 1707.0], [358.0, 1701.0], [357.0, 1709.0], [356.0, 1704.0], [382.0, 1702.0], [383.0, 1694.0], [381.0, 1694.0], [380.0, 1693.0], [379.0, 1703.0], [378.0, 1714.0], [377.0, 1704.0], [376.0, 2581.0], [375.0, 1709.0], [369.0, 1714.5], [371.0, 1706.0], [370.0, 1705.0], [374.0, 1709.0], [373.0, 1717.0], [372.0, 1711.0], [398.0, 1709.0], [399.0, 1704.0], [396.0, 1703.0], [387.0, 1705.0], [386.0, 1701.0], [385.0, 1706.0], [384.0, 1701.0], [395.0, 1701.0], [394.0, 1704.0], [393.0, 1703.0], [392.0, 1714.0], [391.0, 1711.0], [390.0, 1704.0], [389.0, 1704.0], [388.0, 1708.0], [414.0, 1718.0], [415.0, 1718.0], [413.0, 1715.0], [412.0, 1725.0], [411.0, 1718.0], [410.0, 1723.0], [408.0, 1717.0], [406.0, 1709.0], [402.0, 1715.0], [401.0, 1709.0], [404.0, 1730.0], [429.0, 1733.0], [431.0, 1733.0], [428.0, 1733.0], [419.0, 1733.0], [418.0, 1725.0], [417.0, 1726.0], [416.0, 1721.0], [426.0, 1734.0], [425.0, 1736.0], [424.0, 1731.0], [423.0, 1730.0], [422.0, 2501.6666666666665], [421.0, 1732.0], [420.0, 1726.5], [446.0, 1733.0], [447.0, 1745.0], [445.0, 1730.0], [444.0, 1730.0], [443.0, 1731.0], [442.0, 1730.0], [441.0, 1739.0], [440.0, 2507.3333333333335], [438.0, 1751.0], [435.0, 1730.0], [434.0, 1731.0], [433.0, 1744.0], [432.0, 1731.0], [436.0, 1767.0], [462.0, 1732.0], [463.0, 1747.0], [461.0, 1738.0], [451.0, 1740.0], [450.0, 1737.0], [449.0, 1733.0], [448.0, 1733.0], [459.0, 1734.0], [458.0, 1732.0], [457.0, 1733.0], [456.0, 1744.0], [455.0, 1731.0], [454.0, 1733.0], [453.0, 1732.0], [452.0, 2882.5], [478.0, 1772.5], [479.0, 1771.4], [477.0, 2081.4285714285716], [476.0, 1757.0], [475.0, 1746.0], [474.0, 1753.0], [473.0, 1756.0], [472.0, 2842.5], [471.0, 4144.666666666667], [464.0, 1740.5], [467.0, 1737.0], [466.0, 1747.0], [469.0, 3181.3333333333335], [468.0, 1737.0], [494.0, 1812.0], [495.0, 1816.5], [493.0, 1816.0], [492.0, 1806.0], [491.0, 1807.090909090909], [490.0, 1800.8571428571431], [489.0, 1794.6666666666667], [488.0, 1795.5555555555557], [487.0, 1789.0], [481.0, 1773.0], [480.0, 1778.0], [483.0, 1786.0], [482.0, 1938.4705882352941], [486.0, 2218.5714285714284], [485.0, 2477.75], [484.0, 1785.5], [500.0, 2867.771679116595], [499.0, 2235.0], [498.0, 1812.0], [497.0, 1822.6666666666667], [496.0, 1808.0], [1.0, 101.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[444.057, 2551.6032500000024]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 199.46666666666667, "minX": 1.69667052E12, "maxY": 215704.85, "series": [{"data": [[1.69667052E12, 5470.666666666667], [1.69667058E12, 215704.85]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69667052E12, 199.46666666666667], [1.69667058E12, 10225.533333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69667058E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2481.7929447852807, "minX": 1.69667052E12, "maxY": 5654.988636363636, "series": [{"data": [[1.69667052E12, 5654.988636363636], [1.69667058E12, 2481.7929447852807]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69667058E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2480.0756646216746, "minX": 1.69667052E12, "maxY": 5654.749999999998, "series": [{"data": [[1.69667052E12, 5654.749999999998], [1.69667058E12, 2480.0756646216746]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69667058E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 519.1352249488737, "minX": 1.69667052E12, "maxY": 4060.9886363636374, "series": [{"data": [[1.69667052E12, 4060.9886363636374], [1.69667058E12, 519.1352249488737]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69667058E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 99.0, "minX": 1.69667052E12, "maxY": 18076.0, "series": [{"data": [[1.69667052E12, 6266.0], [1.69667058E12, 18076.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69667052E12, 5000.0], [1.69667058E12, 99.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69667052E12, 6087.900000000001], [1.69667058E12, 5742.200000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69667052E12, 6266.0], [1.69667058E12, 10536.839999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69667052E12, 5658.0], [1.69667058E12, 1961.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.69667052E12, 6209.3], [1.69667058E12, 6611.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69667058E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 104.5, "minX": 2.0, "maxY": 6410.0, "series": [{"data": [[2.0, 692.0], [142.0, 1999.0], [199.0, 1973.0], [12.0, 104.5], [203.0, 2155.0], [215.0, 1582.0], [218.0, 1013.0], [230.0, 2033.0], [224.0, 2193.0], [239.0, 1891.0], [243.0, 1998.0], [242.0, 1967.5], [246.0, 1659.5], [252.0, 2165.0], [260.0, 1785.0], [281.0, 1841.0], [298.0, 1726.5], [323.0, 6410.0], [83.0, 441.0], [88.0, 5658.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 323.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 104.5, "minX": 2.0, "maxY": 6410.0, "series": [{"data": [[2.0, 194.0], [142.0, 1999.0], [199.0, 1973.0], [12.0, 104.5], [203.0, 2155.0], [215.0, 1582.0], [218.0, 1010.5], [230.0, 2033.0], [224.0, 2193.0], [239.0, 1891.0], [243.0, 1998.0], [242.0, 1967.5], [246.0, 1659.5], [252.0, 2165.0], [260.0, 1785.0], [281.0, 1841.0], [298.0, 1725.0], [323.0, 6410.0], [83.0, 441.0], [88.0, 5658.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 323.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 9.8, "minX": 1.69667052E12, "maxY": 56.86666666666667, "series": [{"data": [[1.69667052E12, 9.8], [1.69667058E12, 56.86666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69667058E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.4666666666666666, "minX": 1.69667052E12, "maxY": 65.2, "series": [{"data": [[1.69667052E12, 1.4666666666666666], [1.69667058E12, 65.2]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69667058E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.4666666666666666, "minX": 1.69667052E12, "maxY": 65.2, "series": [{"data": [[1.69667052E12, 1.4666666666666666], [1.69667058E12, 65.2]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69667058E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.4666666666666666, "minX": 1.69667052E12, "maxY": 65.2, "series": [{"data": [[1.69667052E12, 1.4666666666666666], [1.69667058E12, 65.2]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69667058E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

