/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 109.0, "minX": 0.0, "maxY": 14497.0, "series": [{"data": [[0.0, 109.0], [0.1, 122.0], [0.2, 149.0], [0.3, 159.0], [0.4, 171.0], [0.5, 182.0], [0.6, 190.0], [0.7, 210.0], [0.8, 233.0], [0.9, 342.0], [1.0, 384.0], [1.1, 450.0], [1.2, 570.0], [1.3, 628.0], [1.4, 710.0], [1.5, 826.0], [1.6, 885.0], [1.7, 906.0], [1.8, 932.0], [1.9, 964.0], [2.0, 991.0], [2.1, 1016.0], [2.2, 1028.0], [2.3, 1116.0], [2.4, 1177.0], [2.5, 1191.0], [2.6, 1212.0], [2.7, 1299.0], [2.8, 1335.0], [2.9, 1339.0], [3.0, 1350.0], [3.1, 1357.0], [3.2, 1364.0], [3.3, 1373.0], [3.4, 1377.0], [3.5, 1382.0], [3.6, 1391.0], [3.7, 1393.0], [3.8, 1399.0], [3.9, 1401.0], [4.0, 1402.0], [4.1, 1405.0], [4.2, 1409.0], [4.3, 1411.0], [4.4, 1415.0], [4.5, 1418.0], [4.6, 1421.0], [4.7, 1432.0], [4.8, 1437.0], [4.9, 1440.0], [5.0, 1442.0], [5.1, 1445.0], [5.2, 1452.0], [5.3, 1454.0], [5.4, 1458.0], [5.5, 1458.0], [5.6, 1460.0], [5.7, 1462.0], [5.8, 1463.0], [5.9, 1464.0], [6.0, 1466.0], [6.1, 1467.0], [6.2, 1468.0], [6.3, 1468.0], [6.4, 1469.0], [6.5, 1471.0], [6.6, 1472.0], [6.7, 1473.0], [6.8, 1474.0], [6.9, 1476.0], [7.0, 1477.0], [7.1, 1478.0], [7.2, 1479.0], [7.3, 1479.0], [7.4, 1480.0], [7.5, 1481.0], [7.6, 1483.0], [7.7, 1483.0], [7.8, 1484.0], [7.9, 1487.0], [8.0, 1489.0], [8.1, 1490.0], [8.2, 1492.0], [8.3, 1494.0], [8.4, 1500.0], [8.5, 1503.0], [8.6, 1510.0], [8.7, 1512.0], [8.8, 1515.0], [8.9, 1519.0], [9.0, 1523.0], [9.1, 1527.0], [9.2, 1529.0], [9.3, 1531.0], [9.4, 1537.0], [9.5, 1545.0], [9.6, 1550.0], [9.7, 1556.0], [9.8, 1558.0], [9.9, 1560.0], [10.0, 1563.0], [10.1, 1567.0], [10.2, 1576.0], [10.3, 1579.0], [10.4, 1582.0], [10.5, 1584.0], [10.6, 1586.0], [10.7, 1588.0], [10.8, 1592.0], [10.9, 1594.0], [11.0, 1597.0], [11.1, 1599.0], [11.2, 1600.0], [11.3, 1602.0], [11.4, 1604.0], [11.5, 1605.0], [11.6, 1606.0], [11.7, 1607.0], [11.8, 1610.0], [11.9, 1611.0], [12.0, 1612.0], [12.1, 1613.0], [12.2, 1614.0], [12.3, 1616.0], [12.4, 1617.0], [12.5, 1618.0], [12.6, 1618.0], [12.7, 1619.0], [12.8, 1619.0], [12.9, 1620.0], [13.0, 1620.0], [13.1, 1621.0], [13.2, 1622.0], [13.3, 1623.0], [13.4, 1624.0], [13.5, 1625.0], [13.6, 1626.0], [13.7, 1628.0], [13.8, 1628.0], [13.9, 1630.0], [14.0, 1632.0], [14.1, 1632.0], [14.2, 1634.0], [14.3, 1635.0], [14.4, 1636.0], [14.5, 1637.0], [14.6, 1639.0], [14.7, 1642.0], [14.8, 1643.0], [14.9, 1644.0], [15.0, 1644.0], [15.1, 1645.0], [15.2, 1646.0], [15.3, 1647.0], [15.4, 1648.0], [15.5, 1649.0], [15.6, 1649.0], [15.7, 1651.0], [15.8, 1653.0], [15.9, 1654.0], [16.0, 1654.0], [16.1, 1656.0], [16.2, 1657.0], [16.3, 1658.0], [16.4, 1658.0], [16.5, 1659.0], [16.6, 1659.0], [16.7, 1659.0], [16.8, 1660.0], [16.9, 1661.0], [17.0, 1662.0], [17.1, 1662.0], [17.2, 1663.0], [17.3, 1663.0], [17.4, 1664.0], [17.5, 1665.0], [17.6, 1665.0], [17.7, 1666.0], [17.8, 1667.0], [17.9, 1668.0], [18.0, 1668.0], [18.1, 1669.0], [18.2, 1670.0], [18.3, 1671.0], [18.4, 1671.0], [18.5, 1671.0], [18.6, 1672.0], [18.7, 1672.0], [18.8, 1673.0], [18.9, 1674.0], [19.0, 1675.0], [19.1, 1675.0], [19.2, 1676.0], [19.3, 1677.0], [19.4, 1678.0], [19.5, 1679.0], [19.6, 1679.0], [19.7, 1679.0], [19.8, 1680.0], [19.9, 1682.0], [20.0, 1682.0], [20.1, 1683.0], [20.2, 1686.0], [20.3, 1686.0], [20.4, 1687.0], [20.5, 1688.0], [20.6, 1688.0], [20.7, 1690.0], [20.8, 1692.0], [20.9, 1693.0], [21.0, 1694.0], [21.1, 1696.0], [21.2, 1697.0], [21.3, 1700.0], [21.4, 1702.0], [21.5, 1704.0], [21.6, 1709.0], [21.7, 1712.0], [21.8, 1716.0], [21.9, 1718.0], [22.0, 1719.0], [22.1, 1722.0], [22.2, 1726.0], [22.3, 1731.0], [22.4, 1749.0], [22.5, 1780.0], [22.6, 1812.0], [22.7, 1816.0], [22.8, 1820.0], [22.9, 1828.0], [23.0, 1834.0], [23.1, 1842.0], [23.2, 1848.0], [23.3, 1851.0], [23.4, 1857.0], [23.5, 1859.0], [23.6, 1862.0], [23.7, 1869.0], [23.8, 1872.0], [23.9, 1874.0], [24.0, 1878.0], [24.1, 1886.0], [24.2, 1895.0], [24.3, 1902.0], [24.4, 1962.0], [24.5, 1979.0], [24.6, 1996.0], [24.7, 2004.0], [24.8, 2006.0], [24.9, 2011.0], [25.0, 2015.0], [25.1, 2017.0], [25.2, 2023.0], [25.3, 2027.0], [25.4, 2029.0], [25.5, 2033.0], [25.6, 2042.0], [25.7, 2050.0], [25.8, 2059.0], [25.9, 2066.0], [26.0, 2072.0], [26.1, 2080.0], [26.2, 2087.0], [26.3, 2091.0], [26.4, 2093.0], [26.5, 2097.0], [26.6, 2102.0], [26.7, 2106.0], [26.8, 2108.0], [26.9, 2114.0], [27.0, 2117.0], [27.1, 2125.0], [27.2, 2137.0], [27.3, 2141.0], [27.4, 2149.0], [27.5, 2154.0], [27.6, 2157.0], [27.7, 2166.0], [27.8, 2175.0], [27.9, 2178.0], [28.0, 2180.0], [28.1, 2185.0], [28.2, 2192.0], [28.3, 2200.0], [28.4, 2205.0], [28.5, 2207.0], [28.6, 2212.0], [28.7, 2214.0], [28.8, 2217.0], [28.9, 2220.0], [29.0, 2224.0], [29.1, 2226.0], [29.2, 2227.0], [29.3, 2228.0], [29.4, 2229.0], [29.5, 2231.0], [29.6, 2231.0], [29.7, 2232.0], [29.8, 2234.0], [29.9, 2236.0], [30.0, 2239.0], [30.1, 2242.0], [30.2, 2243.0], [30.3, 2244.0], [30.4, 2246.0], [30.5, 2248.0], [30.6, 2249.0], [30.7, 2250.0], [30.8, 2251.0], [30.9, 2251.0], [31.0, 2252.0], [31.1, 2254.0], [31.2, 2255.0], [31.3, 2256.0], [31.4, 2256.0], [31.5, 2257.0], [31.6, 2259.0], [31.7, 2260.0], [31.8, 2261.0], [31.9, 2262.0], [32.0, 2263.0], [32.1, 2264.0], [32.2, 2265.0], [32.3, 2266.0], [32.4, 2267.0], [32.5, 2267.0], [32.6, 2268.0], [32.7, 2270.0], [32.8, 2270.0], [32.9, 2272.0], [33.0, 2273.0], [33.1, 2273.0], [33.2, 2275.0], [33.3, 2276.0], [33.4, 2277.0], [33.5, 2278.0], [33.6, 2278.0], [33.7, 2280.0], [33.8, 2281.0], [33.9, 2282.0], [34.0, 2283.0], [34.1, 2284.0], [34.2, 2287.0], [34.3, 2287.0], [34.4, 2288.0], [34.5, 2290.0], [34.6, 2291.0], [34.7, 2293.0], [34.8, 2294.0], [34.9, 2295.0], [35.0, 2297.0], [35.1, 2299.0], [35.2, 2300.0], [35.3, 2304.0], [35.4, 2305.0], [35.5, 2308.0], [35.6, 2310.0], [35.7, 2311.0], [35.8, 2313.0], [35.9, 2317.0], [36.0, 2318.0], [36.1, 2320.0], [36.2, 2321.0], [36.3, 2325.0], [36.4, 2327.0], [36.5, 2331.0], [36.6, 2332.0], [36.7, 2338.0], [36.8, 2340.0], [36.9, 2341.0], [37.0, 2343.0], [37.1, 2346.0], [37.2, 2349.0], [37.3, 2353.0], [37.4, 2359.0], [37.5, 2361.0], [37.6, 2363.0], [37.7, 2368.0], [37.8, 2370.0], [37.9, 2372.0], [38.0, 2376.0], [38.1, 2378.0], [38.2, 2381.0], [38.3, 2383.0], [38.4, 2385.0], [38.5, 2388.0], [38.6, 2389.0], [38.7, 2392.0], [38.8, 2395.0], [38.9, 2398.0], [39.0, 2401.0], [39.1, 2403.0], [39.2, 2407.0], [39.3, 2409.0], [39.4, 2410.0], [39.5, 2411.0], [39.6, 2413.0], [39.7, 2416.0], [39.8, 2419.0], [39.9, 2422.0], [40.0, 2423.0], [40.1, 2425.0], [40.2, 2427.0], [40.3, 2429.0], [40.4, 2430.0], [40.5, 2433.0], [40.6, 2433.0], [40.7, 2435.0], [40.8, 2436.0], [40.9, 2438.0], [41.0, 2439.0], [41.1, 2440.0], [41.2, 2441.0], [41.3, 2442.0], [41.4, 2443.0], [41.5, 2444.0], [41.6, 2446.0], [41.7, 2448.0], [41.8, 2448.0], [41.9, 2449.0], [42.0, 2452.0], [42.1, 2453.0], [42.2, 2454.0], [42.3, 2457.0], [42.4, 2460.0], [42.5, 2463.0], [42.6, 2464.0], [42.7, 2466.0], [42.8, 2468.0], [42.9, 2471.0], [43.0, 2474.0], [43.1, 2477.0], [43.2, 2484.0], [43.3, 2490.0], [43.4, 2493.0], [43.5, 2497.0], [43.6, 2499.0], [43.7, 2501.0], [43.8, 2503.0], [43.9, 2506.0], [44.0, 2507.0], [44.1, 2509.0], [44.2, 2513.0], [44.3, 2514.0], [44.4, 2517.0], [44.5, 2519.0], [44.6, 2521.0], [44.7, 2525.0], [44.8, 2526.0], [44.9, 2527.0], [45.0, 2527.0], [45.1, 2528.0], [45.2, 2529.0], [45.3, 2531.0], [45.4, 2533.0], [45.5, 2536.0], [45.6, 2537.0], [45.7, 2539.0], [45.8, 2540.0], [45.9, 2541.0], [46.0, 2543.0], [46.1, 2546.0], [46.2, 2551.0], [46.3, 2556.0], [46.4, 2566.0], [46.5, 2570.0], [46.6, 2571.0], [46.7, 2572.0], [46.8, 2576.0], [46.9, 2578.0], [47.0, 2581.0], [47.1, 2583.0], [47.2, 2585.0], [47.3, 2586.0], [47.4, 2590.0], [47.5, 2592.0], [47.6, 2595.0], [47.7, 2598.0], [47.8, 2600.0], [47.9, 2602.0], [48.0, 2603.0], [48.1, 2605.0], [48.2, 2608.0], [48.3, 2609.0], [48.4, 2611.0], [48.5, 2611.0], [48.6, 2615.0], [48.7, 2618.0], [48.8, 2622.0], [48.9, 2623.0], [49.0, 2624.0], [49.1, 2627.0], [49.2, 2629.0], [49.3, 2632.0], [49.4, 2633.0], [49.5, 2633.0], [49.6, 2635.0], [49.7, 2636.0], [49.8, 2637.0], [49.9, 2639.0], [50.0, 2640.0], [50.1, 2643.0], [50.2, 2645.0], [50.3, 2646.0], [50.4, 2648.0], [50.5, 2649.0], [50.6, 2649.0], [50.7, 2651.0], [50.8, 2653.0], [50.9, 2655.0], [51.0, 2655.0], [51.1, 2657.0], [51.2, 2660.0], [51.3, 2661.0], [51.4, 2662.0], [51.5, 2664.0], [51.6, 2667.0], [51.7, 2672.0], [51.8, 2673.0], [51.9, 2678.0], [52.0, 2683.0], [52.1, 2686.0], [52.2, 2689.0], [52.3, 2692.0], [52.4, 2695.0], [52.5, 2696.0], [52.6, 2697.0], [52.7, 2699.0], [52.8, 2701.0], [52.9, 2705.0], [53.0, 2706.0], [53.1, 2706.0], [53.2, 2709.0], [53.3, 2711.0], [53.4, 2714.0], [53.5, 2714.0], [53.6, 2716.0], [53.7, 2717.0], [53.8, 2718.0], [53.9, 2721.0], [54.0, 2723.0], [54.1, 2727.0], [54.2, 2729.0], [54.3, 2736.0], [54.4, 2740.0], [54.5, 2741.0], [54.6, 2747.0], [54.7, 2751.0], [54.8, 2757.0], [54.9, 2764.0], [55.0, 2767.0], [55.1, 2771.0], [55.2, 2782.0], [55.3, 2788.0], [55.4, 2795.0], [55.5, 2800.0], [55.6, 2812.0], [55.7, 2815.0], [55.8, 2819.0], [55.9, 2829.0], [56.0, 2837.0], [56.1, 2839.0], [56.2, 2851.0], [56.3, 2857.0], [56.4, 2865.0], [56.5, 2869.0], [56.6, 2877.0], [56.7, 2881.0], [56.8, 2885.0], [56.9, 2890.0], [57.0, 2892.0], [57.1, 2900.0], [57.2, 2905.0], [57.3, 2911.0], [57.4, 2924.0], [57.5, 2935.0], [57.6, 2946.0], [57.7, 2961.0], [57.8, 2983.0], [57.9, 2993.0], [58.0, 3002.0], [58.1, 3023.0], [58.2, 3058.0], [58.3, 3109.0], [58.4, 3190.0], [58.5, 3209.0], [58.6, 3327.0], [58.7, 3365.0], [58.8, 3375.0], [58.9, 3425.0], [59.0, 3442.0], [59.1, 3465.0], [59.2, 3476.0], [59.3, 3525.0], [59.4, 3726.0], [59.5, 3758.0], [59.6, 3779.0], [59.7, 3803.0], [59.8, 3846.0], [59.9, 3858.0], [60.0, 3871.0], [60.1, 3893.0], [60.2, 3910.0], [60.3, 4096.0], [60.4, 4117.0], [60.5, 4124.0], [60.6, 4149.0], [60.7, 4155.0], [60.8, 4169.0], [60.9, 4187.0], [61.0, 4199.0], [61.1, 4214.0], [61.2, 4225.0], [61.3, 4235.0], [61.4, 4239.0], [61.5, 4258.0], [61.6, 4272.0], [61.7, 4284.0], [61.8, 4295.0], [61.9, 4318.0], [62.0, 4337.0], [62.1, 4491.0], [62.2, 4557.0], [62.3, 4624.0], [62.4, 4645.0], [62.5, 4653.0], [62.6, 4671.0], [62.7, 4694.0], [62.8, 4705.0], [62.9, 4713.0], [63.0, 4716.0], [63.1, 4721.0], [63.2, 4726.0], [63.3, 4734.0], [63.4, 4740.0], [63.5, 4763.0], [63.6, 4779.0], [63.7, 4782.0], [63.8, 4802.0], [63.9, 4808.0], [64.0, 4820.0], [64.1, 4834.0], [64.2, 4838.0], [64.3, 4841.0], [64.4, 4843.0], [64.5, 4845.0], [64.6, 4848.0], [64.7, 4851.0], [64.8, 4853.0], [64.9, 4855.0], [65.0, 4857.0], [65.1, 4858.0], [65.2, 4860.0], [65.3, 4862.0], [65.4, 4863.0], [65.5, 4865.0], [65.6, 4869.0], [65.7, 4871.0], [65.8, 4873.0], [65.9, 4875.0], [66.0, 4878.0], [66.1, 4879.0], [66.2, 4880.0], [66.3, 4880.0], [66.4, 4883.0], [66.5, 4883.0], [66.6, 4886.0], [66.7, 4887.0], [66.8, 4888.0], [66.9, 4889.0], [67.0, 4892.0], [67.1, 4899.0], [67.2, 4904.0], [67.3, 4906.0], [67.4, 4910.0], [67.5, 4912.0], [67.6, 4920.0], [67.7, 4927.0], [67.8, 4930.0], [67.9, 4935.0], [68.0, 4943.0], [68.1, 4948.0], [68.2, 4952.0], [68.3, 4963.0], [68.4, 4975.0], [68.5, 4987.0], [68.6, 5016.0], [68.7, 5025.0], [68.8, 5037.0], [68.9, 5057.0], [69.0, 5064.0], [69.1, 5090.0], [69.2, 5096.0], [69.3, 5104.0], [69.4, 5105.0], [69.5, 5108.0], [69.6, 5116.0], [69.7, 5123.0], [69.8, 5130.0], [69.9, 5139.0], [70.0, 5156.0], [70.1, 5173.0], [70.2, 5177.0], [70.3, 5184.0], [70.4, 5188.0], [70.5, 5191.0], [70.6, 5203.0], [70.7, 5213.0], [70.8, 5218.0], [70.9, 5223.0], [71.0, 5233.0], [71.1, 5243.0], [71.2, 5246.0], [71.3, 5250.0], [71.4, 5253.0], [71.5, 5253.0], [71.6, 5260.0], [71.7, 5265.0], [71.8, 5292.0], [71.9, 5308.0], [72.0, 5335.0], [72.1, 5349.0], [72.2, 5362.0], [72.3, 5377.0], [72.4, 5399.0], [72.5, 5404.0], [72.6, 5435.0], [72.7, 5443.0], [72.8, 5458.0], [72.9, 5470.0], [73.0, 5477.0], [73.1, 5486.0], [73.2, 5491.0], [73.3, 5497.0], [73.4, 5502.0], [73.5, 5514.0], [73.6, 5548.0], [73.7, 5595.0], [73.8, 5657.0], [73.9, 5819.0], [74.0, 5913.0], [74.1, 5976.0], [74.2, 6081.0], [74.3, 6117.0], [74.4, 6177.0], [74.5, 6220.0], [74.6, 6240.0], [74.7, 6274.0], [74.8, 6279.0], [74.9, 6287.0], [75.0, 6325.0], [75.1, 6338.0], [75.2, 6360.0], [75.3, 6369.0], [75.4, 6418.0], [75.5, 6451.0], [75.6, 6490.0], [75.7, 6498.0], [75.8, 6517.0], [75.9, 6530.0], [76.0, 6544.0], [76.1, 6559.0], [76.2, 6578.0], [76.3, 6607.0], [76.4, 6627.0], [76.5, 6634.0], [76.6, 6658.0], [76.7, 6664.0], [76.8, 6682.0], [76.9, 6733.0], [77.0, 6748.0], [77.1, 6758.0], [77.2, 6772.0], [77.3, 6799.0], [77.4, 6810.0], [77.5, 6837.0], [77.6, 6869.0], [77.7, 6882.0], [77.8, 6898.0], [77.9, 6909.0], [78.0, 6925.0], [78.1, 6947.0], [78.2, 6973.0], [78.3, 6998.0], [78.4, 7009.0], [78.5, 7020.0], [78.6, 7024.0], [78.7, 7039.0], [78.8, 7051.0], [78.9, 7072.0], [79.0, 7082.0], [79.1, 7103.0], [79.2, 7120.0], [79.3, 7133.0], [79.4, 7149.0], [79.5, 7157.0], [79.6, 7182.0], [79.7, 7195.0], [79.8, 7216.0], [79.9, 7244.0], [80.0, 7264.0], [80.1, 7274.0], [80.2, 7299.0], [80.3, 7318.0], [80.4, 7345.0], [80.5, 7352.0], [80.6, 7364.0], [80.7, 7373.0], [80.8, 7385.0], [80.9, 7397.0], [81.0, 7416.0], [81.1, 7423.0], [81.2, 7439.0], [81.3, 7450.0], [81.4, 7462.0], [81.5, 7481.0], [81.6, 7488.0], [81.7, 7494.0], [81.8, 7508.0], [81.9, 7524.0], [82.0, 7536.0], [82.1, 7548.0], [82.2, 7554.0], [82.3, 7565.0], [82.4, 7572.0], [82.5, 7590.0], [82.6, 7606.0], [82.7, 7623.0], [82.8, 7641.0], [82.9, 7647.0], [83.0, 7666.0], [83.1, 7676.0], [83.2, 7682.0], [83.3, 7700.0], [83.4, 7707.0], [83.5, 7716.0], [83.6, 7723.0], [83.7, 7728.0], [83.8, 7738.0], [83.9, 7757.0], [84.0, 7774.0], [84.1, 7788.0], [84.2, 7791.0], [84.3, 7815.0], [84.4, 7838.0], [84.5, 7856.0], [84.6, 7883.0], [84.7, 7916.0], [84.8, 7924.0], [84.9, 7954.0], [85.0, 7964.0], [85.1, 7992.0], [85.2, 8027.0], [85.3, 8080.0], [85.4, 8106.0], [85.5, 8142.0], [85.6, 8149.0], [85.7, 8182.0], [85.8, 8198.0], [85.9, 8219.0], [86.0, 8231.0], [86.1, 8241.0], [86.2, 8255.0], [86.3, 8265.0], [86.4, 8277.0], [86.5, 8291.0], [86.6, 8304.0], [86.7, 8314.0], [86.8, 8327.0], [86.9, 8338.0], [87.0, 8349.0], [87.1, 8356.0], [87.2, 8363.0], [87.3, 8369.0], [87.4, 8372.0], [87.5, 8377.0], [87.6, 8384.0], [87.7, 8392.0], [87.8, 8397.0], [87.9, 8400.0], [88.0, 8416.0], [88.1, 8420.0], [88.2, 8433.0], [88.3, 8442.0], [88.4, 8459.0], [88.5, 8485.0], [88.6, 8510.0], [88.7, 8542.0], [88.8, 8580.0], [88.9, 8631.0], [89.0, 8647.0], [89.1, 8669.0], [89.2, 8748.0], [89.3, 8813.0], [89.4, 8864.0], [89.5, 8887.0], [89.6, 8936.0], [89.7, 8956.0], [89.8, 9014.0], [89.9, 9043.0], [90.0, 9065.0], [90.1, 9118.0], [90.2, 9145.0], [90.3, 9223.0], [90.4, 9280.0], [90.5, 9289.0], [90.6, 9302.0], [90.7, 9311.0], [90.8, 9318.0], [90.9, 9329.0], [91.0, 9340.0], [91.1, 9350.0], [91.2, 9358.0], [91.3, 9362.0], [91.4, 9382.0], [91.5, 9404.0], [91.6, 9423.0], [91.7, 9454.0], [91.8, 9518.0], [91.9, 9577.0], [92.0, 9619.0], [92.1, 9653.0], [92.2, 9737.0], [92.3, 9757.0], [92.4, 9765.0], [92.5, 9773.0], [92.6, 9803.0], [92.7, 9834.0], [92.8, 9850.0], [92.9, 9862.0], [93.0, 9893.0], [93.1, 9903.0], [93.2, 9916.0], [93.3, 9946.0], [93.4, 9953.0], [93.5, 9968.0], [93.6, 9989.0], [93.7, 10002.0], [93.8, 10014.0], [93.9, 10069.0], [94.0, 10078.0], [94.1, 10102.0], [94.2, 10140.0], [94.3, 10193.0], [94.4, 10208.0], [94.5, 10224.0], [94.6, 10272.0], [94.7, 10281.0], [94.8, 10300.0], [94.9, 10311.0], [95.0, 10342.0], [95.1, 10374.0], [95.2, 10397.0], [95.3, 10428.0], [95.4, 10462.0], [95.5, 10480.0], [95.6, 10495.0], [95.7, 10516.0], [95.8, 10553.0], [95.9, 10570.0], [96.0, 10588.0], [96.1, 10602.0], [96.2, 10618.0], [96.3, 10649.0], [96.4, 10660.0], [96.5, 10668.0], [96.6, 10681.0], [96.7, 10707.0], [96.8, 10739.0], [96.9, 10758.0], [97.0, 10794.0], [97.1, 10807.0], [97.2, 10827.0], [97.3, 10858.0], [97.4, 10892.0], [97.5, 10915.0], [97.6, 10929.0], [97.7, 10936.0], [97.8, 10942.0], [97.9, 10961.0], [98.0, 10979.0], [98.1, 10983.0], [98.2, 11003.0], [98.3, 11026.0], [98.4, 11060.0], [98.5, 11112.0], [98.6, 11121.0], [98.7, 11161.0], [98.8, 11177.0], [98.9, 11192.0], [99.0, 11234.0], [99.1, 11265.0], [99.2, 11441.0], [99.3, 11610.0], [99.4, 11812.0], [99.5, 11930.0], [99.6, 12056.0], [99.7, 12145.0], [99.8, 12287.0], [99.9, 12489.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 484.0, "series": [{"data": [[100.0, 32.0], [200.0, 9.0], [300.0, 7.0], [400.0, 6.0], [500.0, 7.0], [600.0, 6.0], [700.0, 3.0], [800.0, 11.0], [900.0, 17.0], [1000.0, 12.0], [1100.0, 12.0], [1200.0, 8.0], [1300.0, 55.0], [1400.0, 218.0], [1500.0, 134.0], [1600.0, 484.0], [1700.0, 61.0], [1800.0, 83.0], [1900.0, 20.0], [2000.0, 90.0], [2100.0, 82.0], [2200.0, 331.0], [2300.0, 181.0], [2400.0, 224.0], [2500.0, 201.0], [2600.0, 237.0], [2800.0, 78.0], [2700.0, 131.0], [2900.0, 42.0], [3000.0, 15.0], [3100.0, 8.0], [3200.0, 6.0], [3300.0, 14.0], [3400.0, 20.0], [3500.0, 2.0], [3700.0, 15.0], [3600.0, 3.0], [3800.0, 24.0], [3900.0, 3.0], [4000.0, 3.0], [4300.0, 8.0], [4200.0, 41.0], [4100.0, 33.0], [4600.0, 23.0], [4500.0, 8.0], [4400.0, 4.0], [4700.0, 50.0], [4800.0, 160.0], [5000.0, 34.0], [5100.0, 64.0], [4900.0, 68.0], [5300.0, 29.0], [5200.0, 60.0], [5600.0, 7.0], [5400.0, 45.0], [5500.0, 16.0], [5700.0, 1.0], [5800.0, 6.0], [6100.0, 8.0], [6000.0, 7.0], [5900.0, 6.0], [6200.0, 27.0], [6300.0, 19.0], [6500.0, 27.0], [6400.0, 16.0], [6600.0, 26.0], [6800.0, 24.0], [6700.0, 23.0], [6900.0, 24.0], [7000.0, 36.0], [7100.0, 33.0], [7200.0, 22.0], [7300.0, 34.0], [7400.0, 39.0], [7500.0, 40.0], [7600.0, 35.0], [7700.0, 46.0], [7800.0, 18.0], [7900.0, 23.0], [8000.0, 14.0], [8100.0, 20.0], [8300.0, 63.0], [8200.0, 37.0], [8400.0, 32.0], [8500.0, 13.0], [8600.0, 15.0], [8700.0, 6.0], [9200.0, 16.0], [9100.0, 10.0], [9000.0, 12.0], [8900.0, 12.0], [8800.0, 13.0], [9700.0, 21.0], [9400.0, 14.0], [9500.0, 10.0], [9300.0, 44.0], [9600.0, 7.0], [10200.0, 23.0], [10000.0, 19.0], [10100.0, 11.0], [9900.0, 30.0], [9800.0, 23.0], [10600.0, 27.0], [10500.0, 23.0], [10400.0, 19.0], [10300.0, 20.0], [10700.0, 18.0], [11000.0, 16.0], [10800.0, 21.0], [11200.0, 10.0], [10900.0, 34.0], [11100.0, 20.0], [11500.0, 2.0], [11300.0, 2.0], [11400.0, 4.0], [11600.0, 2.0], [11700.0, 3.0], [11900.0, 3.0], [12100.0, 7.0], [12200.0, 2.0], [12000.0, 5.0], [11800.0, 4.0], [12300.0, 1.0], [12400.0, 3.0], [12600.0, 2.0], [13500.0, 1.0], [14400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 54.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4396.0, "series": [{"data": [[0.0, 54.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 350.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4396.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 542.3991666666657, "minX": 1.6966854E12, "maxY": 542.3991666666657, "series": [{"data": [[1.6966854E12, 542.3991666666657]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6966854E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 116.5, "minX": 1.0, "maxY": 6717.0, "series": [{"data": [[2.0, 263.75], [4.0, 137.5], [5.0, 139.0], [6.0, 137.0], [8.0, 154.0], [9.0, 160.0], [10.0, 158.0], [11.0, 158.0], [12.0, 155.0], [13.0, 153.0], [14.0, 185.0], [15.0, 182.0], [16.0, 180.0], [17.0, 177.0], [18.0, 170.0], [19.0, 171.0], [20.0, 173.0], [21.0, 172.0], [22.0, 170.0], [23.0, 233.0], [24.0, 243.0], [25.0, 214.0], [26.0, 199.0], [27.0, 190.0], [28.0, 188.0], [29.0, 170.0], [30.0, 185.0], [31.0, 191.0], [33.0, 210.0], [32.0, 200.0], [35.0, 225.0], [34.0, 221.0], [37.0, 267.0], [36.0, 216.0], [39.0, 345.5], [45.0, 359.0], [44.0, 375.4], [47.0, 435.5], [46.0, 446.0], [49.0, 541.0], [48.0, 479.6666666666667], [51.0, 565.0], [50.0, 582.0], [53.0, 597.0], [52.0, 570.0], [55.0, 604.0], [54.0, 636.0], [57.0, 682.0], [56.0, 628.0], [59.0, 732.0], [58.0, 690.5], [60.0, 780.0], [63.0, 817.0], [62.0, 813.5], [67.0, 984.5], [66.0, 964.0], [65.0, 949.0], [64.0, 907.0588235294117], [71.0, 1144.0], [70.0, 1059.6666666666667], [69.0, 1025.8333333333333], [68.0, 1006.6666666666667], [75.0, 1177.0], [74.0, 1171.0], [73.0, 1165.0], [72.0, 1170.0], [79.0, 1206.0], [78.0, 1189.5], [77.0, 1186.5], [76.0, 1180.0], [83.0, 1299.0], [82.0, 1232.25], [80.0, 1207.0], [86.0, 1331.0], [85.0, 1324.6666666666667], [91.0, 1352.5], [89.0, 1336.0], [88.0, 1339.5], [95.0, 1402.0], [94.0, 1380.0], [93.0, 1372.0], [99.0, 1437.0], [98.0, 1432.0], [97.0, 2664.166666666667], [96.0, 1410.0], [103.0, 1457.0], [102.0, 1452.0], [101.0, 1452.0], [100.0, 1442.0], [107.0, 1460.0], [106.0, 1463.5], [104.0, 1459.0], [111.0, 1545.0], [110.0, 1461.0], [109.0, 1462.0], [114.0, 1464.6666666666667], [116.0, 1470.0], [122.0, 1491.0], [120.0, 1482.25], [127.0, 1488.5], [124.0, 1481.0], [135.0, 1519.0], [134.0, 1512.5], [132.0, 3963.666666666667], [131.0, 1503.5], [128.0, 1502.0], [143.0, 1530.0], [142.0, 1531.0], [141.0, 1532.5], [140.0, 1531.0], [139.0, 1525.5], [138.0, 1529.0], [137.0, 1528.0], [136.0, 1515.0], [151.0, 1587.5], [149.0, 1575.0], [148.0, 1561.5], [146.0, 1561.0], [145.0, 1551.0], [144.0, 1527.0], [159.0, 1575.0], [158.0, 1583.0], [157.0, 1627.5], [156.0, 1588.0], [154.0, 1611.0], [153.0, 5181.0], [152.0, 1576.0], [167.0, 1586.0], [166.0, 1594.0], [165.0, 1587.0], [164.0, 1588.0], [163.0, 1593.0], [162.0, 1604.3333333333333], [175.0, 1590.0], [174.0, 1600.0], [173.0, 1609.0], [172.0, 1602.0], [171.0, 1622.0], [170.0, 5180.5], [169.0, 1599.0], [168.0, 1584.0], [183.0, 1583.0], [182.0, 1588.0], [181.0, 1587.0], [180.0, 1588.0], [179.0, 1584.0], [178.0, 1582.0], [177.0, 1582.0], [176.0, 1581.0], [191.0, 1601.0], [190.0, 1608.0], [189.0, 1601.0], [188.0, 1598.0], [186.0, 1599.0], [185.0, 1588.0], [184.0, 1584.5], [198.0, 1627.0], [197.0, 1618.0], [196.0, 1599.0], [195.0, 1603.0], [194.0, 1617.0], [193.0, 1615.5], [192.0, 1615.0], [207.0, 1617.0], [206.0, 1625.0], [205.0, 1606.0], [204.0, 1620.0], [203.0, 1612.0], [202.0, 1612.0], [201.0, 1607.0], [200.0, 1624.0], [215.0, 6717.0], [214.0, 1621.0], [213.0, 1610.0], [212.0, 6148.0], [211.0, 1612.0], [210.0, 1620.0], [209.0, 1615.0], [208.0, 1618.0], [223.0, 1616.0], [222.0, 6146.0], [221.0, 5034.5], [220.0, 1628.0], [218.0, 1628.0], [217.0, 1620.5], [216.0, 1621.0], [231.0, 1621.0], [230.0, 1623.0], [227.0, 1618.0], [226.0, 1619.0], [225.0, 1630.0], [238.0, 1622.0], [237.0, 6143.0], [236.0, 5011.5], [235.0, 4993.5], [234.0, 1616.0], [233.0, 1617.0], [232.0, 1620.0], [247.0, 1630.0], [245.0, 1621.0], [244.0, 1627.0], [243.0, 1620.0], [242.0, 1620.0], [241.0, 1635.0], [240.0, 6101.166666666666], [254.0, 1620.0], [252.0, 1616.0], [251.0, 1621.5], [250.0, 1619.0], [249.0, 1620.0], [248.0, 1623.0], [270.0, 6012.0], [271.0, 4942.0], [269.0, 1619.0], [268.0, 4966.0], [267.0, 4994.5], [266.0, 1612.0], [265.0, 1613.0], [264.0, 1621.0], [263.0, 1624.0], [262.0, 1620.0], [261.0, 1620.0], [260.0, 1625.2857142857142], [286.0, 1609.0], [287.0, 4899.5], [284.0, 1611.0], [275.0, 1604.0], [274.0, 1604.0], [273.0, 1605.0], [272.0, 1610.0], [283.0, 4878.0], [282.0, 1605.0], [281.0, 1610.0], [280.0, 4925.25], [279.0, 1605.0], [278.0, 4917.5], [277.0, 1599.0], [276.0, 1601.0], [302.0, 1649.0], [303.0, 1648.0], [301.0, 1654.0], [300.0, 1639.5], [298.0, 1637.0], [297.0, 1638.0], [296.0, 1634.0], [295.0, 1636.5], [288.0, 4882.0], [290.0, 4938.5], [289.0, 4937.5], [293.0, 1642.0], [292.0, 1632.0], [318.0, 1672.0], [319.0, 1675.0], [317.0, 1672.0], [316.0, 1667.0], [315.0, 1658.0], [314.0, 1659.0], [313.0, 1660.0], [312.0, 1642.0], [311.0, 1644.0], [307.0, 1645.0], [306.0, 1648.0], [305.0, 1648.0], [304.0, 1649.0], [310.0, 1651.0], [334.0, 1695.5], [335.0, 1666.0], [332.0, 1708.0], [323.0, 1672.0], [322.0, 1679.0], [321.0, 1680.0], [331.0, 1728.0], [330.0, 1679.0], [329.0, 1675.0], [327.0, 1672.0], [326.0, 1682.0], [325.0, 1668.0], [324.0, 1669.0], [350.0, 1693.0], [351.0, 1695.0], [349.0, 1757.0], [348.0, 1692.3333333333333], [347.0, 1695.0], [346.0, 1697.0], [345.0, 1685.0], [344.0, 1687.0], [343.0, 1688.0], [337.0, 1672.0], [336.0, 1672.0], [339.0, 1678.0], [338.0, 1677.0], [342.0, 1688.0], [341.0, 1688.3333333333333], [366.0, 1716.0], [367.0, 1723.0], [364.0, 1714.0], [355.0, 2528.25], [354.0, 1695.0], [353.0, 1696.0], [352.0, 1692.3333333333333], [363.0, 1718.0], [362.0, 1718.0], [361.0, 2132.75], [360.0, 2543.5], [359.0, 1712.0], [358.0, 1714.0], [357.0, 1722.5], [356.0, 1701.0], [382.0, 1675.0], [383.0, 1664.0], [381.0, 2088.75], [380.0, 1682.0], [379.0, 1686.5], [378.0, 1687.0], [377.0, 1693.0], [376.0, 1702.0], [375.0, 1707.0], [369.0, 1717.0], [368.0, 1718.0], [371.0, 1719.0], [370.0, 1719.0], [374.0, 1704.0], [373.0, 1711.0], [372.0, 2535.0], [398.0, 1661.0], [399.0, 1661.0], [397.0, 1662.5], [396.0, 1664.0], [395.0, 1659.0], [394.0, 1670.0], [393.0, 1671.5], [392.0, 1664.0], [391.0, 1659.0], [384.0, 1662.0], [387.0, 1671.6666666666667], [385.0, 1659.5], [390.0, 1659.0], [389.0, 1663.6666666666667], [414.0, 1679.3333333333333], [411.0, 1679.0], [410.0, 2790.0], [408.0, 1662.0], [407.0, 1660.0], [400.0, 1667.0], [406.0, 1675.0], [405.0, 2521.75], [404.0, 1666.0], [403.0, 1670.0], [402.0, 1725.5], [430.0, 1687.0], [431.0, 1672.0], [429.0, 1687.0], [428.0, 1669.0], [427.0, 1685.5], [426.0, 1673.0], [425.0, 1679.5], [424.0, 1677.5], [422.0, 1676.0], [418.0, 1685.5], [421.0, 4118.5], [420.0, 1667.0], [447.0, 1672.3333333333333], [444.0, 1663.5], [435.0, 1668.5], [434.0, 1675.5], [433.0, 1666.0], [432.0, 1665.0], [443.0, 1671.875], [442.0, 1672.0], [441.0, 1669.0], [440.0, 1677.0], [439.0, 1667.0], [438.0, 1680.0], [437.0, 1670.25], [436.0, 1669.5], [462.0, 1532.0], [463.0, 1550.3333333333333], [461.0, 1556.5], [460.0, 1568.0], [459.0, 1554.3333333333333], [458.0, 1555.0], [457.0, 1563.5], [456.0, 1567.0], [455.0, 2041.166666666667], [449.0, 1668.75], [448.0, 1636.0], [451.0, 2679.2000000000003], [450.0, 1661.5], [454.0, 2272.0], [453.0, 2484.8333333333335], [452.0, 1644.5], [478.0, 1474.0], [479.0, 1472.0], [477.0, 1472.25], [476.0, 1458.0], [475.0, 1457.3333333333333], [474.0, 1474.0], [473.0, 1465.0], [472.0, 1499.75], [471.0, 2592.75], [465.0, 2296.0], [467.0, 2569.8], [466.0, 2114.470588235294], [470.0, 1478.5], [469.0, 1481.0], [468.0, 1485.0], [494.0, 1454.0], [495.0, 3156.6666666666665], [493.0, 1465.0], [483.0, 2226.0], [482.0, 1463.0], [481.0, 1909.5], [480.0, 1463.0], [490.0, 1459.0], [489.0, 1472.0], [488.0, 2339.0], [487.0, 1484.9047619047617], [486.0, 2510.8999999999996], [485.0, 2078.235294117647], [484.0, 1466.0], [510.0, 1395.0], [511.0, 1410.2], [508.0, 1400.0], [498.0, 1441.5], [496.0, 1432.0], [507.0, 1419.0], [506.0, 1414.25], [505.0, 1415.0], [504.0, 1433.0], [503.0, 1433.8], [501.0, 1437.6], [538.0, 1658.3333333333333], [542.0, 1656.0], [543.0, 1640.5], [528.0, 1682.2857142857142], [530.0, 1677.5], [529.0, 1688.0], [533.0, 1663.1666666666667], [531.0, 1667.5], [541.0, 1659.0], [540.0, 1651.6], [539.0, 1645.0], [536.0, 1709.0], [519.0, 1376.0], [518.0, 1361.769230769231], [517.0, 1363.0], [516.0, 1363.0], [515.0, 1389.25], [514.0, 1399.0], [513.0, 1400.8], [512.0, 1409.5], [527.0, 1554.5], [526.0, 1603.5], [525.0, 1471.5714285714287], [524.0, 1481.0], [523.0, 1406.0], [522.0, 1378.5], [521.0, 1353.3333333333333], [520.0, 1360.0], [535.0, 1681.0], [534.0, 1663.0], [568.0, 1669.5], [574.0, 1651.5], [575.0, 1655.0], [572.0, 1625.0], [571.0, 1682.25], [569.0, 1660.0], [559.0, 1652.6666666666665], [545.0, 1630.0], [544.0, 1644.0], [547.0, 1648.0], [546.0, 1662.5], [549.0, 1634.0], [548.0, 1667.0], [551.0, 1652.5], [550.0, 1659.0], [557.0, 1648.25], [554.0, 1650.25], [567.0, 1654.3846153846155], [564.0, 1660.0], [562.0, 1665.5], [560.0, 1661.5], [592.0, 2545.75], [596.0, 3453.0], [600.0, 4920.9111361079895], [583.0, 1688.0], [582.0, 1731.5], [581.0, 1710.0], [580.0, 1711.0], [579.0, 1675.0], [578.0, 1684.3333333333333], [577.0, 1652.7142857142858], [576.0, 1657.0], [599.0, 4798.4392523364495], [598.0, 3988.1111111111113], [597.0, 3426.5], [595.0, 3468.0], [594.0, 2872.0], [593.0, 3070.2], [591.0, 2427.3333333333335], [590.0, 2199.25], [589.0, 1924.0], [588.0, 1660.0], [587.0, 1684.5], [586.0, 2520.0], [585.0, 1700.0], [584.0, 1700.0], [1.0, 116.5]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[542.3991666666657, 4189.259583333332]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 12510.0, "minX": 1.6966854E12, "maxY": 265078.25, "series": [{"data": [[1.6966854E12, 265078.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6966854E12, 12510.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6966854E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4189.259583333332, "minX": 1.6966854E12, "maxY": 4189.259583333332, "series": [{"data": [[1.6966854E12, 4189.259583333332]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6966854E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4188.979583333321, "minX": 1.6966854E12, "maxY": 4188.979583333321, "series": [{"data": [[1.6966854E12, 4188.979583333321]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6966854E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 634.2293750000005, "minX": 1.6966854E12, "maxY": 634.2293750000005, "series": [{"data": [[1.6966854E12, 634.2293750000005]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6966854E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 109.0, "minX": 1.6966854E12, "maxY": 14497.0, "series": [{"data": [[1.6966854E12, 14497.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6966854E12, 109.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6966854E12, 9064.100000000006]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6966854E12, 11233.98]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6966854E12, 2640.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.6966854E12, 10342.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6966854E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 198.5, "minX": 3.0, "maxY": 10156.5, "series": [{"data": [[136.0, 4236.0], [143.0, 2446.0], [167.0, 6530.0], [178.0, 2274.0], [188.0, 2644.0], [199.0, 2742.0], [3.0, 4207.0], [212.0, 2447.5], [224.0, 2655.0], [241.0, 2231.0], [252.0, 2462.0], [62.0, 198.5], [262.0, 1821.5], [66.0, 5366.0], [284.0, 10156.5], [277.0, 5096.0], [295.0, 1480.0], [301.0, 1672.0], [311.0, 9359.0], [323.0, 7424.0], [384.0, 3402.0], [30.0, 4160.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 384.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 198.5, "minX": 3.0, "maxY": 10156.5, "series": [{"data": [[136.0, 4236.0], [143.0, 2446.0], [167.0, 6530.0], [178.0, 2274.0], [188.0, 2644.0], [199.0, 2742.0], [3.0, 4207.0], [212.0, 2447.5], [224.0, 2655.0], [241.0, 2231.0], [252.0, 2462.0], [62.0, 198.5], [262.0, 1821.5], [66.0, 5366.0], [284.0, 10156.5], [277.0, 5096.0], [295.0, 1480.0], [301.0, 1671.0], [311.0, 9359.0], [323.0, 7424.0], [384.0, 3402.0], [30.0, 4160.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 384.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 80.0, "minX": 1.6966854E12, "maxY": 80.0, "series": [{"data": [[1.6966854E12, 80.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6966854E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 80.0, "minX": 1.6966854E12, "maxY": 80.0, "series": [{"data": [[1.6966854E12, 80.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6966854E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 80.0, "minX": 1.6966854E12, "maxY": 80.0, "series": [{"data": [[1.6966854E12, 80.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6966854E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 80.0, "minX": 1.6966854E12, "maxY": 80.0, "series": [{"data": [[1.6966854E12, 80.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6966854E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

