/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 177.0, "minX": 0.0, "maxY": 19454.0, "series": [{"data": [[0.0, 177.0], [0.1, 201.0], [0.2, 389.0], [0.3, 610.0], [0.4, 622.0], [0.5, 661.0], [0.6, 673.0], [0.7, 678.0], [0.8, 697.0], [0.9, 720.0], [1.0, 741.0], [1.1, 757.0], [1.2, 764.0], [1.3, 775.0], [1.4, 782.0], [1.5, 799.0], [1.6, 802.0], [1.7, 805.0], [1.8, 809.0], [1.9, 821.0], [2.0, 833.0], [2.1, 840.0], [2.2, 857.0], [2.3, 1119.0], [2.4, 1609.0], [2.5, 1975.0], [2.6, 2003.0], [2.7, 2016.0], [2.8, 2053.0], [2.9, 2087.0], [3.0, 2116.0], [3.1, 2131.0], [3.2, 2134.0], [3.3, 2143.0], [3.4, 2146.0], [3.5, 2150.0], [3.6, 2176.0], [3.7, 2186.0], [3.8, 2196.0], [3.9, 2210.0], [4.0, 2239.0], [4.1, 2290.0], [4.2, 2298.0], [4.3, 2308.0], [4.4, 2320.0], [4.5, 2329.0], [4.6, 2333.0], [4.7, 2336.0], [4.8, 2340.0], [4.9, 2341.0], [5.0, 2345.0], [5.1, 2354.0], [5.2, 2359.0], [5.3, 2362.0], [5.4, 2365.0], [5.5, 2368.0], [5.6, 2370.0], [5.7, 2373.0], [5.8, 2376.0], [5.9, 2378.0], [6.0, 2379.0], [6.1, 2384.0], [6.2, 2387.0], [6.3, 2389.0], [6.4, 2392.0], [6.5, 2394.0], [6.6, 2395.0], [6.7, 2400.0], [6.8, 2401.0], [6.9, 2403.0], [7.0, 2407.0], [7.1, 2411.0], [7.2, 2413.0], [7.3, 2414.0], [7.4, 2416.0], [7.5, 2417.0], [7.6, 2418.0], [7.7, 2421.0], [7.8, 2424.0], [7.9, 2426.0], [8.0, 2430.0], [8.1, 2431.0], [8.2, 2432.0], [8.3, 2434.0], [8.4, 2436.0], [8.5, 2437.0], [8.6, 2439.0], [8.7, 2442.0], [8.8, 2445.0], [8.9, 2446.0], [9.0, 2448.0], [9.1, 2451.0], [9.2, 2461.0], [9.3, 2466.0], [9.4, 2473.0], [9.5, 2478.0], [9.6, 2484.0], [9.7, 2491.0], [9.8, 2494.0], [9.9, 2495.0], [10.0, 2496.0], [10.1, 2498.0], [10.2, 2499.0], [10.3, 2500.0], [10.4, 2500.0], [10.5, 2502.0], [10.6, 2503.0], [10.7, 2504.0], [10.8, 2505.0], [10.9, 2506.0], [11.0, 2507.0], [11.1, 2508.0], [11.2, 2510.0], [11.3, 2511.0], [11.4, 2511.0], [11.5, 2512.0], [11.6, 2513.0], [11.7, 2514.0], [11.8, 2515.0], [11.9, 2515.0], [12.0, 2516.0], [12.1, 2517.0], [12.2, 2518.0], [12.3, 2519.0], [12.4, 2519.0], [12.5, 2520.0], [12.6, 2522.0], [12.7, 2523.0], [12.8, 2523.0], [12.9, 2525.0], [13.0, 2525.0], [13.1, 2527.0], [13.2, 2528.0], [13.3, 2530.0], [13.4, 2532.0], [13.5, 2532.0], [13.6, 2536.0], [13.7, 2536.0], [13.8, 2537.0], [13.9, 2538.0], [14.0, 2539.0], [14.1, 2540.0], [14.2, 2540.0], [14.3, 2541.0], [14.4, 2542.0], [14.5, 2543.0], [14.6, 2544.0], [14.7, 2545.0], [14.8, 2546.0], [14.9, 2548.0], [15.0, 2549.0], [15.1, 2549.0], [15.2, 2550.0], [15.3, 2551.0], [15.4, 2552.0], [15.5, 2554.0], [15.6, 2554.0], [15.7, 2555.0], [15.8, 2556.0], [15.9, 2557.0], [16.0, 2558.0], [16.1, 2559.0], [16.2, 2560.0], [16.3, 2561.0], [16.4, 2561.0], [16.5, 2562.0], [16.6, 2563.0], [16.7, 2564.0], [16.8, 2565.0], [16.9, 2566.0], [17.0, 2567.0], [17.1, 2568.0], [17.2, 2569.0], [17.3, 2571.0], [17.4, 2572.0], [17.5, 2573.0], [17.6, 2573.0], [17.7, 2575.0], [17.8, 2577.0], [17.9, 2578.0], [18.0, 2579.0], [18.1, 2581.0], [18.2, 2583.0], [18.3, 2585.0], [18.4, 2590.0], [18.5, 2604.0], [18.6, 2622.0], [18.7, 2634.0], [18.8, 2637.0], [18.9, 2639.0], [19.0, 2645.0], [19.1, 2646.0], [19.2, 2647.0], [19.3, 2649.0], [19.4, 2650.0], [19.5, 2651.0], [19.6, 2652.0], [19.7, 2653.0], [19.8, 2654.0], [19.9, 2654.0], [20.0, 2655.0], [20.1, 2656.0], [20.2, 2657.0], [20.3, 2659.0], [20.4, 2662.0], [20.5, 2665.0], [20.6, 2667.0], [20.7, 2669.0], [20.8, 2671.0], [20.9, 2674.0], [21.0, 2679.0], [21.1, 2681.0], [21.2, 2683.0], [21.3, 2685.0], [21.4, 2686.0], [21.5, 2687.0], [21.6, 2688.0], [21.7, 2691.0], [21.8, 2696.0], [21.9, 2699.0], [22.0, 2702.0], [22.1, 2707.0], [22.2, 2715.0], [22.3, 2722.0], [22.4, 2730.0], [22.5, 2737.0], [22.6, 2746.0], [22.7, 2754.0], [22.8, 2763.0], [22.9, 2767.0], [23.0, 2777.0], [23.1, 2781.0], [23.2, 2789.0], [23.3, 2796.0], [23.4, 2801.0], [23.5, 2807.0], [23.6, 2824.0], [23.7, 2832.0], [23.8, 2834.0], [23.9, 2841.0], [24.0, 2846.0], [24.1, 2850.0], [24.2, 2851.0], [24.3, 2855.0], [24.4, 2859.0], [24.5, 2861.0], [24.6, 2864.0], [24.7, 2868.0], [24.8, 2873.0], [24.9, 2877.0], [25.0, 2882.0], [25.1, 2886.0], [25.2, 2894.0], [25.3, 2902.0], [25.4, 2915.0], [25.5, 2918.0], [25.6, 2925.0], [25.7, 2927.0], [25.8, 2929.0], [25.9, 2933.0], [26.0, 2936.0], [26.1, 2938.0], [26.2, 2940.0], [26.3, 2943.0], [26.4, 2946.0], [26.5, 2949.0], [26.6, 2949.0], [26.7, 2952.0], [26.8, 2953.0], [26.9, 2956.0], [27.0, 2966.0], [27.1, 2968.0], [27.2, 2970.0], [27.3, 2972.0], [27.4, 2975.0], [27.5, 2978.0], [27.6, 2979.0], [27.7, 2981.0], [27.8, 2984.0], [27.9, 2985.0], [28.0, 2989.0], [28.1, 2992.0], [28.2, 2994.0], [28.3, 2997.0], [28.4, 3001.0], [28.5, 3005.0], [28.6, 3006.0], [28.7, 3010.0], [28.8, 3017.0], [28.9, 3020.0], [29.0, 3023.0], [29.1, 3026.0], [29.2, 3030.0], [29.3, 3033.0], [29.4, 3035.0], [29.5, 3037.0], [29.6, 3039.0], [29.7, 3043.0], [29.8, 3045.0], [29.9, 3048.0], [30.0, 3050.0], [30.1, 3052.0], [30.2, 3054.0], [30.3, 3057.0], [30.4, 3060.0], [30.5, 3062.0], [30.6, 3066.0], [30.7, 3068.0], [30.8, 3070.0], [30.9, 3072.0], [31.0, 3075.0], [31.1, 3077.0], [31.2, 3078.0], [31.3, 3080.0], [31.4, 3082.0], [31.5, 3085.0], [31.6, 3090.0], [31.7, 3092.0], [31.8, 3096.0], [31.9, 3098.0], [32.0, 3100.0], [32.1, 3101.0], [32.2, 3102.0], [32.3, 3105.0], [32.4, 3107.0], [32.5, 3109.0], [32.6, 3111.0], [32.7, 3112.0], [32.8, 3113.0], [32.9, 3114.0], [33.0, 3115.0], [33.1, 3116.0], [33.2, 3116.0], [33.3, 3117.0], [33.4, 3117.0], [33.5, 3118.0], [33.6, 3119.0], [33.7, 3120.0], [33.8, 3121.0], [33.9, 3122.0], [34.0, 3123.0], [34.1, 3123.0], [34.2, 3125.0], [34.3, 3126.0], [34.4, 3126.0], [34.5, 3128.0], [34.6, 3128.0], [34.7, 3128.0], [34.8, 3129.0], [34.9, 3130.0], [35.0, 3130.0], [35.1, 3131.0], [35.2, 3132.0], [35.3, 3133.0], [35.4, 3135.0], [35.5, 3136.0], [35.6, 3137.0], [35.7, 3139.0], [35.8, 3141.0], [35.9, 3141.0], [36.0, 3143.0], [36.1, 3143.0], [36.2, 3144.0], [36.3, 3148.0], [36.4, 3149.0], [36.5, 3150.0], [36.6, 3151.0], [36.7, 3152.0], [36.8, 3153.0], [36.9, 3153.0], [37.0, 3154.0], [37.1, 3155.0], [37.2, 3155.0], [37.3, 3156.0], [37.4, 3157.0], [37.5, 3157.0], [37.6, 3158.0], [37.7, 3158.0], [37.8, 3158.0], [37.9, 3159.0], [38.0, 3159.0], [38.1, 3159.0], [38.2, 3160.0], [38.3, 3161.0], [38.4, 3161.0], [38.5, 3162.0], [38.6, 3162.0], [38.7, 3163.0], [38.8, 3163.0], [38.9, 3164.0], [39.0, 3165.0], [39.1, 3166.0], [39.2, 3167.0], [39.3, 3168.0], [39.4, 3169.0], [39.5, 3170.0], [39.6, 3171.0], [39.7, 3172.0], [39.8, 3174.0], [39.9, 3174.0], [40.0, 3176.0], [40.1, 3177.0], [40.2, 3177.0], [40.3, 3179.0], [40.4, 3181.0], [40.5, 3182.0], [40.6, 3183.0], [40.7, 3183.0], [40.8, 3184.0], [40.9, 3185.0], [41.0, 3187.0], [41.1, 3187.0], [41.2, 3188.0], [41.3, 3188.0], [41.4, 3189.0], [41.5, 3190.0], [41.6, 3190.0], [41.7, 3191.0], [41.8, 3191.0], [41.9, 3192.0], [42.0, 3193.0], [42.1, 3194.0], [42.2, 3194.0], [42.3, 3196.0], [42.4, 3196.0], [42.5, 3196.0], [42.6, 3198.0], [42.7, 3198.0], [42.8, 3199.0], [42.9, 3199.0], [43.0, 3201.0], [43.1, 3201.0], [43.2, 3203.0], [43.3, 3203.0], [43.4, 3204.0], [43.5, 3205.0], [43.6, 3205.0], [43.7, 3206.0], [43.8, 3207.0], [43.9, 3208.0], [44.0, 3208.0], [44.1, 3209.0], [44.2, 3210.0], [44.3, 3212.0], [44.4, 3213.0], [44.5, 3214.0], [44.6, 3215.0], [44.7, 3216.0], [44.8, 3217.0], [44.9, 3218.0], [45.0, 3220.0], [45.1, 3220.0], [45.2, 3221.0], [45.3, 3222.0], [45.4, 3223.0], [45.5, 3223.0], [45.6, 3224.0], [45.7, 3224.0], [45.8, 3225.0], [45.9, 3226.0], [46.0, 3226.0], [46.1, 3227.0], [46.2, 3228.0], [46.3, 3229.0], [46.4, 3230.0], [46.5, 3231.0], [46.6, 3232.0], [46.7, 3233.0], [46.8, 3234.0], [46.9, 3234.0], [47.0, 3236.0], [47.1, 3237.0], [47.2, 3238.0], [47.3, 3239.0], [47.4, 3240.0], [47.5, 3241.0], [47.6, 3242.0], [47.7, 3243.0], [47.8, 3243.0], [47.9, 3245.0], [48.0, 3246.0], [48.1, 3246.0], [48.2, 3247.0], [48.3, 3248.0], [48.4, 3249.0], [48.5, 3250.0], [48.6, 3251.0], [48.7, 3252.0], [48.8, 3254.0], [48.9, 3254.0], [49.0, 3256.0], [49.1, 3256.0], [49.2, 3258.0], [49.3, 3259.0], [49.4, 3260.0], [49.5, 3262.0], [49.6, 3262.0], [49.7, 3263.0], [49.8, 3264.0], [49.9, 3265.0], [50.0, 3266.0], [50.1, 3267.0], [50.2, 3267.0], [50.3, 3268.0], [50.4, 3268.0], [50.5, 3269.0], [50.6, 3270.0], [50.7, 3270.0], [50.8, 3271.0], [50.9, 3271.0], [51.0, 3272.0], [51.1, 3272.0], [51.2, 3272.0], [51.3, 3273.0], [51.4, 3273.0], [51.5, 3274.0], [51.6, 3274.0], [51.7, 3275.0], [51.8, 3276.0], [51.9, 3276.0], [52.0, 3277.0], [52.1, 3278.0], [52.2, 3278.0], [52.3, 3280.0], [52.4, 3280.0], [52.5, 3281.0], [52.6, 3282.0], [52.7, 3283.0], [52.8, 3284.0], [52.9, 3284.0], [53.0, 3285.0], [53.1, 3286.0], [53.2, 3287.0], [53.3, 3288.0], [53.4, 3288.0], [53.5, 3289.0], [53.6, 3290.0], [53.7, 3290.0], [53.8, 3291.0], [53.9, 3292.0], [54.0, 3293.0], [54.1, 3293.0], [54.2, 3294.0], [54.3, 3295.0], [54.4, 3295.0], [54.5, 3296.0], [54.6, 3297.0], [54.7, 3297.0], [54.8, 3299.0], [54.9, 3300.0], [55.0, 3301.0], [55.1, 3301.0], [55.2, 3302.0], [55.3, 3304.0], [55.4, 3305.0], [55.5, 3306.0], [55.6, 3307.0], [55.7, 3307.0], [55.8, 3308.0], [55.9, 3309.0], [56.0, 3310.0], [56.1, 3311.0], [56.2, 3312.0], [56.3, 3313.0], [56.4, 3314.0], [56.5, 3315.0], [56.6, 3315.0], [56.7, 3316.0], [56.8, 3317.0], [56.9, 3318.0], [57.0, 3319.0], [57.1, 3319.0], [57.2, 3320.0], [57.3, 3320.0], [57.4, 3322.0], [57.5, 3323.0], [57.6, 3325.0], [57.7, 3326.0], [57.8, 3327.0], [57.9, 3328.0], [58.0, 3329.0], [58.1, 3330.0], [58.2, 3331.0], [58.3, 3331.0], [58.4, 3332.0], [58.5, 3333.0], [58.6, 3333.0], [58.7, 3334.0], [58.8, 3335.0], [58.9, 3335.0], [59.0, 3337.0], [59.1, 3337.0], [59.2, 3338.0], [59.3, 3338.0], [59.4, 3339.0], [59.5, 3341.0], [59.6, 3341.0], [59.7, 3342.0], [59.8, 3343.0], [59.9, 3343.0], [60.0, 3344.0], [60.1, 3345.0], [60.2, 3346.0], [60.3, 3347.0], [60.4, 3348.0], [60.5, 3349.0], [60.6, 3349.0], [60.7, 3350.0], [60.8, 3351.0], [60.9, 3352.0], [61.0, 3353.0], [61.1, 3354.0], [61.2, 3355.0], [61.3, 3356.0], [61.4, 3356.0], [61.5, 3357.0], [61.6, 3358.0], [61.7, 3359.0], [61.8, 3361.0], [61.9, 3362.0], [62.0, 3363.0], [62.1, 3364.0], [62.2, 3365.0], [62.3, 3367.0], [62.4, 3368.0], [62.5, 3368.0], [62.6, 3370.0], [62.7, 3371.0], [62.8, 3373.0], [62.9, 3374.0], [63.0, 3375.0], [63.1, 3379.0], [63.2, 3381.0], [63.3, 3383.0], [63.4, 3384.0], [63.5, 3385.0], [63.6, 3386.0], [63.7, 3387.0], [63.8, 3388.0], [63.9, 3389.0], [64.0, 3389.0], [64.1, 3390.0], [64.2, 3390.0], [64.3, 3391.0], [64.4, 3392.0], [64.5, 3393.0], [64.6, 3394.0], [64.7, 3395.0], [64.8, 3396.0], [64.9, 3398.0], [65.0, 3399.0], [65.1, 3400.0], [65.2, 3402.0], [65.3, 3403.0], [65.4, 3406.0], [65.5, 3409.0], [65.6, 3410.0], [65.7, 3411.0], [65.8, 3413.0], [65.9, 3414.0], [66.0, 3416.0], [66.1, 3417.0], [66.2, 3418.0], [66.3, 3419.0], [66.4, 3420.0], [66.5, 3421.0], [66.6, 3422.0], [66.7, 3423.0], [66.8, 3425.0], [66.9, 3427.0], [67.0, 3428.0], [67.1, 3429.0], [67.2, 3430.0], [67.3, 3431.0], [67.4, 3432.0], [67.5, 3433.0], [67.6, 3434.0], [67.7, 3436.0], [67.8, 3437.0], [67.9, 3438.0], [68.0, 3440.0], [68.1, 3441.0], [68.2, 3443.0], [68.3, 3444.0], [68.4, 3446.0], [68.5, 3450.0], [68.6, 3453.0], [68.7, 3455.0], [68.8, 3461.0], [68.9, 3462.0], [69.0, 3464.0], [69.1, 3468.0], [69.2, 3469.0], [69.3, 3470.0], [69.4, 3472.0], [69.5, 3474.0], [69.6, 3476.0], [69.7, 3477.0], [69.8, 3480.0], [69.9, 3483.0], [70.0, 3488.0], [70.1, 3489.0], [70.2, 3493.0], [70.3, 3496.0], [70.4, 3497.0], [70.5, 3500.0], [70.6, 3500.0], [70.7, 3501.0], [70.8, 3503.0], [70.9, 3504.0], [71.0, 3505.0], [71.1, 3506.0], [71.2, 3508.0], [71.3, 3509.0], [71.4, 3509.0], [71.5, 3510.0], [71.6, 3511.0], [71.7, 3512.0], [71.8, 3513.0], [71.9, 3513.0], [72.0, 3514.0], [72.1, 3515.0], [72.2, 3515.0], [72.3, 3517.0], [72.4, 3518.0], [72.5, 3519.0], [72.6, 3520.0], [72.7, 3520.0], [72.8, 3521.0], [72.9, 3522.0], [73.0, 3523.0], [73.1, 3524.0], [73.2, 3525.0], [73.3, 3526.0], [73.4, 3527.0], [73.5, 3527.0], [73.6, 3529.0], [73.7, 3530.0], [73.8, 3531.0], [73.9, 3532.0], [74.0, 3534.0], [74.1, 3535.0], [74.2, 3535.0], [74.3, 3536.0], [74.4, 3536.0], [74.5, 3537.0], [74.6, 3538.0], [74.7, 3538.0], [74.8, 3539.0], [74.9, 3539.0], [75.0, 3540.0], [75.1, 3540.0], [75.2, 3541.0], [75.3, 3542.0], [75.4, 3542.0], [75.5, 3542.0], [75.6, 3543.0], [75.7, 3543.0], [75.8, 3544.0], [75.9, 3544.0], [76.0, 3544.0], [76.1, 3545.0], [76.2, 3545.0], [76.3, 3545.0], [76.4, 3546.0], [76.5, 3546.0], [76.6, 3547.0], [76.7, 3547.0], [76.8, 3548.0], [76.9, 3548.0], [77.0, 3549.0], [77.1, 3549.0], [77.2, 3550.0], [77.3, 3550.0], [77.4, 3551.0], [77.5, 3551.0], [77.6, 3552.0], [77.7, 3552.0], [77.8, 3552.0], [77.9, 3553.0], [78.0, 3554.0], [78.1, 3555.0], [78.2, 3555.0], [78.3, 3556.0], [78.4, 3556.0], [78.5, 3557.0], [78.6, 3557.0], [78.7, 3558.0], [78.8, 3558.0], [78.9, 3559.0], [79.0, 3559.0], [79.1, 3560.0], [79.2, 3560.0], [79.3, 3561.0], [79.4, 3561.0], [79.5, 3561.0], [79.6, 3562.0], [79.7, 3562.0], [79.8, 3563.0], [79.9, 3563.0], [80.0, 3564.0], [80.1, 3564.0], [80.2, 3564.0], [80.3, 3565.0], [80.4, 3565.0], [80.5, 3566.0], [80.6, 3567.0], [80.7, 3567.0], [80.8, 3568.0], [80.9, 3569.0], [81.0, 3569.0], [81.1, 3570.0], [81.2, 3570.0], [81.3, 3571.0], [81.4, 3571.0], [81.5, 3573.0], [81.6, 3574.0], [81.7, 3574.0], [81.8, 3575.0], [81.9, 3576.0], [82.0, 3577.0], [82.1, 3578.0], [82.2, 3580.0], [82.3, 3582.0], [82.4, 3583.0], [82.5, 3585.0], [82.6, 3586.0], [82.7, 3588.0], [82.8, 3592.0], [82.9, 3593.0], [83.0, 3594.0], [83.1, 3597.0], [83.2, 3599.0], [83.3, 3603.0], [83.4, 3605.0], [83.5, 3608.0], [83.6, 3612.0], [83.7, 3616.0], [83.8, 3618.0], [83.9, 3620.0], [84.0, 3625.0], [84.1, 3627.0], [84.2, 3629.0], [84.3, 3632.0], [84.4, 3633.0], [84.5, 3635.0], [84.6, 3635.0], [84.7, 3637.0], [84.8, 3638.0], [84.9, 3640.0], [85.0, 3643.0], [85.1, 3646.0], [85.2, 3653.0], [85.3, 3657.0], [85.4, 3661.0], [85.5, 3674.0], [85.6, 6342.0], [85.7, 6373.0], [85.8, 6386.0], [85.9, 6392.0], [86.0, 6394.0], [86.1, 6399.0], [86.2, 6408.0], [86.3, 6425.0], [86.4, 6436.0], [86.5, 6444.0], [86.6, 6452.0], [86.7, 6462.0], [86.8, 6471.0], [86.9, 6479.0], [87.0, 6496.0], [87.1, 6516.0], [87.2, 6526.0], [87.3, 6616.0], [87.4, 6630.0], [87.5, 8013.0], [87.6, 8238.0], [87.7, 8327.0], [87.8, 8416.0], [87.9, 8462.0], [88.0, 8488.0], [88.1, 8519.0], [88.2, 8529.0], [88.3, 8594.0], [88.4, 8634.0], [88.5, 8703.0], [88.6, 8727.0], [88.7, 8759.0], [88.8, 8821.0], [88.9, 8885.0], [89.0, 8931.0], [89.1, 8985.0], [89.2, 9032.0], [89.3, 9139.0], [89.4, 9206.0], [89.5, 9232.0], [89.6, 9263.0], [89.7, 9274.0], [89.8, 9301.0], [89.9, 9314.0], [90.0, 9335.0], [90.1, 9356.0], [90.2, 9369.0], [90.3, 9392.0], [90.4, 9417.0], [90.5, 9457.0], [90.6, 9475.0], [90.7, 9494.0], [90.8, 9527.0], [90.9, 9547.0], [91.0, 9564.0], [91.1, 9579.0], [91.2, 9597.0], [91.3, 9618.0], [91.4, 9644.0], [91.5, 9667.0], [91.6, 9690.0], [91.7, 9709.0], [91.8, 9726.0], [91.9, 9733.0], [92.0, 9768.0], [92.1, 9802.0], [92.2, 9819.0], [92.3, 9857.0], [92.4, 9874.0], [92.5, 9902.0], [92.6, 9916.0], [92.7, 9939.0], [92.8, 9965.0], [92.9, 9998.0], [93.0, 10023.0], [93.1, 10048.0], [93.2, 10075.0], [93.3, 10083.0], [93.4, 10103.0], [93.5, 10133.0], [93.6, 10152.0], [93.7, 10177.0], [93.8, 10215.0], [93.9, 10244.0], [94.0, 10278.0], [94.1, 10300.0], [94.2, 10323.0], [94.3, 10349.0], [94.4, 10361.0], [94.5, 10369.0], [94.6, 10383.0], [94.7, 10413.0], [94.8, 10436.0], [94.9, 10452.0], [95.0, 10464.0], [95.1, 10503.0], [95.2, 10520.0], [95.3, 10571.0], [95.4, 10588.0], [95.5, 10597.0], [95.6, 10614.0], [95.7, 10639.0], [95.8, 10704.0], [95.9, 10752.0], [96.0, 10782.0], [96.1, 10829.0], [96.2, 10873.0], [96.3, 10931.0], [96.4, 10978.0], [96.5, 11012.0], [96.6, 11043.0], [96.7, 11061.0], [96.8, 11082.0], [96.9, 11098.0], [97.0, 11131.0], [97.1, 11171.0], [97.2, 11209.0], [97.3, 11263.0], [97.4, 11302.0], [97.5, 11354.0], [97.6, 11385.0], [97.7, 11414.0], [97.8, 11448.0], [97.9, 11472.0], [98.0, 11505.0], [98.1, 11530.0], [98.2, 11554.0], [98.3, 11581.0], [98.4, 11596.0], [98.5, 11613.0], [98.6, 11651.0], [98.7, 11684.0], [98.8, 11707.0], [98.9, 11755.0], [99.0, 11807.0], [99.1, 11823.0], [99.2, 11900.0], [99.3, 11975.0], [99.4, 12009.0], [99.5, 12037.0], [99.6, 12161.0], [99.7, 12321.0], [99.8, 17169.0], [99.9, 18482.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 813.0, "series": [{"data": [[600.0, 35.0], [700.0, 46.0], [800.0, 47.0], [1000.0, 1.0], [1100.0, 6.0], [1500.0, 1.0], [1600.0, 2.0], [1800.0, 2.0], [1900.0, 9.0], [2000.0, 20.0], [2100.0, 60.0], [2300.0, 157.0], [2200.0, 25.0], [2400.0, 229.0], [2500.0, 524.0], [2600.0, 225.0], [2700.0, 86.0], [2800.0, 124.0], [2900.0, 200.0], [3000.0, 231.0], [3100.0, 699.0], [3200.0, 764.0], [3300.0, 653.0], [3400.0, 349.0], [3500.0, 813.0], [3600.0, 153.0], [6300.0, 35.0], [6400.0, 57.0], [6500.0, 17.0], [6600.0, 13.0], [8100.0, 3.0], [8000.0, 3.0], [8400.0, 18.0], [8500.0, 16.0], [8200.0, 6.0], [8600.0, 12.0], [8700.0, 19.0], [8300.0, 6.0], [8800.0, 9.0], [8900.0, 15.0], [9000.0, 4.0], [9200.0, 25.0], [9100.0, 10.0], [9300.0, 35.0], [9400.0, 26.0], [9500.0, 30.0], [9600.0, 28.0], [9700.0, 29.0], [9800.0, 25.0], [9900.0, 28.0], [10000.0, 29.0], [10100.0, 25.0], [10200.0, 21.0], [10300.0, 35.0], [10400.0, 29.0], [10500.0, 27.0], [10600.0, 17.0], [10700.0, 17.0], [10800.0, 11.0], [10900.0, 13.0], [11000.0, 31.0], [11100.0, 16.0], [11200.0, 15.0], [11300.0, 18.0], [11400.0, 21.0], [11500.0, 26.0], [11600.0, 24.0], [11700.0, 14.0], [11800.0, 12.0], [11900.0, 12.0], [12000.0, 12.0], [12100.0, 4.0], [12200.0, 4.0], [12300.0, 1.0], [12400.0, 1.0], [13400.0, 1.0], [13900.0, 1.0], [15900.0, 1.0], [17100.0, 2.0], [17000.0, 1.0], [17300.0, 2.0], [18300.0, 3.0], [18400.0, 1.0], [18500.0, 1.0], [18900.0, 2.0], [18700.0, 1.0], [19300.0, 1.0], [19400.0, 1.0], [100.0, 6.0], [200.0, 4.0], [300.0, 4.0], [400.0, 1.0], [500.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 19400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6248.0, "series": [{"data": [[0.0, 15.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 137.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6248.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 730.4514062500001, "minX": 1.69669284E12, "maxY": 730.4514062500001, "series": [{"data": [[1.69669284E12, 730.4514062500001]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69669284E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 177.0, "minX": 2.0, "maxY": 4459.2065903709545, "series": [{"data": [[2.0, 179.0], [3.0, 177.0], [4.0, 179.0], [5.0, 179.0], [6.0, 178.0], [7.0, 201.0], [9.0, 205.0], [10.0, 219.0], [11.0, 389.0], [12.0, 388.0], [13.0, 389.0], [14.0, 393.0], [15.0, 552.75], [16.0, 610.0], [17.0, 609.0], [18.0, 613.0], [19.0, 613.0], [20.0, 622.0], [22.0, 619.6666666666666], [23.0, 618.0], [25.0, 632.0], [26.0, 636.0], [27.0, 642.0], [28.0, 666.5], [29.0, 679.5], [30.0, 661.0], [31.0, 669.0], [33.0, 667.0], [32.0, 668.0], [35.0, 674.5], [37.0, 686.0], [36.0, 673.0], [39.0, 678.0], [38.0, 677.0], [41.0, 681.0], [43.0, 687.0], [42.0, 680.0], [47.0, 708.0], [46.0, 705.75], [49.0, 722.0], [48.0, 720.0], [51.0, 726.0], [50.0, 722.5], [53.0, 737.5], [55.0, 735.0], [54.0, 734.0], [59.0, 747.0], [58.0, 752.0], [61.0, 748.0], [60.0, 759.0], [67.0, 763.0], [64.0, 756.6666666666666], [71.0, 765.0], [70.0, 766.0], [69.0, 771.0], [68.0, 778.0], [75.0, 764.0], [74.0, 780.6666666666666], [77.0, 775.0], [76.0, 779.0], [81.0, 774.0], [80.0, 782.0], [84.0, 789.0], [88.0, 798.5], [94.0, 804.0], [93.0, 794.0], [92.0, 807.5], [98.0, 833.0], [97.0, 808.0], [96.0, 808.0], [103.0, 814.0], [101.0, 860.0], [100.0, 805.5], [106.0, 805.0], [105.0, 801.0], [111.0, 803.5], [109.0, 815.3333333333334], [114.0, 808.3333333333334], [118.0, 828.0], [117.0, 829.0], [116.0, 813.0], [123.0, 840.0], [122.0, 831.0], [121.0, 829.0], [120.0, 841.5], [126.0, 845.0], [135.0, 1069.0], [134.0, 854.5], [132.0, 852.0], [131.0, 864.0], [130.0, 864.0], [129.0, 834.0], [128.0, 836.0], [143.0, 2033.0], [142.0, 2008.0], [141.0, 2005.0], [140.0, 2000.5], [139.0, 1829.4285714285713], [138.0, 1589.0], [137.0, 1181.0], [136.0, 1179.0], [151.0, 2144.0], [150.0, 2146.0], [149.0, 2128.8888888888887], [148.0, 2103.0], [147.0, 2124.6666666666665], [145.0, 2087.0], [144.0, 2056.5], [159.0, 2180.5], [158.0, 2183.0], [157.0, 2172.0], [156.0, 2150.0], [155.0, 2153.0], [154.0, 2147.4], [153.0, 2144.0], [152.0, 2141.6], [167.0, 2193.0], [166.0, 2196.0], [165.0, 2197.0], [164.0, 2198.5], [163.0, 2189.0], [162.0, 2190.0], [161.0, 2186.0], [160.0, 2183.6666666666665], [175.0, 2290.25], [173.0, 2267.8], [172.0, 2216.0], [171.0, 2218.0], [170.0, 2216.3333333333335], [169.0, 2208.0], [168.0, 2206.3333333333335], [183.0, 2315.5], [182.0, 2316.5], [181.0, 2320.3333333333335], [180.0, 2307.8], [179.0, 2298.5], [177.0, 2296.5], [176.0, 2298.0], [191.0, 2343.0], [190.0, 2341.5], [189.0, 2346.2], [188.0, 2333.0], [187.0, 2329.0], [186.0, 2332.6666666666665], [184.0, 2326.0], [199.0, 2369.1111111111113], [198.0, 2361.0], [197.0, 2358.75], [196.0, 2362.0], [195.0, 2359.0], [194.0, 2339.4], [193.0, 2342.4], [206.0, 2388.6], [205.0, 2389.0], [204.0, 2385.0769230769233], [201.0, 2388.833333333333], [200.0, 2377.0], [214.0, 2402.0], [213.0, 2403.0], [212.0, 2398.2], [211.0, 2402.0], [210.0, 2395.0], [209.0, 2398.5], [208.0, 2399.3333333333335], [223.0, 2509.0], [222.0, 2507.0], [221.0, 2517.0], [220.0, 2487.0], [219.0, 2411.0], [218.0, 2406.25], [231.0, 2531.0], [230.0, 2530.0], [229.0, 2528.0], [228.0, 2529.0], [227.0, 2523.0], [226.0, 2524.0], [225.0, 2531.0], [224.0, 2515.0], [239.0, 2537.0], [238.0, 2530.0], [237.0, 2529.0], [236.0, 2527.0], [235.0, 2526.0], [234.0, 2527.0], [233.0, 2528.0], [247.0, 2512.0], [246.0, 2516.0], [245.0, 2519.0], [243.0, 2525.0], [241.0, 2525.0], [240.0, 2528.0], [255.0, 2527.0], [253.0, 2516.0], [252.0, 2517.0], [251.0, 2519.0], [250.0, 2511.0], [249.0, 2513.0], [248.0, 2517.0], [270.0, 2502.0], [271.0, 2497.3333333333335], [269.0, 2508.0], [268.0, 2505.0], [267.0, 2505.0], [266.0, 2508.0], [265.0, 2511.0], [264.0, 2502.0], [263.0, 2517.0], [258.0, 2522.0], [257.0, 2512.5], [262.0, 2516.0], [261.0, 2518.0], [260.0, 2514.0], [286.0, 2512.0], [287.0, 2515.0], [285.0, 2508.0], [284.0, 2515.0], [283.0, 2513.0], [282.0, 2507.0], [281.0, 2513.0], [280.0, 2523.0], [279.0, 2495.0], [273.0, 2493.0], [272.0, 2493.0], [275.0, 2491.0], [274.0, 2491.0], [277.0, 2497.5], [276.0, 2494.0], [302.0, 2500.0], [303.0, 2494.0], [301.0, 2497.6666666666665], [300.0, 2498.0], [299.0, 2499.0], [298.0, 2497.0], [297.0, 2497.0], [296.0, 2496.0], [295.0, 2508.5], [289.0, 2511.0], [288.0, 2520.0], [291.0, 2504.0], [290.0, 2510.0], [293.0, 2502.0], [292.0, 2504.0], [318.0, 2527.0], [319.0, 2525.0], [317.0, 2520.0], [316.0, 2519.0], [315.0, 2512.0], [314.0, 2514.0], [313.0, 2509.0], [312.0, 2511.0], [311.0, 2506.5], [305.0, 2498.0], [304.0, 2500.0], [307.0, 2501.0], [306.0, 2499.0], [310.0, 2498.0], [309.0, 2500.0], [308.0, 2500.0], [334.0, 2534.0], [335.0, 2530.0], [333.0, 2536.0], [332.0, 2539.0], [331.0, 2536.0], [330.0, 2542.0], [329.0, 2537.0], [328.0, 2537.0], [327.0, 2536.0], [321.0, 2529.0], [320.0, 2532.0], [323.0, 2540.0], [322.0, 2535.0], [326.0, 2544.0], [324.0, 2536.0], [339.0, 2540.0], [350.0, 2555.5], [351.0, 2544.0], [348.0, 2553.0], [338.0, 2553.0], [337.0, 2552.0], [336.0, 2529.0], [346.0, 2551.0], [344.0, 2538.0], [343.0, 2544.0], [342.0, 2540.0], [341.0, 2547.0], [340.0, 2549.0], [366.0, 2554.0], [367.0, 2557.0], [365.0, 2563.0], [364.0, 2544.0], [363.0, 2549.0], [362.0, 2550.0], [361.0, 2546.0], [360.0, 2550.0], [359.0, 2552.0], [353.0, 2540.0], [352.0, 2541.0], [355.0, 2540.0], [354.0, 2535.0], [358.0, 2537.0], [357.0, 2539.0], [371.0, 2554.0], [382.0, 2565.0], [383.0, 2560.0], [380.0, 2557.0], [379.0, 2560.25], [375.0, 2557.0], [374.0, 2561.0], [373.0, 2559.0], [372.0, 2557.0], [370.0, 2558.5], [368.0, 2548.0], [397.0, 2560.0], [399.0, 2560.5], [396.0, 2559.0], [387.0, 2567.0], [386.0, 2562.0], [385.0, 2564.0], [394.0, 2561.0], [393.0, 2569.0], [392.0, 2567.0], [391.0, 2565.0], [390.0, 2566.5], [388.0, 2562.0], [414.0, 2565.0], [415.0, 2563.0], [413.0, 2563.0], [412.0, 2565.0], [410.0, 2563.0], [409.0, 2565.0], [408.0, 2572.0], [407.0, 2567.0], [403.0, 2572.0], [400.0, 2580.0], [405.0, 2569.0], [404.0, 2573.0], [431.0, 2464.0], [430.0, 2464.25], [419.0, 2570.6666666666665], [416.0, 2577.0], [426.0, 2466.0], [425.0, 2498.0], [424.0, 2483.0], [423.0, 2496.0], [422.0, 2532.0], [421.0, 2551.0], [420.0, 2555.0], [445.0, 2436.0], [446.0, 2432.0], [444.0, 2438.0], [433.0, 2459.0], [432.0, 2455.0], [443.0, 2447.0], [442.0, 2432.0], [441.0, 2436.0], [440.0, 2449.5], [438.0, 2445.0], [437.0, 2446.0], [436.0, 2451.6666666666665], [460.0, 2438.0], [462.0, 2433.0], [463.0, 2414.0], [461.0, 2443.0], [459.0, 2444.0], [457.0, 2430.0], [455.0, 2432.0], [449.0, 2439.0], [448.0, 2430.0], [451.0, 2448.0], [450.0, 2417.0], [454.0, 2448.0], [452.0, 2426.0], [478.0, 2411.0], [479.0, 2416.0], [477.0, 2421.3333333333335], [466.0, 2415.5], [464.0, 2417.0], [474.0, 2409.0], [473.0, 2407.0], [472.0, 2411.0], [471.0, 2424.0], [470.0, 2417.0], [469.0, 2425.0], [468.0, 2412.6666666666665], [494.0, 2438.0], [492.0, 2435.0], [491.0, 2437.0], [490.0, 2430.0], [489.0, 2423.0], [488.0, 2426.0], [486.0, 2432.0], [484.0, 2432.5], [482.0, 2417.0], [481.0, 2416.0], [480.0, 2422.0], [499.0, 2437.0], [510.0, 2472.5], [508.0, 2451.0], [507.0, 2461.5], [506.0, 2447.0], [505.0, 2448.0], [503.0, 2441.0], [501.0, 2441.0], [497.0, 2442.0], [496.0, 2445.0], [530.0, 2503.0], [542.0, 2516.0], [543.0, 2513.0], [529.0, 2504.5], [528.0, 2503.0], [538.0, 2521.0], [537.0, 2508.0], [536.0, 2510.0], [518.0, 2484.0], [517.0, 2481.5], [515.0, 2480.6666666666665], [512.0, 2484.5], [526.0, 2500.0], [525.0, 2498.0], [523.0, 2505.0], [522.0, 2493.5], [520.0, 2494.0], [535.0, 2507.0], [534.0, 2517.3333333333335], [531.0, 2510.0], [568.0, 2507.5], [573.0, 2500.0], [574.0, 2500.0], [560.0, 2510.0], [563.0, 2507.0], [561.0, 2505.0], [572.0, 2503.0], [571.0, 2505.3333333333335], [569.0, 2507.0], [559.0, 2511.0], [546.0, 2520.0], [544.0, 2512.0], [548.0, 2519.0], [547.0, 2504.0], [550.0, 2511.0], [549.0, 2511.0], [558.0, 2513.0], [557.0, 2514.0], [556.0, 2516.6666666666665], [553.0, 2512.0], [552.0, 2518.5], [567.0, 2511.0], [566.0, 2510.0], [565.0, 2516.0], [564.0, 2515.0], [605.0, 2527.0], [607.0, 2528.0], [603.0, 2525.0], [602.0, 2537.75], [600.0, 2544.6666666666665], [583.0, 2498.0], [582.0, 2502.75], [579.0, 2509.0], [578.0, 2504.0], [577.0, 2505.6666666666665], [576.0, 2494.5], [591.0, 2520.5], [589.0, 2518.0], [588.0, 2523.0], [586.0, 2518.5], [584.0, 2495.5], [597.0, 2536.0], [596.0, 2534.3333333333335], [593.0, 2514.0], [592.0, 2517.5], [637.0, 2538.0], [639.0, 2539.3333333333335], [625.0, 2515.0], [624.0, 2532.0], [636.0, 2543.0], [635.0, 2536.0], [634.0, 2537.0], [633.0, 2539.5], [632.0, 2547.5], [615.0, 2517.0], [612.0, 2522.6666666666665], [621.0, 2525.5], [620.0, 2535.5], [618.0, 2522.6666666666665], [630.0, 2526.0], [629.0, 2525.75], [665.0, 2553.3333333333335], [669.0, 2552.0], [671.0, 2566.5], [657.0, 2549.3333333333335], [656.0, 2554.2666666666664], [668.0, 2562.0], [667.0, 2555.0], [666.0, 2572.0], [655.0, 2555.75], [641.0, 2538.0], [644.0, 2551.25], [643.0, 2546.0], [646.0, 2536.0], [645.0, 2543.6666666666665], [654.0, 2538.5], [653.0, 2544.5], [651.0, 2545.6], [650.0, 2540.0], [649.0, 2542.0], [648.0, 2540.0], [662.0, 2546.0], [661.0, 2557.0], [660.0, 2553.2], [658.0, 2549.2], [700.0, 2653.6666666666665], [703.0, 2658.0], [688.0, 2568.625], [691.0, 2570.8], [690.0, 2572.3846153846152], [693.0, 2576.5], [692.0, 2575.6666666666665], [702.0, 2649.0], [701.0, 2648.6666666666665], [699.0, 2651.1147540983607], [698.0, 2638.5], [697.0, 2663.0], [696.0, 2651.428571428571], [687.0, 2575.0], [673.0, 2551.0], [672.0, 2552.0], [677.0, 2563.3333333333335], [675.0, 2552.5], [679.0, 2563.0], [678.0, 2550.0], [686.0, 2565.6666666666665], [685.0, 2565.0], [684.0, 2561.0], [683.0, 2562.0], [682.0, 2560.0], [681.0, 2554.0], [680.0, 2558.0], [695.0, 2597.0], [694.0, 2584.5], [734.0, 2687.0], [735.0, 2686.0], [733.0, 2685.5], [731.0, 2685.0], [730.0, 2688.0], [728.0, 2673.5], [719.0, 2671.5], [711.0, 2671.0], [717.0, 2660.0], [716.0, 2665.0], [715.0, 2666.0], [714.0, 2667.0], [713.0, 2669.0], [712.0, 2674.0], [726.0, 2682.0], [724.0, 2691.0], [723.0, 2671.0], [720.0, 2671.0], [765.0, 2690.0], [766.0, 2695.0], [752.0, 2679.0], [764.0, 2702.0], [763.0, 2689.0], [762.0, 2686.0], [761.0, 2697.0], [751.0, 2689.0], [738.0, 2682.5], [736.0, 2685.0], [741.0, 2688.5], [739.0, 2683.0], [743.0, 2680.0], [742.0, 2678.0], [750.0, 2688.714285714286], [744.0, 2685.0], [759.0, 2690.0], [757.0, 2686.0], [755.0, 2679.5], [753.0, 2684.0], [796.0, 2936.9999999999995], [799.0, 2943.8], [785.0, 2860.0], [787.0, 2873.5], [786.0, 2862.6666666666665], [798.0, 2938.0], [797.0, 2935.625], [795.0, 2927.75], [794.0, 2919.714285714286], [793.0, 2903.2857142857147], [792.0, 2897.3333333333335], [783.0, 2875.75], [768.0, 2707.3333333333335], [771.0, 2709.5], [769.0, 2705.0], [773.0, 2715.5555555555557], [772.0, 2700.0], [775.0, 2724.3333333333335], [774.0, 2712.0], [781.0, 2864.0], [780.0, 2863.0], [779.0, 2857.75], [778.0, 2852.294117647059], [777.0, 2781.8139534883717], [776.0, 2743.2500000000005], [791.0, 2886.5], [790.0, 2885.0], [789.0, 2880.875], [788.0, 2869.0], [800.0, 4459.2065903709545]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[730.4514062500001, 4017.791874999988]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 800.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 16680.0, "minX": 1.69669284E12, "maxY": 353824.6666666667, "series": [{"data": [[1.69669284E12, 353824.6666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69669284E12, 16680.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69669284E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4017.791874999988, "minX": 1.69669284E12, "maxY": 4017.791874999988, "series": [{"data": [[1.69669284E12, 4017.791874999988]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69669284E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4017.4335937499955, "minX": 1.69669284E12, "maxY": 4017.4335937499955, "series": [{"data": [[1.69669284E12, 4017.4335937499955]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69669284E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 888.2315625000041, "minX": 1.69669284E12, "maxY": 888.2315625000041, "series": [{"data": [[1.69669284E12, 888.2315625000041]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69669284E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 177.0, "minX": 1.69669284E12, "maxY": 19454.0, "series": [{"data": [[1.69669284E12, 19454.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69669284E12, 177.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69669284E12, 9334.900000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69669284E12, 11806.779999999995]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69669284E12, 3266.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.69669284E12, 10463.849999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69669284E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 759.0, "minX": 84.0, "maxY": 11058.0, "series": [{"data": [[84.0, 8534.0], [145.0, 759.0], [174.0, 3246.0], [197.0, 3519.0], [203.0, 9417.0], [205.0, 3544.0], [214.0, 2670.5], [209.0, 3162.0], [208.0, 3208.5], [220.0, 3066.0], [221.0, 3246.0], [223.0, 3343.0], [222.0, 3488.5], [227.0, 2320.0], [246.0, 3613.5], [247.0, 3557.0], [243.0, 2525.0], [251.0, 3359.0], [250.0, 3292.0], [264.0, 3102.5], [283.0, 10222.0], [272.0, 3222.5], [294.0, 3392.0], [302.0, 3083.0], [320.0, 11058.0], [322.0, 2696.5], [354.0, 2532.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 354.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 759.0, "minX": 84.0, "maxY": 11058.0, "series": [{"data": [[84.0, 8534.0], [145.0, 759.0], [174.0, 3246.0], [197.0, 3519.0], [203.0, 9417.0], [205.0, 3544.0], [214.0, 2670.5], [209.0, 3162.0], [208.0, 3208.5], [220.0, 3066.0], [221.0, 3246.0], [223.0, 3343.0], [222.0, 3488.5], [227.0, 2315.0], [246.0, 3613.5], [247.0, 3557.0], [243.0, 2523.0], [251.0, 3359.0], [250.0, 3292.0], [264.0, 3102.5], [283.0, 10222.0], [272.0, 3222.5], [294.0, 3392.0], [302.0, 3083.0], [320.0, 11058.0], [322.0, 2695.5], [354.0, 2532.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 354.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 106.66666666666667, "minX": 1.69669284E12, "maxY": 106.66666666666667, "series": [{"data": [[1.69669284E12, 106.66666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69669284E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 106.66666666666667, "minX": 1.69669284E12, "maxY": 106.66666666666667, "series": [{"data": [[1.69669284E12, 106.66666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69669284E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 106.66666666666667, "minX": 1.69669284E12, "maxY": 106.66666666666667, "series": [{"data": [[1.69669284E12, 106.66666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69669284E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 106.66666666666667, "minX": 1.69669284E12, "maxY": 106.66666666666667, "series": [{"data": [[1.69669284E12, 106.66666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69669284E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

