/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 195.0, "minX": 0.0, "maxY": 26050.0, "series": [{"data": [[0.0, 195.0], [0.1, 233.0], [0.2, 275.0], [0.3, 304.0], [0.4, 312.0], [0.5, 326.0], [0.6, 349.0], [0.7, 381.0], [0.8, 384.0], [0.9, 528.0], [1.0, 839.0], [1.1, 1118.0], [1.2, 1241.0], [1.3, 1320.0], [1.4, 1409.0], [1.5, 1421.0], [1.6, 1424.0], [1.7, 1432.0], [1.8, 1444.0], [1.9, 1497.0], [2.0, 1508.0], [2.1, 1511.0], [2.2, 1513.0], [2.3, 1515.0], [2.4, 1517.0], [2.5, 1518.0], [2.6, 1520.0], [2.7, 1523.0], [2.8, 1524.0], [2.9, 1533.0], [3.0, 1556.0], [3.1, 1570.0], [3.2, 1571.0], [3.3, 1572.0], [3.4, 1574.0], [3.5, 1576.0], [3.6, 1578.0], [3.7, 1580.0], [3.8, 1582.0], [3.9, 1584.0], [4.0, 1594.0], [4.1, 1603.0], [4.2, 1622.0], [4.3, 1628.0], [4.4, 1635.0], [4.5, 1636.0], [4.6, 1639.0], [4.7, 1640.0], [4.8, 1642.0], [4.9, 1642.0], [5.0, 1643.0], [5.1, 1644.0], [5.2, 1645.0], [5.3, 1646.0], [5.4, 1647.0], [5.5, 1648.0], [5.6, 1649.0], [5.7, 1651.0], [5.8, 1652.0], [5.9, 1654.0], [6.0, 1655.0], [6.1, 1657.0], [6.2, 1658.0], [6.3, 1659.0], [6.4, 1660.0], [6.5, 1661.0], [6.6, 1662.0], [6.7, 1664.0], [6.8, 1665.0], [6.9, 1666.0], [7.0, 1668.0], [7.1, 1669.0], [7.2, 1671.0], [7.3, 1675.0], [7.4, 1677.0], [7.5, 1712.0], [7.6, 1740.0], [7.7, 1769.0], [7.8, 1778.0], [7.9, 1792.0], [8.0, 1812.0], [8.1, 1824.0], [8.2, 1829.0], [8.3, 1831.0], [8.4, 1840.0], [8.5, 1847.0], [8.6, 1872.0], [8.7, 1880.0], [8.8, 1887.0], [8.9, 1976.0], [9.0, 1992.0], [9.1, 1995.0], [9.2, 1999.0], [9.3, 2003.0], [9.4, 2005.0], [9.5, 2008.0], [9.6, 2014.0], [9.7, 2017.0], [9.8, 2018.0], [9.9, 2022.0], [10.0, 2030.0], [10.1, 2031.0], [10.2, 2034.0], [10.3, 2038.0], [10.4, 2041.0], [10.5, 2051.0], [10.6, 2070.0], [10.7, 2081.0], [10.8, 2094.0], [10.9, 2110.0], [11.0, 2123.0], [11.1, 2135.0], [11.2, 2148.0], [11.3, 2156.0], [11.4, 2167.0], [11.5, 2184.0], [11.6, 2196.0], [11.7, 2202.0], [11.8, 2214.0], [11.9, 2228.0], [12.0, 2232.0], [12.1, 2234.0], [12.2, 2236.0], [12.3, 2237.0], [12.4, 2240.0], [12.5, 2242.0], [12.6, 2244.0], [12.7, 2247.0], [12.8, 2249.0], [12.9, 2253.0], [13.0, 2255.0], [13.1, 2257.0], [13.2, 2260.0], [13.3, 2263.0], [13.4, 2266.0], [13.5, 2267.0], [13.6, 2268.0], [13.7, 2270.0], [13.8, 2270.0], [13.9, 2271.0], [14.0, 2272.0], [14.1, 2272.0], [14.2, 2273.0], [14.3, 2274.0], [14.4, 2274.0], [14.5, 2275.0], [14.6, 2276.0], [14.7, 2277.0], [14.8, 2277.0], [14.9, 2278.0], [15.0, 2279.0], [15.1, 2280.0], [15.2, 2281.0], [15.3, 2281.0], [15.4, 2282.0], [15.5, 2283.0], [15.6, 2284.0], [15.7, 2284.0], [15.8, 2285.0], [15.9, 2285.0], [16.0, 2286.0], [16.1, 2287.0], [16.2, 2289.0], [16.3, 2289.0], [16.4, 2291.0], [16.5, 2293.0], [16.6, 2293.0], [16.7, 2294.0], [16.8, 2296.0], [16.9, 2297.0], [17.0, 2298.0], [17.1, 2298.0], [17.2, 2299.0], [17.3, 2300.0], [17.4, 2301.0], [17.5, 2302.0], [17.6, 2303.0], [17.7, 2304.0], [17.8, 2304.0], [17.9, 2307.0], [18.0, 2309.0], [18.1, 2309.0], [18.2, 2311.0], [18.3, 2312.0], [18.4, 2313.0], [18.5, 2314.0], [18.6, 2315.0], [18.7, 2316.0], [18.8, 2317.0], [18.9, 2318.0], [19.0, 2321.0], [19.1, 2325.0], [19.2, 2329.0], [19.3, 2331.0], [19.4, 2332.0], [19.5, 2334.0], [19.6, 2335.0], [19.7, 2336.0], [19.8, 2337.0], [19.9, 2338.0], [20.0, 2340.0], [20.1, 2341.0], [20.2, 2343.0], [20.3, 2347.0], [20.4, 2349.0], [20.5, 2350.0], [20.6, 2353.0], [20.7, 2355.0], [20.8, 2356.0], [20.9, 2359.0], [21.0, 2361.0], [21.1, 2363.0], [21.2, 2367.0], [21.3, 2367.0], [21.4, 2370.0], [21.5, 2374.0], [21.6, 2375.0], [21.7, 2377.0], [21.8, 2380.0], [21.9, 2383.0], [22.0, 2385.0], [22.1, 2387.0], [22.2, 2395.0], [22.3, 2397.0], [22.4, 2402.0], [22.5, 2405.0], [22.6, 2411.0], [22.7, 2414.0], [22.8, 2417.0], [22.9, 2419.0], [23.0, 2423.0], [23.1, 2426.0], [23.2, 2428.0], [23.3, 2430.0], [23.4, 2434.0], [23.5, 2438.0], [23.6, 2441.0], [23.7, 2442.0], [23.8, 2447.0], [23.9, 2451.0], [24.0, 2455.0], [24.1, 2459.0], [24.2, 2460.0], [24.3, 2462.0], [24.4, 2463.0], [24.5, 2465.0], [24.6, 2467.0], [24.7, 2469.0], [24.8, 2472.0], [24.9, 2474.0], [25.0, 2477.0], [25.1, 2489.0], [25.2, 2498.0], [25.3, 2500.0], [25.4, 2508.0], [25.5, 2509.0], [25.6, 2511.0], [25.7, 2513.0], [25.8, 2515.0], [25.9, 2517.0], [26.0, 2520.0], [26.1, 2524.0], [26.2, 2525.0], [26.3, 2528.0], [26.4, 2529.0], [26.5, 2533.0], [26.6, 2534.0], [26.7, 2537.0], [26.8, 2539.0], [26.9, 2539.0], [27.0, 2542.0], [27.1, 2545.0], [27.2, 2547.0], [27.3, 2547.0], [27.4, 2548.0], [27.5, 2548.0], [27.6, 2549.0], [27.7, 2550.0], [27.8, 2551.0], [27.9, 2552.0], [28.0, 2553.0], [28.1, 2554.0], [28.2, 2558.0], [28.3, 2560.0], [28.4, 2564.0], [28.5, 2572.0], [28.6, 2574.0], [28.7, 2585.0], [28.8, 2590.0], [28.9, 2594.0], [29.0, 2595.0], [29.1, 2598.0], [29.2, 2599.0], [29.3, 2601.0], [29.4, 2603.0], [29.5, 2605.0], [29.6, 2606.0], [29.7, 2609.0], [29.8, 2612.0], [29.9, 2615.0], [30.0, 2617.0], [30.1, 2620.0], [30.2, 2621.0], [30.3, 2621.0], [30.4, 2622.0], [30.5, 2624.0], [30.6, 2625.0], [30.7, 2626.0], [30.8, 2626.0], [30.9, 2627.0], [31.0, 2628.0], [31.1, 2629.0], [31.2, 2630.0], [31.3, 2630.0], [31.4, 2632.0], [31.5, 2633.0], [31.6, 2634.0], [31.7, 2635.0], [31.8, 2636.0], [31.9, 2640.0], [32.0, 2643.0], [32.1, 2645.0], [32.2, 2647.0], [32.3, 2650.0], [32.4, 2651.0], [32.5, 2653.0], [32.6, 2654.0], [32.7, 2657.0], [32.8, 2658.0], [32.9, 2660.0], [33.0, 2661.0], [33.1, 2662.0], [33.2, 2666.0], [33.3, 2667.0], [33.4, 2669.0], [33.5, 2671.0], [33.6, 2675.0], [33.7, 2679.0], [33.8, 2680.0], [33.9, 2681.0], [34.0, 2682.0], [34.1, 2683.0], [34.2, 2684.0], [34.3, 2685.0], [34.4, 2686.0], [34.5, 2688.0], [34.6, 2688.0], [34.7, 2688.0], [34.8, 2689.0], [34.9, 2690.0], [35.0, 2692.0], [35.1, 2693.0], [35.2, 2695.0], [35.3, 2696.0], [35.4, 2698.0], [35.5, 2701.0], [35.6, 2701.0], [35.7, 2703.0], [35.8, 2704.0], [35.9, 2705.0], [36.0, 2706.0], [36.1, 2706.0], [36.2, 2707.0], [36.3, 2707.0], [36.4, 2709.0], [36.5, 2711.0], [36.6, 2713.0], [36.7, 2714.0], [36.8, 2719.0], [36.9, 2721.0], [37.0, 2723.0], [37.1, 2725.0], [37.2, 2728.0], [37.3, 2729.0], [37.4, 2730.0], [37.5, 2731.0], [37.6, 2733.0], [37.7, 2734.0], [37.8, 2734.0], [37.9, 2735.0], [38.0, 2736.0], [38.1, 2736.0], [38.2, 2737.0], [38.3, 2739.0], [38.4, 2739.0], [38.5, 2741.0], [38.6, 2742.0], [38.7, 2743.0], [38.8, 2744.0], [38.9, 2746.0], [39.0, 2747.0], [39.1, 2748.0], [39.2, 2749.0], [39.3, 2750.0], [39.4, 2751.0], [39.5, 2751.0], [39.6, 2752.0], [39.7, 2753.0], [39.8, 2754.0], [39.9, 2754.0], [40.0, 2755.0], [40.1, 2756.0], [40.2, 2757.0], [40.3, 2758.0], [40.4, 2758.0], [40.5, 2759.0], [40.6, 2759.0], [40.7, 2761.0], [40.8, 2762.0], [40.9, 2763.0], [41.0, 2764.0], [41.1, 2764.0], [41.2, 2765.0], [41.3, 2766.0], [41.4, 2767.0], [41.5, 2768.0], [41.6, 2769.0], [41.7, 2771.0], [41.8, 2771.0], [41.9, 2772.0], [42.0, 2774.0], [42.1, 2775.0], [42.2, 2777.0], [42.3, 2777.0], [42.4, 2778.0], [42.5, 2780.0], [42.6, 2781.0], [42.7, 2783.0], [42.8, 2783.0], [42.9, 2785.0], [43.0, 2786.0], [43.1, 2787.0], [43.2, 2788.0], [43.3, 2790.0], [43.4, 2791.0], [43.5, 2792.0], [43.6, 2793.0], [43.7, 2794.0], [43.8, 2794.0], [43.9, 2795.0], [44.0, 2796.0], [44.1, 2797.0], [44.2, 2797.0], [44.3, 2798.0], [44.4, 2798.0], [44.5, 2799.0], [44.6, 2799.0], [44.7, 2800.0], [44.8, 2800.0], [44.9, 2801.0], [45.0, 2801.0], [45.1, 2801.0], [45.2, 2802.0], [45.3, 2802.0], [45.4, 2802.0], [45.5, 2803.0], [45.6, 2803.0], [45.7, 2805.0], [45.8, 2805.0], [45.9, 2806.0], [46.0, 2807.0], [46.1, 2808.0], [46.2, 2809.0], [46.3, 2812.0], [46.4, 2814.0], [46.5, 2815.0], [46.6, 2817.0], [46.7, 2818.0], [46.8, 2820.0], [46.9, 2822.0], [47.0, 2823.0], [47.1, 2824.0], [47.2, 2826.0], [47.3, 2827.0], [47.4, 2827.0], [47.5, 2828.0], [47.6, 2828.0], [47.7, 2829.0], [47.8, 2830.0], [47.9, 2831.0], [48.0, 2836.0], [48.1, 2838.0], [48.2, 2839.0], [48.3, 2840.0], [48.4, 2841.0], [48.5, 2842.0], [48.6, 2842.0], [48.7, 2843.0], [48.8, 2844.0], [48.9, 2844.0], [49.0, 2845.0], [49.1, 2846.0], [49.2, 2846.0], [49.3, 2847.0], [49.4, 2849.0], [49.5, 2849.0], [49.6, 2851.0], [49.7, 2852.0], [49.8, 2853.0], [49.9, 2855.0], [50.0, 2857.0], [50.1, 2859.0], [50.2, 2861.0], [50.3, 2864.0], [50.4, 2867.0], [50.5, 2868.0], [50.6, 2871.0], [50.7, 2873.0], [50.8, 2875.0], [50.9, 2875.0], [51.0, 2876.0], [51.1, 2878.0], [51.2, 2878.0], [51.3, 2880.0], [51.4, 2882.0], [51.5, 2883.0], [51.6, 2884.0], [51.7, 2886.0], [51.8, 2886.0], [51.9, 2887.0], [52.0, 2888.0], [52.1, 2889.0], [52.2, 2890.0], [52.3, 2891.0], [52.4, 2891.0], [52.5, 2893.0], [52.6, 2893.0], [52.7, 2894.0], [52.8, 2895.0], [52.9, 2895.0], [53.0, 2896.0], [53.1, 2897.0], [53.2, 2898.0], [53.3, 2898.0], [53.4, 2898.0], [53.5, 2899.0], [53.6, 2900.0], [53.7, 2900.0], [53.8, 2901.0], [53.9, 2902.0], [54.0, 2902.0], [54.1, 2903.0], [54.2, 2905.0], [54.3, 2905.0], [54.4, 2907.0], [54.5, 2908.0], [54.6, 2909.0], [54.7, 2911.0], [54.8, 2912.0], [54.9, 2913.0], [55.0, 2915.0], [55.1, 2916.0], [55.2, 2919.0], [55.3, 2921.0], [55.4, 2922.0], [55.5, 2923.0], [55.6, 2925.0], [55.7, 2927.0], [55.8, 2928.0], [55.9, 2929.0], [56.0, 2933.0], [56.1, 2936.0], [56.2, 2938.0], [56.3, 2939.0], [56.4, 2941.0], [56.5, 2942.0], [56.6, 2943.0], [56.7, 2944.0], [56.8, 2945.0], [56.9, 2945.0], [57.0, 2947.0], [57.1, 2948.0], [57.2, 2948.0], [57.3, 2949.0], [57.4, 2950.0], [57.5, 2950.0], [57.6, 2951.0], [57.7, 2952.0], [57.8, 2953.0], [57.9, 2956.0], [58.0, 2957.0], [58.1, 2959.0], [58.2, 2961.0], [58.3, 2962.0], [58.4, 2962.0], [58.5, 2963.0], [58.6, 2964.0], [58.7, 2966.0], [58.8, 2967.0], [58.9, 2967.0], [59.0, 2968.0], [59.1, 2970.0], [59.2, 2971.0], [59.3, 2972.0], [59.4, 2972.0], [59.5, 2972.0], [59.6, 2973.0], [59.7, 2973.0], [59.8, 2974.0], [59.9, 2974.0], [60.0, 2976.0], [60.1, 2977.0], [60.2, 2977.0], [60.3, 2978.0], [60.4, 2979.0], [60.5, 2981.0], [60.6, 2982.0], [60.7, 2983.0], [60.8, 2983.0], [60.9, 2984.0], [61.0, 2985.0], [61.1, 2985.0], [61.2, 2985.0], [61.3, 2985.0], [61.4, 2986.0], [61.5, 2987.0], [61.6, 2987.0], [61.7, 2988.0], [61.8, 2989.0], [61.9, 2989.0], [62.0, 2990.0], [62.1, 2991.0], [62.2, 2992.0], [62.3, 2992.0], [62.4, 2994.0], [62.5, 2994.0], [62.6, 2994.0], [62.7, 2995.0], [62.8, 2997.0], [62.9, 2998.0], [63.0, 3000.0], [63.1, 3000.0], [63.2, 3001.0], [63.3, 3002.0], [63.4, 3003.0], [63.5, 3004.0], [63.6, 3006.0], [63.7, 3008.0], [63.8, 3010.0], [63.9, 3012.0], [64.0, 3014.0], [64.1, 3016.0], [64.2, 3019.0], [64.3, 3021.0], [64.4, 3022.0], [64.5, 3023.0], [64.6, 3026.0], [64.7, 3028.0], [64.8, 3030.0], [64.9, 3031.0], [65.0, 3034.0], [65.1, 3036.0], [65.2, 3037.0], [65.3, 3041.0], [65.4, 3042.0], [65.5, 3043.0], [65.6, 3044.0], [65.7, 3046.0], [65.8, 3047.0], [65.9, 3048.0], [66.0, 3049.0], [66.1, 3051.0], [66.2, 3053.0], [66.3, 3055.0], [66.4, 3057.0], [66.5, 3058.0], [66.6, 3059.0], [66.7, 3062.0], [66.8, 3064.0], [66.9, 3064.0], [67.0, 3065.0], [67.1, 3067.0], [67.2, 3067.0], [67.3, 3068.0], [67.4, 3068.0], [67.5, 3070.0], [67.6, 3071.0], [67.7, 3071.0], [67.8, 3072.0], [67.9, 3073.0], [68.0, 3074.0], [68.1, 3075.0], [68.2, 3076.0], [68.3, 3077.0], [68.4, 3078.0], [68.5, 3081.0], [68.6, 3082.0], [68.7, 3084.0], [68.8, 3087.0], [68.9, 3089.0], [69.0, 3091.0], [69.1, 3095.0], [69.2, 3096.0], [69.3, 3099.0], [69.4, 3103.0], [69.5, 3105.0], [69.6, 3107.0], [69.7, 3110.0], [69.8, 3113.0], [69.9, 3115.0], [70.0, 3116.0], [70.1, 3117.0], [70.2, 3119.0], [70.3, 3124.0], [70.4, 3127.0], [70.5, 3129.0], [70.6, 3132.0], [70.7, 3133.0], [70.8, 3137.0], [70.9, 3140.0], [71.0, 3143.0], [71.1, 3145.0], [71.2, 3146.0], [71.3, 3147.0], [71.4, 3148.0], [71.5, 3153.0], [71.6, 3157.0], [71.7, 3158.0], [71.8, 3160.0], [71.9, 3164.0], [72.0, 3167.0], [72.1, 3167.0], [72.2, 3168.0], [72.3, 3171.0], [72.4, 3172.0], [72.5, 3176.0], [72.6, 3179.0], [72.7, 3181.0], [72.8, 3184.0], [72.9, 3186.0], [73.0, 3190.0], [73.1, 3192.0], [73.2, 3195.0], [73.3, 3198.0], [73.4, 3202.0], [73.5, 3204.0], [73.6, 3207.0], [73.7, 3210.0], [73.8, 3212.0], [73.9, 3213.0], [74.0, 3215.0], [74.1, 3216.0], [74.2, 3217.0], [74.3, 3221.0], [74.4, 3222.0], [74.5, 3224.0], [74.6, 3225.0], [74.7, 3226.0], [74.8, 3228.0], [74.9, 3229.0], [75.0, 3231.0], [75.1, 3233.0], [75.2, 3236.0], [75.3, 3239.0], [75.4, 3242.0], [75.5, 3245.0], [75.6, 3247.0], [75.7, 3251.0], [75.8, 3251.0], [75.9, 3256.0], [76.0, 3257.0], [76.1, 3257.0], [76.2, 3258.0], [76.3, 3260.0], [76.4, 3261.0], [76.5, 3262.0], [76.6, 3263.0], [76.7, 3265.0], [76.8, 3267.0], [76.9, 3270.0], [77.0, 3270.0], [77.1, 3272.0], [77.2, 3275.0], [77.3, 3277.0], [77.4, 3280.0], [77.5, 3282.0], [77.6, 3284.0], [77.7, 3285.0], [77.8, 3287.0], [77.9, 3289.0], [78.0, 3290.0], [78.1, 3291.0], [78.2, 3292.0], [78.3, 3292.0], [78.4, 3293.0], [78.5, 3295.0], [78.6, 3296.0], [78.7, 3296.0], [78.8, 3297.0], [78.9, 3298.0], [79.0, 3298.0], [79.1, 3299.0], [79.2, 3300.0], [79.3, 3301.0], [79.4, 3302.0], [79.5, 3302.0], [79.6, 3303.0], [79.7, 3304.0], [79.8, 3305.0], [79.9, 3305.0], [80.0, 3305.0], [80.1, 3306.0], [80.2, 3307.0], [80.3, 3308.0], [80.4, 3309.0], [80.5, 3310.0], [80.6, 3311.0], [80.7, 3312.0], [80.8, 3313.0], [80.9, 3314.0], [81.0, 3315.0], [81.1, 3317.0], [81.2, 3320.0], [81.3, 3321.0], [81.4, 3338.0], [81.5, 3348.0], [81.6, 3356.0], [81.7, 3361.0], [81.8, 3372.0], [81.9, 3385.0], [82.0, 3389.0], [82.1, 3399.0], [82.2, 3417.0], [82.3, 3426.0], [82.4, 3427.0], [82.5, 3433.0], [82.6, 3439.0], [82.7, 3442.0], [82.8, 3446.0], [82.9, 3447.0], [83.0, 3448.0], [83.1, 3449.0], [83.2, 3450.0], [83.3, 3451.0], [83.4, 3451.0], [83.5, 3452.0], [83.6, 3453.0], [83.7, 3453.0], [83.8, 3453.0], [83.9, 3454.0], [84.0, 3454.0], [84.1, 3455.0], [84.2, 3456.0], [84.3, 3456.0], [84.4, 3457.0], [84.5, 3459.0], [84.6, 3460.0], [84.7, 3462.0], [84.8, 3463.0], [84.9, 3463.0], [85.0, 3464.0], [85.1, 3465.0], [85.2, 3466.0], [85.3, 3468.0], [85.4, 3478.0], [85.5, 5034.0], [85.6, 5037.0], [85.7, 5042.0], [85.8, 5044.0], [85.9, 5047.0], [86.0, 5050.0], [86.1, 5051.0], [86.2, 5069.0], [86.3, 5084.0], [86.4, 5093.0], [86.5, 5171.0], [86.6, 5214.0], [86.7, 5251.0], [86.8, 5264.0], [86.9, 5277.0], [87.0, 5346.0], [87.1, 5556.0], [87.2, 6051.0], [87.3, 6504.0], [87.4, 6518.0], [87.5, 7140.0], [87.6, 7251.0], [87.7, 7391.0], [87.8, 7435.0], [87.9, 7642.0], [88.0, 7715.0], [88.1, 7767.0], [88.2, 7805.0], [88.3, 7858.0], [88.4, 7951.0], [88.5, 7973.0], [88.6, 8034.0], [88.7, 8055.0], [88.8, 8092.0], [88.9, 8114.0], [89.0, 8127.0], [89.1, 8167.0], [89.2, 8183.0], [89.3, 8194.0], [89.4, 8202.0], [89.5, 8230.0], [89.6, 8261.0], [89.7, 8275.0], [89.8, 8307.0], [89.9, 8324.0], [90.0, 8359.0], [90.1, 8391.0], [90.2, 8429.0], [90.3, 8477.0], [90.4, 8542.0], [90.5, 8571.0], [90.6, 8612.0], [90.7, 8671.0], [90.8, 8691.0], [90.9, 8731.0], [91.0, 8762.0], [91.1, 8794.0], [91.2, 8810.0], [91.3, 8853.0], [91.4, 8888.0], [91.5, 8915.0], [91.6, 8955.0], [91.7, 8991.0], [91.8, 9040.0], [91.9, 9127.0], [92.0, 9301.0], [92.1, 9344.0], [92.2, 9372.0], [92.3, 9423.0], [92.4, 9476.0], [92.5, 9498.0], [92.6, 9517.0], [92.7, 9531.0], [92.8, 9556.0], [92.9, 9593.0], [93.0, 9613.0], [93.1, 9626.0], [93.2, 9658.0], [93.3, 9669.0], [93.4, 9695.0], [93.5, 9729.0], [93.6, 9755.0], [93.7, 9771.0], [93.8, 9779.0], [93.9, 9800.0], [94.0, 9822.0], [94.1, 9859.0], [94.2, 9890.0], [94.3, 9902.0], [94.4, 9933.0], [94.5, 9956.0], [94.6, 9974.0], [94.7, 9993.0], [94.8, 10038.0], [94.9, 10085.0], [95.0, 10101.0], [95.1, 10128.0], [95.2, 10205.0], [95.3, 10319.0], [95.4, 10471.0], [95.5, 10782.0], [95.6, 11048.0], [95.7, 11149.0], [95.8, 11210.0], [95.9, 11296.0], [96.0, 11347.0], [96.1, 11376.0], [96.2, 11392.0], [96.3, 11415.0], [96.4, 11430.0], [96.5, 11442.0], [96.6, 11462.0], [96.7, 11485.0], [96.8, 11492.0], [96.9, 11513.0], [97.0, 11530.0], [97.1, 11545.0], [97.2, 11553.0], [97.3, 11562.0], [97.4, 11575.0], [97.5, 11589.0], [97.6, 11599.0], [97.7, 11614.0], [97.8, 11626.0], [97.9, 11645.0], [98.0, 11667.0], [98.1, 11680.0], [98.2, 11696.0], [98.3, 11716.0], [98.4, 11740.0], [98.5, 11756.0], [98.6, 11773.0], [98.7, 11784.0], [98.8, 11808.0], [98.9, 11831.0], [99.0, 11840.0], [99.1, 11861.0], [99.2, 11909.0], [99.3, 11922.0], [99.4, 11957.0], [99.5, 12743.0], [99.6, 12883.0], [99.7, 15370.0], [99.8, 20418.0], [99.9, 22223.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 528.0, "series": [{"data": [[100.0, 1.0], [200.0, 13.0], [300.0, 34.0], [500.0, 4.0], [600.0, 3.0], [800.0, 2.0], [900.0, 4.0], [1100.0, 4.0], [1200.0, 7.0], [1300.0, 6.0], [1400.0, 29.0], [1500.0, 121.0], [1600.0, 190.0], [1700.0, 27.0], [1800.0, 48.0], [1900.0, 25.0], [2000.0, 88.0], [2100.0, 45.0], [2200.0, 315.0], [2300.0, 284.0], [2400.0, 165.0], [2500.0, 222.0], [2600.0, 349.0], [2700.0, 515.0], [2800.0, 498.0], [2900.0, 528.0], [3000.0, 354.0], [3100.0, 226.0], [3200.0, 327.0], [3300.0, 164.0], [3400.0, 186.0], [5000.0, 57.0], [5100.0, 6.0], [5200.0, 22.0], [5300.0, 4.0], [5400.0, 3.0], [5500.0, 2.0], [5800.0, 1.0], [6000.0, 5.0], [5900.0, 1.0], [6200.0, 3.0], [6500.0, 11.0], [7100.0, 4.0], [7000.0, 1.0], [7400.0, 7.0], [7200.0, 3.0], [7300.0, 5.0], [7600.0, 5.0], [7500.0, 2.0], [7700.0, 13.0], [7800.0, 9.0], [7900.0, 10.0], [8000.0, 17.0], [8100.0, 31.0], [8200.0, 21.0], [8300.0, 20.0], [8400.0, 10.0], [8500.0, 16.0], [8600.0, 14.0], [8700.0, 16.0], [8800.0, 18.0], [8900.0, 15.0], [9000.0, 8.0], [9100.0, 4.0], [9200.0, 4.0], [9300.0, 13.0], [9400.0, 16.0], [9500.0, 23.0], [9600.0, 27.0], [9700.0, 27.0], [9800.0, 20.0], [9900.0, 27.0], [10000.0, 15.0], [10100.0, 11.0], [10200.0, 4.0], [10300.0, 3.0], [10400.0, 5.0], [10500.0, 2.0], [10600.0, 1.0], [10700.0, 4.0], [10800.0, 2.0], [11100.0, 6.0], [11200.0, 8.0], [10900.0, 1.0], [11000.0, 4.0], [11300.0, 19.0], [11400.0, 31.0], [11500.0, 45.0], [11600.0, 35.0], [11700.0, 30.0], [11800.0, 22.0], [11900.0, 16.0], [12000.0, 2.0], [12700.0, 3.0], [12600.0, 1.0], [12800.0, 3.0], [12900.0, 1.0], [13700.0, 1.0], [13900.0, 1.0], [14300.0, 1.0], [14200.0, 1.0], [15300.0, 1.0], [15500.0, 2.0], [15700.0, 2.0], [20400.0, 1.0], [20800.0, 1.0], [20700.0, 1.0], [20500.0, 1.0], [22300.0, 1.0], [22100.0, 2.0], [22200.0, 1.0], [25100.0, 1.0], [25600.0, 1.0], [25900.0, 1.0], [26000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 26000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 48.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5493.0, "series": [{"data": [[0.0, 48.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 59.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5493.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 630.1974999999993, "minX": 1.69669242E12, "maxY": 630.1974999999993, "series": [{"data": [[1.69669242E12, 630.1974999999993]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69669242E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 227.6, "minX": 1.0, "maxY": 4136.199520958091, "series": [{"data": [[2.0, 271.0], [3.0, 241.0], [4.0, 227.6], [5.0, 233.0], [7.0, 230.5], [8.0, 252.0], [9.0, 309.0], [10.0, 309.0], [11.0, 298.0], [12.0, 317.625], [13.0, 309.3333333333333], [14.0, 312.0], [15.0, 337.3333333333333], [16.0, 348.5], [17.0, 373.75], [18.0, 384.25], [19.0, 383.0], [20.0, 385.0], [21.0, 387.0], [22.0, 384.0], [23.0, 540.7142857142858], [24.0, 757.5], [25.0, 913.3333333333334], [26.0, 923.0], [27.0, 925.0], [28.0, 1125.0], [29.0, 1189.5], [30.0, 1231.0], [31.0, 1238.0], [33.0, 1255.0], [32.0, 1241.0], [35.0, 1298.0], [34.0, 1290.0], [37.0, 1369.0], [36.0, 1320.0], [39.0, 1373.0], [41.0, 1384.0], [40.0, 1380.0], [43.0, 1416.5], [42.0, 1409.0], [45.0, 1437.0], [44.0, 1429.6666666666667], [47.0, 1429.0], [46.0, 1421.0], [49.0, 1426.75], [51.0, 1420.0], [50.0, 1422.0], [53.0, 1417.0], [52.0, 1418.0], [55.0, 1438.0], [54.0, 1435.5], [57.0, 1464.0], [56.0, 1443.0], [58.0, 1505.0], [61.0, 1529.0], [63.0, 1532.0], [67.0, 1517.0], [66.0, 1512.0], [65.0, 1507.0], [64.0, 1511.0], [71.0, 1518.0], [69.0, 1519.0], [68.0, 1521.0], [75.0, 1521.0], [74.0, 1518.0], [73.0, 1523.0], [72.0, 1510.0], [79.0, 1522.0], [78.0, 1517.0], [77.0, 1531.0], [76.0, 1517.0], [83.0, 1522.0], [82.0, 1524.0], [81.0, 1518.0], [80.0, 1520.0], [87.0, 1523.0], [86.0, 1522.0], [85.0, 1523.0], [84.0, 1520.0], [91.0, 1514.0], [90.0, 1515.0], [89.0, 1516.0], [88.0, 1519.0], [95.0, 1513.0], [94.0, 1509.0], [93.0, 1515.0], [92.0, 1513.0], [99.0, 1497.0], [98.0, 1517.0], [97.0, 1517.0], [96.0, 1509.0], [103.0, 1517.0], [101.0, 1508.0], [100.0, 1497.0], [107.0, 1512.0], [106.0, 1503.0], [105.0, 1502.0], [104.0, 1502.0], [111.0, 1514.0], [110.0, 1514.0], [109.0, 1513.0], [108.0, 1508.0], [115.0, 1523.0], [113.0, 1513.0], [112.0, 1516.0], [119.0, 1545.0], [118.0, 1543.0], [117.0, 1563.0], [116.0, 1529.0], [123.0, 1667.0], [122.0, 1556.0], [121.0, 1548.0], [120.0, 1547.0], [127.0, 1614.0], [126.0, 1577.5], [124.0, 1580.0], [135.0, 1662.0], [134.0, 1659.0], [133.0, 1676.0], [132.0, 1659.0], [131.0, 1662.0], [130.0, 1658.0], [129.0, 1661.0], [128.0, 1655.0], [142.0, 1679.0], [141.0, 1664.0], [140.0, 1665.0], [139.0, 1666.0], [138.0, 1673.0], [137.0, 1669.0], [136.0, 1662.0], [150.0, 1673.6666666666667], [149.0, 1676.0], [148.0, 1683.0], [147.0, 1674.5], [146.0, 1677.0], [145.0, 1675.0], [144.0, 1668.0], [159.0, 1657.0], [158.0, 1660.5], [156.0, 1663.0], [155.0, 1668.0], [153.0, 1671.0], [152.0, 1673.0], [167.0, 1662.0], [166.0, 1660.0], [165.0, 1664.0], [164.0, 1665.0], [163.0, 1669.0], [162.0, 1664.0], [161.0, 1663.0], [160.0, 1666.0], [175.0, 1664.0], [174.0, 1663.0], [173.0, 1660.0], [172.0, 1669.0], [171.0, 1671.0], [170.0, 1664.0], [169.0, 1665.0], [168.0, 1666.0], [183.0, 1654.0], [182.0, 1663.5], [181.0, 1657.0], [180.0, 1660.0], [179.0, 1658.0], [178.0, 1660.0], [177.0, 1662.0], [176.0, 1659.0], [191.0, 1647.0], [190.0, 1652.0], [189.0, 1683.5], [188.0, 1656.0], [187.0, 1713.0], [186.0, 1656.0], [185.0, 1659.0], [184.0, 1656.0], [199.0, 1646.5], [197.0, 1644.0], [196.0, 1646.0], [195.0, 1647.0], [193.0, 1645.0], [192.0, 1652.0], [206.0, 1646.0], [205.0, 1639.0], [204.0, 1636.0], [203.0, 1652.0], [202.0, 1642.0], [201.0, 1643.0], [200.0, 1649.0], [215.0, 1643.0], [214.0, 1643.0], [213.0, 1642.0], [212.0, 1642.0], [211.0, 1668.0], [210.0, 1667.0], [209.0, 1655.6666666666667], [223.0, 1648.0], [222.0, 1648.0], [221.0, 1647.0], [220.0, 1643.0], [219.0, 1646.0], [218.0, 1644.0], [217.0, 1646.0], [216.0, 1642.0], [231.0, 1659.0], [230.0, 1643.0], [229.0, 1639.0], [228.0, 1640.0], [227.0, 1651.0], [226.0, 1649.0], [225.0, 1645.0], [239.0, 1644.0], [238.0, 1643.0], [237.0, 1642.0], [236.0, 1644.0], [235.0, 1639.0], [234.0, 1640.0], [233.0, 1639.0], [232.0, 1641.0], [247.0, 1645.0], [246.0, 1642.0], [245.0, 1657.0], [244.0, 1663.0], [243.0, 1661.0], [242.0, 1667.0], [241.0, 1670.0], [240.0, 1670.0], [255.0, 1658.0], [254.0, 1662.0], [253.0, 1634.0], [252.0, 1642.0], [251.0, 1648.5], [250.0, 1650.0], [249.0, 1651.0], [248.0, 1651.0], [270.0, 1651.0], [271.0, 1652.6666666666667], [268.0, 1654.5], [259.0, 1649.6666666666667], [257.0, 1650.0], [256.0, 1652.0], [267.0, 1651.0], [266.0, 1644.0], [265.0, 1645.0], [264.0, 1656.0], [263.0, 1657.0], [262.0, 1639.0], [261.0, 1640.5], [260.0, 1647.0], [286.0, 1627.0], [284.0, 1629.0], [283.0, 1634.5], [281.0, 1636.5], [280.0, 1636.0], [278.0, 1638.0], [276.0, 1637.5], [274.0, 1646.0], [273.0, 1648.0], [302.0, 1591.0], [303.0, 1589.0], [301.0, 1597.0], [300.0, 1599.0], [299.0, 1604.0], [298.0, 1599.5], [297.0, 1606.0], [296.0, 1612.0], [295.0, 1635.0], [289.0, 1636.0], [288.0, 1622.0], [291.0, 1635.0], [290.0, 1636.0], [294.0, 1645.0], [293.0, 1623.0], [292.0, 1620.0], [318.0, 1574.0], [319.0, 1573.0], [317.0, 1575.0], [316.0, 1574.0], [315.0, 1576.0], [314.0, 1579.0], [313.0, 1580.0], [312.0, 1581.0], [311.0, 1576.5], [304.0, 1588.0], [307.0, 1571.0], [306.0, 1578.25], [310.0, 1570.0], [309.0, 1572.0], [308.0, 1570.0], [333.0, 1584.0], [334.0, 1580.0], [332.0, 1584.0], [323.0, 1567.5], [322.0, 1570.0], [321.0, 1575.6666666666667], [320.0, 1573.0], [331.0, 1585.0], [330.0, 1582.0], [329.0, 1572.4], [328.0, 1572.0], [327.0, 1571.0], [326.0, 1571.0], [325.0, 1567.0], [324.0, 1571.0], [339.0, 1709.0], [351.0, 1839.25], [348.0, 1828.5], [347.0, 1823.3333333333333], [346.0, 1822.2857142857142], [345.0, 1807.3333333333333], [342.0, 1778.0], [341.0, 1769.0], [340.0, 1769.0], [338.0, 1639.0], [337.0, 1624.0], [336.0, 1588.6666666666667], [366.0, 2148.0], [367.0, 2153.0], [365.0, 2144.0], [364.0, 2137.0], [363.0, 2135.5], [362.0, 2132.0], [361.0, 2115.5], [360.0, 2107.5], [359.0, 2095.25], [353.0, 1827.0], [352.0, 1837.5], [355.0, 1831.0], [354.0, 1828.5], [358.0, 2041.137931034483], [357.0, 1933.6666666666665], [370.0, 2168.0], [381.0, 2202.0], [383.0, 2202.0], [380.0, 2201.0], [379.0, 2204.6666666666665], [376.0, 2192.5], [374.0, 2196.0], [373.0, 2185.0], [372.0, 2176.5], [369.0, 2164.0], [368.0, 2159.4], [387.0, 2222.5], [394.0, 2246.0], [395.0, 2259.5], [392.0, 2241.0], [391.0, 2239.0], [390.0, 2233.5], [389.0, 2226.0], [388.0, 2223.0], [386.0, 2214.0], [385.0, 2214.0], [384.0, 2209.0], [413.0, 2293.0], [414.0, 2270.0], [412.0, 2288.5], [411.0, 2279.0], [410.0, 2277.6], [407.0, 2270.0], [406.0, 2264.0], [405.0, 2276.0], [400.0, 2258.4], [430.0, 2271.0], [431.0, 2281.0], [429.0, 2272.0], [428.0, 2275.0], [427.0, 2276.0], [426.0, 2277.0], [425.0, 2275.0], [424.0, 2282.0], [423.0, 2274.0], [418.0, 2280.5], [417.0, 2273.3333333333335], [422.0, 2284.0], [421.0, 2271.0], [420.0, 2282.5], [446.0, 2447.0], [447.0, 2436.0], [445.0, 2444.0], [444.0, 2402.3999999999996], [442.0, 2357.3333333333335], [441.0, 2337.5], [440.0, 2339.0], [439.0, 2336.0], [432.0, 2289.6666666666665], [435.0, 2312.0], [433.0, 2312.0], [438.0, 2333.6666666666665], [437.0, 2326.0], [436.0, 2317.0], [462.0, 2655.5], [463.0, 2658.0], [461.0, 2651.0], [460.0, 2652.6666666666665], [459.0, 2648.75], [458.0, 2645.0], [457.0, 2646.0], [456.0, 2636.5714285714284], [455.0, 2609.3999999999996], [449.0, 2440.7000000000003], [451.0, 2423.4444444444443], [450.0, 2420.3333333333335], [454.0, 2555.0], [453.0, 2549.6666666666665], [452.0, 2498.0], [478.0, 2734.7], [479.0, 2738.0], [477.0, 2737.0], [476.0, 2746.2], [475.0, 2751.5], [474.0, 2752.3333333333335], [473.0, 2757.0], [471.0, 2792.3333333333335], [465.0, 2668.3333333333335], [464.0, 2658.8333333333335], [467.0, 2681.8], [466.0, 2678.0], [470.0, 2764.1818181818185], [469.0, 2830.5555555555557], [468.0, 2692.044776119403], [492.0, 2767.0], [494.0, 2783.0], [495.0, 2786.5], [493.0, 2778.5], [491.0, 2771.5], [489.0, 2762.0], [487.0, 2759.0], [481.0, 2734.3333333333335], [480.0, 2752.6666666666665], [483.0, 2744.0], [482.0, 2739.6], [486.0, 2755.0], [485.0, 2753.0], [484.0, 2747.6666666666665], [510.0, 2852.0], [509.0, 2852.5], [507.0, 2842.5714285714284], [504.0, 2822.1666666666665], [502.0, 3647.6666666666665], [500.0, 2801.0], [536.0, 2882.0], [541.0, 2891.0], [542.0, 2893.0], [528.0, 2879.0], [531.0, 2881.5], [529.0, 2889.5], [540.0, 2888.0], [539.0, 2889.0], [538.0, 2888.5], [527.0, 2877.0], [512.0, 2858.5], [515.0, 2856.0], [513.0, 2861.0], [517.0, 2861.0], [516.0, 2859.0], [519.0, 2868.0], [518.0, 2873.0], [526.0, 2875.0], [525.0, 2876.0], [524.0, 2875.0], [523.0, 2862.0], [522.0, 2864.0], [521.0, 2866.0], [520.0, 2853.0], [535.0, 2879.0], [534.0, 2888.0], [533.0, 2887.0], [532.0, 2879.0], [573.0, 2899.5], [574.0, 2898.0], [571.0, 2898.0], [570.0, 2896.0], [569.0, 2900.0], [568.0, 2897.0], [557.0, 2898.0], [544.0, 2894.0], [547.0, 2900.0], [545.0, 2894.0], [551.0, 2895.0], [550.0, 2897.0], [556.0, 2896.5], [554.0, 2899.6666666666665], [567.0, 2906.142857142857], [562.0, 2890.0], [561.0, 2890.0], [560.0, 2897.6666666666665], [604.0, 2894.0], [607.0, 2899.3333333333335], [594.0, 2894.75], [593.0, 2891.3333333333335], [596.0, 2895.0], [595.0, 2891.0], [606.0, 2897.0], [605.0, 2900.0], [603.0, 2895.3333333333335], [602.0, 2889.666666666667], [601.0, 2889.6666666666665], [600.0, 2880.923076923077], [591.0, 2891.0], [578.0, 2903.0], [577.0, 2901.6666666666665], [581.0, 2897.0], [580.0, 2900.5], [583.0, 2895.0], [582.0, 2905.0], [590.0, 2889.6666666666665], [589.0, 2889.3333333333335], [587.0, 2895.0], [585.0, 2898.3333333333335], [599.0, 2890.0], [597.0, 2893.6666666666665], [636.0, 2906.5], [639.0, 2923.0], [625.0, 2924.0], [624.0, 2914.0], [627.0, 2911.0], [626.0, 2908.0], [629.0, 2903.0], [628.0, 2915.0], [638.0, 2902.0], [637.0, 2915.0], [635.0, 2903.0], [634.0, 2907.0], [633.0, 2908.0], [632.0, 2902.0], [622.0, 2907.0], [610.0, 2902.5], [608.0, 2898.0], [612.0, 2907.0], [611.0, 2904.0], [615.0, 2912.0], [614.0, 2909.5], [621.0, 2908.0], [620.0, 2905.0], [619.0, 2917.0], [618.0, 2912.0], [617.0, 2909.0], [616.0, 2921.0], [631.0, 2902.0], [630.0, 2910.0], [668.0, 2821.6666666666665], [671.0, 2743.0], [657.0, 2887.5], [656.0, 2888.0], [659.0, 2881.5], [658.0, 2889.75], [661.0, 2876.5], [660.0, 2884.0], [670.0, 2752.1818181818185], [669.0, 2777.495327102804], [667.0, 2829.0], [666.0, 2834.181818181818], [665.0, 2850.066666666667], [664.0, 2870.0], [655.0, 2887.0], [641.0, 2914.0], [640.0, 2910.0], [643.0, 2899.0], [642.0, 2914.0], [645.0, 2903.0], [644.0, 2902.0], [647.0, 2906.0], [646.0, 2895.0], [654.0, 2891.5], [653.0, 2895.0], [652.0, 2891.0], [651.0, 2896.0], [650.0, 2900.0], [649.0, 2896.0], [648.0, 2900.0], [663.0, 2867.0], [662.0, 2873.3333333333335], [697.0, 2616.3333333333335], [691.0, 2594.142857142857], [700.0, 4136.199520958091], [696.0, 2612.0], [679.0, 2715.5], [678.0, 2717.75], [677.0, 2714.0], [676.0, 2721.3333333333335], [675.0, 2733.0], [674.0, 2726.0], [673.0, 2727.0], [672.0, 2731.0], [695.0, 2605.7], [694.0, 2599.7500000000005], [692.0, 2599.0], [690.0, 2631.5714285714284], [689.0, 2654.545454545454], [688.0, 2729.9047619047615], [686.0, 2728.1111111111113], [684.0, 2714.9], [683.0, 2703.0], [682.0, 2704.0], [681.0, 2706.0], [680.0, 2710.0], [1.0, 275.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[630.1974999999993, 3660.2066071428603]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 700.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14595.0, "minX": 1.69669242E12, "maxY": 309579.68333333335, "series": [{"data": [[1.69669242E12, 309579.68333333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69669242E12, 14595.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69669242E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3660.2066071428603, "minX": 1.69669242E12, "maxY": 3660.2066071428603, "series": [{"data": [[1.69669242E12, 3660.2066071428603]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69669242E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3659.516964285709, "minX": 1.69669242E12, "maxY": 3659.516964285709, "series": [{"data": [[1.69669242E12, 3659.516964285709]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69669242E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 837.6150000000013, "minX": 1.69669242E12, "maxY": 837.6150000000013, "series": [{"data": [[1.69669242E12, 837.6150000000013]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69669242E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 195.0, "minX": 1.69669242E12, "maxY": 26050.0, "series": [{"data": [[1.69669242E12, 26050.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69669242E12, 195.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69669242E12, 8359.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69669242E12, 11840.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69669242E12, 2857.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.69669242E12, 10100.699999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69669242E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 256.0, "minX": 4.0, "maxY": 11149.0, "series": [{"data": [[135.0, 2739.0], [141.0, 2340.0], [172.0, 8444.5], [190.0, 2987.5], [201.0, 3146.0], [202.0, 3289.0], [51.0, 329.0], [208.0, 2553.0], [226.0, 3356.5], [225.0, 2979.0], [229.0, 3290.0], [231.0, 2739.0], [245.0, 1996.0], [250.0, 9576.0], [249.0, 2997.0], [254.0, 3091.0], [4.0, 256.0], [68.0, 7767.0], [287.0, 2669.0], [295.0, 1642.0], [312.0, 2886.0], [320.0, 2776.0], [321.0, 2772.0], [423.0, 11149.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 423.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 256.0, "minX": 4.0, "maxY": 11115.0, "series": [{"data": [[135.0, 2739.0], [141.0, 2340.0], [172.0, 8444.5], [190.0, 2987.5], [201.0, 3146.0], [202.0, 3289.0], [51.0, 329.0], [208.0, 2553.0], [226.0, 3356.5], [225.0, 2979.0], [229.0, 3290.0], [231.0, 2739.0], [245.0, 1995.0], [250.0, 9576.0], [249.0, 2997.0], [254.0, 3091.0], [4.0, 256.0], [68.0, 7767.0], [287.0, 2668.0], [295.0, 1641.0], [312.0, 2886.0], [320.0, 2776.0], [321.0, 2770.0], [423.0, 11115.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 423.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 93.33333333333333, "minX": 1.69669242E12, "maxY": 93.33333333333333, "series": [{"data": [[1.69669242E12, 93.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69669242E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 93.33333333333333, "minX": 1.69669242E12, "maxY": 93.33333333333333, "series": [{"data": [[1.69669242E12, 93.33333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69669242E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 93.33333333333333, "minX": 1.69669242E12, "maxY": 93.33333333333333, "series": [{"data": [[1.69669242E12, 93.33333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69669242E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 93.33333333333333, "minX": 1.69669242E12, "maxY": 93.33333333333333, "series": [{"data": [[1.69669242E12, 93.33333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69669242E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

