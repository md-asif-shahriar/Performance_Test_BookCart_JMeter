/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 106.0, "minX": 0.0, "maxY": 33506.0, "series": [{"data": [[0.0, 106.0], [0.1, 131.0], [0.2, 142.0], [0.3, 167.0], [0.4, 183.0], [0.5, 207.0], [0.6, 227.0], [0.7, 281.0], [0.8, 288.0], [0.9, 314.0], [1.0, 352.0], [1.1, 395.0], [1.2, 467.0], [1.3, 491.0], [1.4, 516.0], [1.5, 542.0], [1.6, 548.0], [1.7, 556.0], [1.8, 589.0], [1.9, 617.0], [2.0, 643.0], [2.1, 702.0], [2.2, 799.0], [2.3, 844.0], [2.4, 883.0], [2.5, 932.0], [2.6, 995.0], [2.7, 1036.0], [2.8, 1098.0], [2.9, 1121.0], [3.0, 1171.0], [3.1, 1190.0], [3.2, 1194.0], [3.3, 1200.0], [3.4, 1208.0], [3.5, 1212.0], [3.6, 1215.0], [3.7, 1220.0], [3.8, 1224.0], [3.9, 1236.0], [4.0, 1245.0], [4.1, 1254.0], [4.2, 1274.0], [4.3, 1280.0], [4.4, 1282.0], [4.5, 1284.0], [4.6, 1286.0], [4.7, 1287.0], [4.8, 1288.0], [4.9, 1289.0], [5.0, 1290.0], [5.1, 1291.0], [5.2, 1292.0], [5.3, 1292.0], [5.4, 1293.0], [5.5, 1294.0], [5.6, 1294.0], [5.7, 1295.0], [5.8, 1295.0], [5.9, 1296.0], [6.0, 1296.0], [6.1, 1297.0], [6.2, 1297.0], [6.3, 1298.0], [6.4, 1298.0], [6.5, 1299.0], [6.6, 1300.0], [6.7, 1302.0], [6.8, 1303.0], [6.9, 1304.0], [7.0, 1306.0], [7.1, 1308.0], [7.2, 1311.0], [7.3, 1316.0], [7.4, 1322.0], [7.5, 1333.0], [7.6, 1337.0], [7.7, 1343.0], [7.8, 1345.0], [7.9, 1358.0], [8.0, 1367.0], [8.1, 1372.0], [8.2, 1384.0], [8.3, 1397.0], [8.4, 1401.0], [8.5, 1410.0], [8.6, 1416.0], [8.7, 1421.0], [8.8, 1426.0], [8.9, 1431.0], [9.0, 1436.0], [9.1, 1455.0], [9.2, 1465.0], [9.3, 1477.0], [9.4, 1484.0], [9.5, 1488.0], [9.6, 1494.0], [9.7, 1499.0], [9.8, 1500.0], [9.9, 1504.0], [10.0, 1509.0], [10.1, 1513.0], [10.2, 1521.0], [10.3, 1522.0], [10.4, 1526.0], [10.5, 1534.0], [10.6, 1536.0], [10.7, 1538.0], [10.8, 1542.0], [10.9, 1550.0], [11.0, 1561.0], [11.1, 1570.0], [11.2, 1579.0], [11.3, 1581.0], [11.4, 1593.0], [11.5, 1601.0], [11.6, 1606.0], [11.7, 1614.0], [11.8, 1618.0], [11.9, 1631.0], [12.0, 1637.0], [12.1, 1651.0], [12.2, 1654.0], [12.3, 1657.0], [12.4, 1662.0], [12.5, 1663.0], [12.6, 1667.0], [12.7, 1669.0], [12.8, 1676.0], [12.9, 1678.0], [13.0, 1682.0], [13.1, 1683.0], [13.2, 1685.0], [13.3, 1686.0], [13.4, 1688.0], [13.5, 1690.0], [13.6, 1693.0], [13.7, 1694.0], [13.8, 1696.0], [13.9, 1698.0], [14.0, 1701.0], [14.1, 1703.0], [14.2, 1707.0], [14.3, 1712.0], [14.4, 1713.0], [14.5, 1716.0], [14.6, 1725.0], [14.7, 1730.0], [14.8, 1734.0], [14.9, 1740.0], [15.0, 1744.0], [15.1, 1746.0], [15.2, 1751.0], [15.3, 1753.0], [15.4, 1756.0], [15.5, 1759.0], [15.6, 1761.0], [15.7, 1765.0], [15.8, 1767.0], [15.9, 1769.0], [16.0, 1772.0], [16.1, 1775.0], [16.2, 1784.0], [16.3, 1787.0], [16.4, 1790.0], [16.5, 1795.0], [16.6, 1800.0], [16.7, 1802.0], [16.8, 1804.0], [16.9, 1807.0], [17.0, 1812.0], [17.1, 1815.0], [17.2, 1820.0], [17.3, 1823.0], [17.4, 1827.0], [17.5, 1829.0], [17.6, 1832.0], [17.7, 1834.0], [17.8, 1838.0], [17.9, 1842.0], [18.0, 1845.0], [18.1, 1849.0], [18.2, 1851.0], [18.3, 1855.0], [18.4, 1857.0], [18.5, 1860.0], [18.6, 1864.0], [18.7, 1869.0], [18.8, 1873.0], [18.9, 1875.0], [19.0, 1878.0], [19.1, 1880.0], [19.2, 1881.0], [19.3, 1885.0], [19.4, 1887.0], [19.5, 1890.0], [19.6, 1894.0], [19.7, 1897.0], [19.8, 1900.0], [19.9, 1903.0], [20.0, 1904.0], [20.1, 1907.0], [20.2, 1909.0], [20.3, 1914.0], [20.4, 1917.0], [20.5, 1920.0], [20.6, 1923.0], [20.7, 1926.0], [20.8, 1929.0], [20.9, 1936.0], [21.0, 1940.0], [21.1, 1943.0], [21.2, 1947.0], [21.3, 1952.0], [21.4, 1955.0], [21.5, 1960.0], [21.6, 1963.0], [21.7, 1967.0], [21.8, 1970.0], [21.9, 1973.0], [22.0, 1976.0], [22.1, 1978.0], [22.2, 1981.0], [22.3, 1984.0], [22.4, 1985.0], [22.5, 1988.0], [22.6, 1993.0], [22.7, 1997.0], [22.8, 2003.0], [22.9, 2006.0], [23.0, 2007.0], [23.1, 2010.0], [23.2, 2014.0], [23.3, 2019.0], [23.4, 2023.0], [23.5, 2025.0], [23.6, 2031.0], [23.7, 2034.0], [23.8, 2040.0], [23.9, 2046.0], [24.0, 2051.0], [24.1, 2056.0], [24.2, 2058.0], [24.3, 2060.0], [24.4, 2063.0], [24.5, 2064.0], [24.6, 2067.0], [24.7, 2072.0], [24.8, 2077.0], [24.9, 2080.0], [25.0, 2082.0], [25.1, 2087.0], [25.2, 2090.0], [25.3, 2093.0], [25.4, 2096.0], [25.5, 2099.0], [25.6, 2100.0], [25.7, 2104.0], [25.8, 2110.0], [25.9, 2111.0], [26.0, 2112.0], [26.1, 2115.0], [26.2, 2118.0], [26.3, 2123.0], [26.4, 2128.0], [26.5, 2133.0], [26.6, 2137.0], [26.7, 2143.0], [26.8, 2147.0], [26.9, 2149.0], [27.0, 2155.0], [27.1, 2158.0], [27.2, 2162.0], [27.3, 2168.0], [27.4, 2174.0], [27.5, 2180.0], [27.6, 2187.0], [27.7, 2194.0], [27.8, 2204.0], [27.9, 2209.0], [28.0, 2214.0], [28.1, 2217.0], [28.2, 2221.0], [28.3, 2232.0], [28.4, 2237.0], [28.5, 2241.0], [28.6, 2246.0], [28.7, 2252.0], [28.8, 2256.0], [28.9, 2262.0], [29.0, 2267.0], [29.1, 2269.0], [29.2, 2272.0], [29.3, 2273.0], [29.4, 2274.0], [29.5, 2276.0], [29.6, 2278.0], [29.7, 2279.0], [29.8, 2281.0], [29.9, 2284.0], [30.0, 2285.0], [30.1, 2286.0], [30.2, 2287.0], [30.3, 2288.0], [30.4, 2289.0], [30.5, 2290.0], [30.6, 2291.0], [30.7, 2291.0], [30.8, 2292.0], [30.9, 2293.0], [31.0, 2294.0], [31.1, 2294.0], [31.2, 2295.0], [31.3, 2296.0], [31.4, 2297.0], [31.5, 2298.0], [31.6, 2299.0], [31.7, 2301.0], [31.8, 2302.0], [31.9, 2305.0], [32.0, 2308.0], [32.1, 2309.0], [32.2, 2315.0], [32.3, 2319.0], [32.4, 2322.0], [32.5, 2323.0], [32.6, 2327.0], [32.7, 2329.0], [32.8, 2332.0], [32.9, 2334.0], [33.0, 2338.0], [33.1, 2345.0], [33.2, 2347.0], [33.3, 2349.0], [33.4, 2351.0], [33.5, 2354.0], [33.6, 2356.0], [33.7, 2360.0], [33.8, 2365.0], [33.9, 2368.0], [34.0, 2375.0], [34.1, 2382.0], [34.2, 2387.0], [34.3, 2392.0], [34.4, 2398.0], [34.5, 2402.0], [34.6, 2406.0], [34.7, 2408.0], [34.8, 2410.0], [34.9, 2413.0], [35.0, 2417.0], [35.1, 2422.0], [35.2, 2428.0], [35.3, 2433.0], [35.4, 2437.0], [35.5, 2441.0], [35.6, 2444.0], [35.7, 2450.0], [35.8, 2454.0], [35.9, 2457.0], [36.0, 2462.0], [36.1, 2463.0], [36.2, 2465.0], [36.3, 2467.0], [36.4, 2469.0], [36.5, 2481.0], [36.6, 2483.0], [36.7, 2486.0], [36.8, 2488.0], [36.9, 2492.0], [37.0, 2495.0], [37.1, 2499.0], [37.2, 2504.0], [37.3, 2509.0], [37.4, 2517.0], [37.5, 2523.0], [37.6, 2529.0], [37.7, 2534.0], [37.8, 2538.0], [37.9, 2543.0], [38.0, 2546.0], [38.1, 2549.0], [38.2, 2550.0], [38.3, 2554.0], [38.4, 2558.0], [38.5, 2564.0], [38.6, 2568.0], [38.7, 2574.0], [38.8, 2577.0], [38.9, 2578.0], [39.0, 2582.0], [39.1, 2584.0], [39.2, 2586.0], [39.3, 2589.0], [39.4, 2593.0], [39.5, 2595.0], [39.6, 2597.0], [39.7, 2599.0], [39.8, 2599.0], [39.9, 2601.0], [40.0, 2601.0], [40.1, 2601.0], [40.2, 2602.0], [40.3, 2603.0], [40.4, 2603.0], [40.5, 2604.0], [40.6, 2604.0], [40.7, 2605.0], [40.8, 2606.0], [40.9, 2606.0], [41.0, 2607.0], [41.1, 2608.0], [41.2, 2608.0], [41.3, 2609.0], [41.4, 2609.0], [41.5, 2610.0], [41.6, 2610.0], [41.7, 2611.0], [41.8, 2611.0], [41.9, 2612.0], [42.0, 2613.0], [42.1, 2613.0], [42.2, 2613.0], [42.3, 2613.0], [42.4, 2614.0], [42.5, 2614.0], [42.6, 2615.0], [42.7, 2615.0], [42.8, 2615.0], [42.9, 2616.0], [43.0, 2616.0], [43.1, 2616.0], [43.2, 2617.0], [43.3, 2617.0], [43.4, 2617.0], [43.5, 2617.0], [43.6, 2617.0], [43.7, 2618.0], [43.8, 2618.0], [43.9, 2619.0], [44.0, 2620.0], [44.1, 2620.0], [44.2, 2620.0], [44.3, 2621.0], [44.4, 2621.0], [44.5, 2621.0], [44.6, 2622.0], [44.7, 2622.0], [44.8, 2622.0], [44.9, 2623.0], [45.0, 2623.0], [45.1, 2624.0], [45.2, 2624.0], [45.3, 2625.0], [45.4, 2626.0], [45.5, 2627.0], [45.6, 2627.0], [45.7, 2628.0], [45.8, 2628.0], [45.9, 2629.0], [46.0, 2630.0], [46.1, 2630.0], [46.2, 2631.0], [46.3, 2632.0], [46.4, 2632.0], [46.5, 2633.0], [46.6, 2634.0], [46.7, 2634.0], [46.8, 2635.0], [46.9, 2635.0], [47.0, 2636.0], [47.1, 2636.0], [47.2, 2637.0], [47.3, 2637.0], [47.4, 2638.0], [47.5, 2638.0], [47.6, 2639.0], [47.7, 2639.0], [47.8, 2640.0], [47.9, 2640.0], [48.0, 2641.0], [48.1, 2642.0], [48.2, 2643.0], [48.3, 2644.0], [48.4, 2646.0], [48.5, 2649.0], [48.6, 2651.0], [48.7, 2651.0], [48.8, 2653.0], [48.9, 2655.0], [49.0, 2657.0], [49.1, 2660.0], [49.2, 2662.0], [49.3, 2664.0], [49.4, 2666.0], [49.5, 2668.0], [49.6, 2671.0], [49.7, 2673.0], [49.8, 2674.0], [49.9, 2675.0], [50.0, 2675.0], [50.1, 2675.0], [50.2, 2676.0], [50.3, 2676.0], [50.4, 2677.0], [50.5, 2677.0], [50.6, 2678.0], [50.7, 2680.0], [50.8, 2682.0], [50.9, 2684.0], [51.0, 2685.0], [51.1, 2686.0], [51.2, 2688.0], [51.3, 2690.0], [51.4, 2691.0], [51.5, 2692.0], [51.6, 2692.0], [51.7, 2693.0], [51.8, 2694.0], [51.9, 2695.0], [52.0, 2696.0], [52.1, 2697.0], [52.2, 2698.0], [52.3, 2699.0], [52.4, 2701.0], [52.5, 2702.0], [52.6, 2703.0], [52.7, 2704.0], [52.8, 2705.0], [52.9, 2706.0], [53.0, 2707.0], [53.1, 2709.0], [53.2, 2710.0], [53.3, 2711.0], [53.4, 2713.0], [53.5, 2713.0], [53.6, 2715.0], [53.7, 2717.0], [53.8, 2718.0], [53.9, 2719.0], [54.0, 2721.0], [54.1, 2722.0], [54.2, 2723.0], [54.3, 2725.0], [54.4, 2727.0], [54.5, 2728.0], [54.6, 2729.0], [54.7, 2729.0], [54.8, 2730.0], [54.9, 2731.0], [55.0, 2732.0], [55.1, 2733.0], [55.2, 2734.0], [55.3, 2736.0], [55.4, 2737.0], [55.5, 2738.0], [55.6, 2738.0], [55.7, 2739.0], [55.8, 2742.0], [55.9, 2743.0], [56.0, 2744.0], [56.1, 2746.0], [56.2, 2746.0], [56.3, 2747.0], [56.4, 2748.0], [56.5, 2749.0], [56.6, 2750.0], [56.7, 2754.0], [56.8, 2756.0], [56.9, 2758.0], [57.0, 2760.0], [57.1, 2762.0], [57.2, 2765.0], [57.3, 2770.0], [57.4, 2771.0], [57.5, 2775.0], [57.6, 2779.0], [57.7, 2780.0], [57.8, 2782.0], [57.9, 2783.0], [58.0, 2784.0], [58.1, 2785.0], [58.2, 2787.0], [58.3, 2788.0], [58.4, 2791.0], [58.5, 2794.0], [58.6, 2795.0], [58.7, 2798.0], [58.8, 2802.0], [58.9, 2804.0], [59.0, 2805.0], [59.1, 2809.0], [59.2, 2810.0], [59.3, 2813.0], [59.4, 2816.0], [59.5, 2818.0], [59.6, 2820.0], [59.7, 2823.0], [59.8, 2825.0], [59.9, 2826.0], [60.0, 2828.0], [60.1, 2828.0], [60.2, 2830.0], [60.3, 2831.0], [60.4, 2832.0], [60.5, 2834.0], [60.6, 2835.0], [60.7, 2836.0], [60.8, 2837.0], [60.9, 2838.0], [61.0, 2839.0], [61.1, 2840.0], [61.2, 2841.0], [61.3, 2842.0], [61.4, 2843.0], [61.5, 2844.0], [61.6, 2845.0], [61.7, 2847.0], [61.8, 2847.0], [61.9, 2850.0], [62.0, 2851.0], [62.1, 2852.0], [62.2, 2854.0], [62.3, 2856.0], [62.4, 2858.0], [62.5, 2862.0], [62.6, 2865.0], [62.7, 2869.0], [62.8, 2870.0], [62.9, 2873.0], [63.0, 2876.0], [63.1, 2876.0], [63.2, 2877.0], [63.3, 2878.0], [63.4, 2878.0], [63.5, 2880.0], [63.6, 2881.0], [63.7, 2884.0], [63.8, 2887.0], [63.9, 2889.0], [64.0, 2890.0], [64.1, 2894.0], [64.2, 2896.0], [64.3, 2901.0], [64.4, 2903.0], [64.5, 2909.0], [64.6, 2909.0], [64.7, 2912.0], [64.8, 2916.0], [64.9, 2920.0], [65.0, 2922.0], [65.1, 2923.0], [65.2, 2925.0], [65.3, 2926.0], [65.4, 2927.0], [65.5, 2929.0], [65.6, 2933.0], [65.7, 2936.0], [65.8, 2939.0], [65.9, 2944.0], [66.0, 2945.0], [66.1, 2946.0], [66.2, 2947.0], [66.3, 2956.0], [66.4, 2961.0], [66.5, 2964.0], [66.6, 2971.0], [66.7, 2973.0], [66.8, 2973.0], [66.9, 2976.0], [67.0, 2977.0], [67.1, 2980.0], [67.2, 2983.0], [67.3, 2986.0], [67.4, 2990.0], [67.5, 2993.0], [67.6, 2997.0], [67.7, 3000.0], [67.8, 3003.0], [67.9, 3009.0], [68.0, 3012.0], [68.1, 3017.0], [68.2, 3020.0], [68.3, 3021.0], [68.4, 3022.0], [68.5, 3025.0], [68.6, 3026.0], [68.7, 3026.0], [68.8, 3028.0], [68.9, 3029.0], [69.0, 3029.0], [69.1, 3030.0], [69.2, 3030.0], [69.3, 3031.0], [69.4, 3031.0], [69.5, 3031.0], [69.6, 3032.0], [69.7, 3032.0], [69.8, 3032.0], [69.9, 3033.0], [70.0, 3033.0], [70.1, 3033.0], [70.2, 3034.0], [70.3, 3034.0], [70.4, 3034.0], [70.5, 3034.0], [70.6, 3035.0], [70.7, 3035.0], [70.8, 3035.0], [70.9, 3035.0], [71.0, 3036.0], [71.1, 3036.0], [71.2, 3036.0], [71.3, 3037.0], [71.4, 3037.0], [71.5, 3037.0], [71.6, 3037.0], [71.7, 3037.0], [71.8, 3038.0], [71.9, 3038.0], [72.0, 3038.0], [72.1, 3038.0], [72.2, 3039.0], [72.3, 3039.0], [72.4, 3039.0], [72.5, 3040.0], [72.6, 3040.0], [72.7, 3040.0], [72.8, 3040.0], [72.9, 3041.0], [73.0, 3041.0], [73.1, 3041.0], [73.2, 3042.0], [73.3, 3042.0], [73.4, 3042.0], [73.5, 3043.0], [73.6, 3043.0], [73.7, 3043.0], [73.8, 3043.0], [73.9, 3044.0], [74.0, 3044.0], [74.1, 3045.0], [74.2, 3045.0], [74.3, 3046.0], [74.4, 3046.0], [74.5, 3046.0], [74.6, 3047.0], [74.7, 3047.0], [74.8, 3048.0], [74.9, 3048.0], [75.0, 3048.0], [75.1, 3049.0], [75.2, 3049.0], [75.3, 3049.0], [75.4, 3049.0], [75.5, 3050.0], [75.6, 3050.0], [75.7, 3051.0], [75.8, 3051.0], [75.9, 3052.0], [76.0, 3052.0], [76.1, 3052.0], [76.2, 3053.0], [76.3, 3054.0], [76.4, 3054.0], [76.5, 3055.0], [76.6, 3055.0], [76.7, 3056.0], [76.8, 3056.0], [76.9, 3057.0], [77.0, 3057.0], [77.1, 3058.0], [77.2, 3058.0], [77.3, 3058.0], [77.4, 3059.0], [77.5, 3059.0], [77.6, 3060.0], [77.7, 3060.0], [77.8, 3061.0], [77.9, 3062.0], [78.0, 3063.0], [78.1, 3064.0], [78.2, 3065.0], [78.3, 3066.0], [78.4, 3067.0], [78.5, 3068.0], [78.6, 3069.0], [78.7, 3069.0], [78.8, 3070.0], [78.9, 3071.0], [79.0, 3072.0], [79.1, 3073.0], [79.2, 3073.0], [79.3, 3074.0], [79.4, 3075.0], [79.5, 3075.0], [79.6, 3076.0], [79.7, 3076.0], [79.8, 3077.0], [79.9, 3079.0], [80.0, 3080.0], [80.1, 3081.0], [80.2, 3083.0], [80.3, 3084.0], [80.4, 3963.0], [80.5, 3971.0], [80.6, 3974.0], [80.7, 3977.0], [80.8, 3982.0], [80.9, 3986.0], [81.0, 3993.0], [81.1, 3995.0], [81.2, 4000.0], [81.3, 4010.0], [81.4, 4025.0], [81.5, 4040.0], [81.6, 4046.0], [81.7, 4054.0], [81.8, 4065.0], [81.9, 4074.0], [82.0, 4078.0], [82.1, 4084.0], [82.2, 4088.0], [82.3, 4094.0], [82.4, 4100.0], [82.5, 4110.0], [82.6, 4147.0], [82.7, 4182.0], [82.8, 4209.0], [82.9, 4222.0], [83.0, 4250.0], [83.1, 4263.0], [83.2, 4281.0], [83.3, 4293.0], [83.4, 4312.0], [83.5, 4318.0], [83.6, 4329.0], [83.7, 4341.0], [83.8, 4374.0], [83.9, 4432.0], [84.0, 4493.0], [84.1, 4510.0], [84.2, 4523.0], [84.3, 4550.0], [84.4, 4568.0], [84.5, 4580.0], [84.6, 4596.0], [84.7, 4611.0], [84.8, 4623.0], [84.9, 4641.0], [85.0, 4652.0], [85.1, 4668.0], [85.2, 4673.0], [85.3, 4676.0], [85.4, 4678.0], [85.5, 4683.0], [85.6, 4685.0], [85.7, 4687.0], [85.8, 4691.0], [85.9, 4693.0], [86.0, 4695.0], [86.1, 4698.0], [86.2, 4706.0], [86.3, 4712.0], [86.4, 4718.0], [86.5, 4728.0], [86.6, 4729.0], [86.7, 4730.0], [86.8, 4732.0], [86.9, 4735.0], [87.0, 4737.0], [87.1, 5004.0], [87.2, 5811.0], [87.3, 5871.0], [87.4, 6399.0], [87.5, 19216.0], [87.6, 19595.0], [87.7, 19674.0], [87.8, 19735.0], [87.9, 19804.0], [88.0, 19865.0], [88.1, 19911.0], [88.2, 19945.0], [88.3, 19954.0], [88.4, 19986.0], [88.5, 19997.0], [88.6, 20014.0], [88.7, 20053.0], [88.8, 20064.0], [88.9, 20091.0], [89.0, 20122.0], [89.1, 20155.0], [89.2, 20171.0], [89.3, 20197.0], [89.4, 20243.0], [89.5, 20284.0], [89.6, 20315.0], [89.7, 20331.0], [89.8, 20359.0], [89.9, 20377.0], [90.0, 20402.0], [90.1, 20436.0], [90.2, 20471.0], [90.3, 20503.0], [90.4, 20528.0], [90.5, 20551.0], [90.6, 20610.0], [90.7, 20639.0], [90.8, 20678.0], [90.9, 20723.0], [91.0, 20737.0], [91.1, 20770.0], [91.2, 20807.0], [91.3, 20835.0], [91.4, 20854.0], [91.5, 20865.0], [91.6, 20884.0], [91.7, 20915.0], [91.8, 20948.0], [91.9, 20989.0], [92.0, 21008.0], [92.1, 21038.0], [92.2, 21075.0], [92.3, 21092.0], [92.4, 21111.0], [92.5, 21137.0], [92.6, 21153.0], [92.7, 21193.0], [92.8, 21238.0], [92.9, 21259.0], [93.0, 21278.0], [93.1, 21303.0], [93.2, 21334.0], [93.3, 21358.0], [93.4, 21409.0], [93.5, 21453.0], [93.6, 21482.0], [93.7, 21533.0], [93.8, 21559.0], [93.9, 21616.0], [94.0, 21649.0], [94.1, 21658.0], [94.2, 21713.0], [94.3, 21765.0], [94.4, 21837.0], [94.5, 21906.0], [94.6, 21961.0], [94.7, 22023.0], [94.8, 22150.0], [94.9, 22247.0], [95.0, 22285.0], [95.1, 22318.0], [95.2, 22355.0], [95.3, 22389.0], [95.4, 22426.0], [95.5, 22492.0], [95.6, 22551.0], [95.7, 22589.0], [95.8, 22664.0], [95.9, 22722.0], [96.0, 22759.0], [96.1, 22780.0], [96.2, 22815.0], [96.3, 22849.0], [96.4, 22880.0], [96.5, 22925.0], [96.6, 22990.0], [96.7, 23064.0], [96.8, 23099.0], [96.9, 23164.0], [97.0, 23250.0], [97.1, 23321.0], [97.2, 23346.0], [97.3, 23406.0], [97.4, 23451.0], [97.5, 23509.0], [97.6, 23631.0], [97.7, 23872.0], [97.8, 23936.0], [97.9, 25186.0], [98.0, 25453.0], [98.1, 25615.0], [98.2, 25764.0], [98.3, 25898.0], [98.4, 25983.0], [98.5, 26100.0], [98.6, 26360.0], [98.7, 26563.0], [98.8, 26896.0], [98.9, 27077.0], [99.0, 27267.0], [99.1, 27439.0], [99.2, 27754.0], [99.3, 27948.0], [99.4, 28051.0], [99.5, 28544.0], [99.6, 28877.0], [99.7, 29523.0], [99.8, 29790.0], [99.9, 30268.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 760.0, "series": [{"data": [[100.0, 28.0], [33500.0, 1.0], [33100.0, 2.0], [200.0, 21.0], [300.0, 17.0], [400.0, 14.0], [500.0, 34.0], [600.0, 12.0], [700.0, 7.0], [800.0, 14.0], [900.0, 11.0], [1000.0, 12.0], [1100.0, 28.0], [1200.0, 193.0], [1300.0, 111.0], [1400.0, 82.0], [1500.0, 104.0], [1600.0, 149.0], [1700.0, 158.0], [1800.0, 192.0], [1900.0, 176.0], [2000.0, 169.0], [2100.0, 134.0], [2200.0, 233.0], [2300.0, 165.0], [2400.0, 162.0], [2500.0, 164.0], [2600.0, 749.0], [2700.0, 386.0], [2800.0, 331.0], [2900.0, 205.0], [3000.0, 760.0], [3100.0, 2.0], [3900.0, 49.0], [4000.0, 72.0], [4300.0, 33.0], [4200.0, 31.0], [4100.0, 24.0], [4500.0, 34.0], [4600.0, 91.0], [4400.0, 12.0], [4700.0, 57.0], [5000.0, 1.0], [5400.0, 1.0], [5600.0, 1.0], [5800.0, 10.0], [5700.0, 3.0], [5900.0, 1.0], [6300.0, 2.0], [6400.0, 5.0], [19400.0, 2.0], [19300.0, 1.0], [19200.0, 1.0], [19500.0, 4.0], [19600.0, 6.0], [19700.0, 9.0], [19800.0, 12.0], [19900.0, 28.0], [20000.0, 22.0], [20100.0, 24.0], [20300.0, 27.0], [20200.0, 14.0], [20400.0, 18.0], [21300.0, 20.0], [20600.0, 16.0], [20500.0, 17.0], [20700.0, 20.0], [21400.0, 15.0], [21500.0, 12.0], [20800.0, 30.0], [20900.0, 16.0], [21000.0, 24.0], [21100.0, 22.0], [21200.0, 21.0], [22300.0, 18.0], [21600.0, 19.0], [21700.0, 12.0], [21800.0, 8.0], [21900.0, 10.0], [22000.0, 4.0], [22100.0, 9.0], [22200.0, 10.0], [22400.0, 10.0], [22500.0, 13.0], [23300.0, 14.0], [22600.0, 7.0], [22700.0, 21.0], [22800.0, 15.0], [23000.0, 11.0], [22900.0, 11.0], [23100.0, 11.0], [23200.0, 4.0], [23400.0, 11.0], [23500.0, 5.0], [23600.0, 6.0], [23700.0, 1.0], [23800.0, 5.0], [23900.0, 3.0], [24000.0, 1.0], [24100.0, 2.0], [24300.0, 1.0], [25300.0, 3.0], [25000.0, 1.0], [25500.0, 4.0], [25400.0, 3.0], [25100.0, 1.0], [25700.0, 4.0], [25600.0, 6.0], [25800.0, 4.0], [25900.0, 7.0], [26100.0, 2.0], [26000.0, 4.0], [26200.0, 2.0], [26300.0, 4.0], [26400.0, 3.0], [26500.0, 3.0], [26600.0, 1.0], [26800.0, 4.0], [27000.0, 5.0], [26900.0, 2.0], [27200.0, 4.0], [27300.0, 2.0], [27400.0, 5.0], [27100.0, 2.0], [27500.0, 1.0], [27600.0, 1.0], [27700.0, 2.0], [27800.0, 3.0], [27900.0, 5.0], [28000.0, 5.0], [28200.0, 2.0], [28400.0, 2.0], [28500.0, 2.0], [28600.0, 2.0], [28700.0, 2.0], [28800.0, 1.0], [28900.0, 1.0], [29000.0, 2.0], [29300.0, 1.0], [29400.0, 1.0], [29500.0, 2.0], [29600.0, 1.0], [29700.0, 4.0], [29800.0, 2.0], [29900.0, 3.0], [30200.0, 1.0], [33400.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 33500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 80.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5412.0, "series": [{"data": [[0.0, 80.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 508.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5412.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 614.6469303567101, "minX": 1.69670298E12, "maxY": 750.0, "series": [{"data": [[1.69670298E12, 750.0], [1.69670304E12, 614.6469303567101]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69670304E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 110.0, "minX": 2.0, "maxY": 6334.045880374723, "series": [{"data": [[2.0, 110.5], [3.0, 110.0], [4.0, 110.0], [5.0, 117.66666666666667], [6.0, 135.0], [7.0, 136.0], [8.0, 135.0], [9.0, 137.33333333333334], [13.0, 155.66666666666666], [15.0, 159.25], [17.0, 170.5], [18.0, 173.0], [19.0, 182.0], [20.0, 185.0], [21.0, 183.0], [22.0, 191.0], [23.0, 195.0], [24.0, 201.0], [25.0, 206.0], [27.0, 209.0], [28.0, 208.0], [29.0, 214.0], [30.0, 215.0], [31.0, 227.0], [33.0, 235.0], [32.0, 231.0], [35.0, 260.0], [34.0, 254.0], [37.0, 285.0], [36.0, 272.0], [39.0, 286.0], [38.0, 281.0], [41.0, 288.0], [40.0, 293.0], [43.0, 288.0], [42.0, 288.0], [45.0, 310.0], [44.0, 285.0], [47.0, 314.0], [46.0, 308.0], [49.0, 315.0], [48.0, 311.0], [51.0, 342.0], [50.0, 312.0], [53.0, 350.0], [52.0, 350.0], [55.0, 352.0], [54.0, 351.0], [57.0, 371.0], [56.0, 367.5], [59.0, 374.0], [58.0, 372.0], [61.0, 433.5], [60.0, 395.0], [63.0, 493.0], [62.0, 471.5555555555556], [67.0, 516.0], [66.0, 513.0], [65.0, 510.0], [64.0, 493.0], [71.0, 544.5], [70.0, 542.0], [69.0, 534.25], [68.0, 516.0], [75.0, 557.25], [74.0, 552.0], [72.0, 546.0], [79.0, 579.0], [78.0, 575.0], [77.0, 563.0], [76.0, 558.5], [83.0, 634.0], [82.0, 618.0], [81.0, 597.6666666666666], [80.0, 586.25], [87.0, 658.0], [86.0, 643.0], [85.0, 643.0], [84.0, 637.0], [91.0, 759.5], [90.0, 716.0], [89.0, 702.0], [88.0, 684.0], [95.0, 812.0], [94.0, 807.0], [93.0, 799.0], [92.0, 784.0], [99.0, 869.0], [98.0, 850.0], [97.0, 840.0], [96.0, 829.0], [100.0, 899.6], [107.0, 1032.0], [106.0, 1061.5], [105.0, 993.5], [104.0, 960.0], [111.0, 1036.0], [110.0, 1036.0], [109.0, 1036.0], [108.0, 1036.0], [115.0, 1124.0], [114.0, 1119.0], [113.0, 1105.4], [112.0, 1053.0], [119.0, 1181.0], [118.0, 1177.0], [117.0, 1167.6666666666667], [116.0, 1131.0], [123.0, 1185.0], [122.0, 1190.0], [121.0, 1220.0], [120.0, 1181.0], [127.0, 1192.0], [126.0, 1198.0], [125.0, 1194.0], [124.0, 1194.0], [135.0, 1202.0], [133.0, 1196.0], [131.0, 1192.0], [130.0, 1194.0], [129.0, 1195.0], [128.0, 1193.0], [143.0, 1213.0], [142.0, 1218.0], [141.0, 1221.0], [140.0, 1207.0], [139.0, 1208.0], [138.0, 1208.0], [137.0, 1210.0], [136.0, 1200.0], [151.0, 1235.0], [150.0, 1253.0], [149.0, 1217.6666666666667], [148.0, 1214.0], [147.0, 1218.0], [146.0, 1212.0], [145.0, 1211.6], [144.0, 1216.0], [159.0, 1279.5], [158.0, 1282.0], [157.0, 1280.0], [156.0, 1270.6666666666667], [155.0, 1252.5], [154.0, 1242.0], [153.0, 1242.0], [152.0, 1245.3333333333333], [167.0, 1288.0], [166.0, 1285.6666666666667], [165.0, 1285.0], [164.0, 1278.0], [163.0, 1281.0], [162.0, 1282.0], [161.0, 1284.0], [160.0, 1283.0], [175.0, 1302.0], [174.0, 1289.3333333333333], [173.0, 1291.0], [172.0, 1290.0], [171.0, 1287.5], [170.0, 1296.0], [169.0, 1296.0], [168.0, 1288.3333333333333], [183.0, 1294.4], [182.0, 1300.8], [181.0, 1294.0], [180.0, 1292.0], [179.0, 1290.0], [178.0, 1289.4], [177.0, 1291.0], [176.0, 1292.0], [191.0, 1298.3333333333333], [190.0, 1291.0], [189.0, 1297.0], [188.0, 1299.0], [187.0, 1292.3333333333333], [186.0, 1296.5], [185.0, 1292.5], [184.0, 1297.0], [199.0, 1297.0], [198.0, 1297.5], [197.0, 1296.0], [196.0, 1294.0], [195.0, 1295.0], [194.0, 1300.0], [193.0, 1299.5], [192.0, 1297.3333333333333], [207.0, 1303.0], [206.0, 1305.3333333333333], [205.0, 1303.0], [204.0, 1304.0], [203.0, 1302.6666666666667], [202.0, 1297.0], [201.0, 1300.0], [200.0, 1299.0], [215.0, 1304.0], [214.0, 1304.0], [213.0, 1302.0], [212.0, 1309.5], [210.0, 1307.0], [209.0, 1309.6666666666667], [208.0, 1310.0], [223.0, 1293.0], [222.0, 1296.0], [221.0, 1294.0], [220.0, 1295.5], [219.0, 1302.0], [218.0, 1301.0], [217.0, 1304.5], [216.0, 1306.0], [231.0, 1296.0], [230.0, 1294.0], [229.0, 1296.0], [228.0, 1295.0], [227.0, 1294.5], [226.0, 1291.0], [225.0, 1293.0], [224.0, 1294.0], [239.0, 1288.0], [238.0, 1308.0], [237.0, 1299.5], [235.0, 1296.5], [233.0, 1293.0], [232.0, 1291.0], [247.0, 1291.0], [246.0, 1289.0], [245.0, 1289.0], [244.0, 1288.0], [243.0, 1281.0], [242.0, 1289.0], [241.0, 1295.0], [240.0, 1291.0], [254.0, 1286.0], [253.0, 1293.5], [252.0, 1295.6666666666667], [249.0, 1293.0], [270.0, 1297.0], [271.0, 1302.0], [269.0, 1295.0], [268.0, 1299.0], [267.0, 1297.0], [266.0, 1293.0], [265.0, 1297.5], [264.0, 1296.5], [263.0, 1292.0], [256.0, 1292.5], [258.0, 1295.0], [257.0, 1295.0], [262.0, 1300.0], [261.0, 1296.0], [260.0, 1287.5], [286.0, 1335.0], [287.0, 1338.75], [285.0, 1337.5], [284.0, 1337.0], [283.0, 1336.0], [282.0, 1329.0], [281.0, 1329.0], [280.0, 1320.6666666666667], [279.0, 1320.0], [272.0, 1303.5], [275.0, 1321.0], [274.0, 1312.25], [278.0, 1319.3333333333333], [276.0, 1309.0], [301.0, 1369.0], [302.0, 1378.0], [300.0, 1369.0], [290.0, 1344.0], [289.0, 1340.5], [288.0, 1338.0], [299.0, 1370.0], [298.0, 1367.0], [297.0, 1364.0], [296.0, 1359.0], [295.0, 1366.0], [294.0, 1353.5], [293.0, 1355.0], [292.0, 1345.6666666666667], [318.0, 1398.0], [319.0, 1414.0], [317.0, 1399.0], [316.0, 1408.0], [315.0, 1394.0], [314.0, 1399.0], [312.0, 1389.0], [311.0, 1401.0], [305.0, 1378.0], [304.0, 1397.5], [307.0, 1380.0], [306.0, 1380.0], [310.0, 1384.0], [309.0, 1384.0], [308.0, 1392.5], [333.0, 1420.0], [334.0, 1426.0], [332.0, 1422.0], [323.0, 1412.3333333333333], [322.0, 1410.0], [321.0, 1410.0], [320.0, 1403.0], [331.0, 1429.0], [330.0, 1427.5], [328.0, 1420.0], [327.0, 1419.0], [326.0, 1422.0], [325.0, 1421.0], [324.0, 1418.0], [344.0, 1450.25], [349.0, 1467.0], [339.0, 1423.0], [338.0, 1433.0], [337.0, 1422.0], [336.0, 1428.5], [347.0, 1462.5], [346.0, 1449.0], [345.0, 1454.6666666666667], [343.0, 1439.0], [342.0, 1434.0], [341.0, 1432.0], [340.0, 1427.0], [366.0, 1493.0], [367.0, 1500.0], [365.0, 1491.0], [364.0, 1492.0], [363.0, 1486.0], [362.0, 1484.0], [361.0, 1485.0], [360.0, 1484.0], [359.0, 1484.0], [355.0, 1471.0], [354.0, 1482.5], [358.0, 1488.0], [356.0, 1483.0], [382.0, 1503.0], [383.0, 1504.0], [381.0, 1504.0], [380.0, 1504.0], [379.0, 1503.0], [378.0, 1502.0], [377.0, 1500.0], [376.0, 1498.5], [374.0, 1496.0], [370.0, 1499.0], [369.0, 1497.5], [373.0, 1503.0], [372.0, 1499.0], [387.0, 1522.0], [397.0, 1511.0], [396.0, 1516.0], [386.0, 1518.5], [385.0, 1511.0], [384.0, 1508.5], [395.0, 1521.0], [393.0, 1522.0], [392.0, 1524.0], [391.0, 1522.0], [390.0, 1527.0], [389.0, 1524.0], [388.0, 1521.0], [414.0, 1534.75], [415.0, 1535.0], [413.0, 1534.0], [412.0, 1535.5], [411.0, 1535.5], [410.0, 1539.0], [409.0, 1518.0], [408.0, 1535.5], [406.0, 1522.0], [403.0, 1524.0], [402.0, 1526.0], [401.0, 1527.0], [404.0, 1526.0], [424.0, 1545.0], [428.0, 1565.0], [419.0, 1541.0], [418.0, 1542.0], [417.0, 1535.0], [416.0, 1536.0], [427.0, 1562.0], [426.0, 1559.0], [425.0, 1551.0], [423.0, 1551.0], [422.0, 1550.0], [421.0, 1556.0], [420.0, 1539.5], [446.0, 1620.4], [447.0, 1636.0], [445.0, 1607.0], [444.0, 1605.0], [443.0, 1605.0], [442.0, 1601.0], [441.0, 1607.6], [440.0, 1593.0], [439.0, 1596.5], [433.0, 1576.25], [432.0, 1588.5454545454545], [435.0, 1581.0], [434.0, 1582.3333333333333], [438.0, 1590.0], [437.0, 1605.0], [461.0, 1663.0], [462.0, 1669.0], [460.0, 1666.0], [459.0, 1680.0], [457.0, 1663.0], [456.0, 1683.6666666666667], [453.0, 1663.4], [451.0, 1657.0], [450.0, 1654.75], [448.0, 1636.3333333333333], [478.0, 1709.0], [479.0, 1713.0], [477.0, 1696.0], [476.0, 1703.5], [475.0, 1699.5], [473.0, 1700.5], [472.0, 1694.6666666666667], [471.0, 1688.3333333333333], [464.0, 1672.0], [467.0, 1672.0], [465.0, 1674.0], [470.0, 1688.3333333333333], [469.0, 1677.0], [494.0, 2553.5789473684217], [495.0, 2569.9999999999995], [493.0, 2539.4285714285716], [492.0, 2523.0555555555557], [491.0, 2507.0], [490.0, 2497.9166666666665], [489.0, 2478.1153846153848], [488.0, 2463.6666666666665], [487.0, 2266.4920634920645], [481.0, 1738.0], [483.0, 1810.96875], [482.0, 1763.2857142857142], [486.0, 1986.340425531915], [485.0, 1901.8], [484.0, 1869.9677419354837], [510.0, 2621.0], [511.0, 2619.0], [509.0, 2613.75], [508.0, 2615.0], [507.0, 2617.0], [506.0, 2610.0], [505.0, 2618.5], [504.0, 2602.25], [503.0, 2604.0000000000005], [496.0, 2589.9375000000005], [499.0, 2596.2000000000003], [497.0, 2585.6666666666665], [502.0, 2599.2], [501.0, 2590.0], [500.0, 2592.1428571428573], [536.0, 2644.0], [540.0, 2639.0], [543.0, 2640.0], [529.0, 2633.5], [528.0, 2629.5], [531.0, 2640.5], [530.0, 2635.8], [542.0, 2636.0], [541.0, 2643.0], [539.0, 2643.0], [538.0, 2639.0], [537.0, 2640.0], [527.0, 2628.5], [513.0, 2618.0], [512.0, 2618.5], [515.0, 2617.0], [514.0, 2615.0], [517.0, 2616.0], [516.0, 2620.0], [519.0, 2617.0], [518.0, 2622.0], [526.0, 2630.0], [525.0, 2630.0], [524.0, 2633.3333333333335], [523.0, 2632.125], [522.0, 2624.25], [521.0, 2623.0], [520.0, 2620.75], [535.0, 2640.0], [534.0, 2640.6666666666665], [572.0, 2612.0], [575.0, 2616.1111111111113], [560.0, 2626.4444444444443], [563.0, 2624.25], [561.0, 2622.6], [565.0, 2622.0], [564.0, 2621.6], [574.0, 2617.0], [573.0, 2612.5], [571.0, 2615.0], [570.0, 2613.0], [569.0, 2617.6666666666665], [568.0, 2615.0], [559.0, 2635.3333333333335], [544.0, 2639.5], [546.0, 2639.0], [545.0, 2639.75], [549.0, 2640.7777777777774], [547.0, 2636.0], [551.0, 2632.0], [550.0, 2637.5], [558.0, 2635.6666666666665], [557.0, 2636.0], [556.0, 2637.0], [555.0, 2635.0], [554.0, 2632.0], [553.0, 2631.0], [552.0, 2636.0], [567.0, 2622.0], [566.0, 2621.0], [600.0, 2606.0], [604.0, 2609.5], [607.0, 2614.333333333333], [593.0, 2606.25], [592.0, 2607.4], [597.0, 2607.0], [596.0, 2611.5], [606.0, 2620.5], [605.0, 2612.4], [603.0, 2607.5], [602.0, 2603.6666666666665], [601.0, 2604.0], [591.0, 2605.5], [577.0, 2615.0], [576.0, 2612.0], [579.0, 2614.6666666666665], [578.0, 2616.0], [581.0, 2601.0], [580.0, 2607.277777777778], [583.0, 2602.0], [582.0, 2602.333333333333], [590.0, 2602.0], [589.0, 2602.0], [588.0, 2597.5], [587.0, 2602.0], [586.0, 2601.0], [585.0, 2601.0], [584.0, 2599.0], [599.0, 2603.3333333333335], [598.0, 2600.0], [632.0, 2617.5], [637.0, 2618.0], [639.0, 2614.5], [626.0, 2617.0], [624.0, 2611.6666666666665], [636.0, 2616.3333333333335], [634.0, 2614.6], [633.0, 2617.0], [623.0, 2607.0], [609.0, 2617.0], [608.0, 2616.5], [612.0, 2621.5], [610.0, 2617.5], [615.0, 2614.6666666666665], [613.0, 2611.0], [621.0, 2611.0], [620.0, 2614.3333333333335], [618.0, 2615.5], [617.0, 2617.0], [616.0, 2616.666666666667], [630.0, 2611.0], [629.0, 2612.0], [628.0, 2611.0], [627.0, 2604.0], [668.0, 2634.0], [671.0, 2636.0], [656.0, 2621.0], [658.0, 2623.0], [657.0, 2620.0], [660.0, 2621.0], [659.0, 2623.0], [670.0, 2633.0], [669.0, 2631.0], [667.0, 2630.0], [666.0, 2632.0], [665.0, 2630.0], [664.0, 2627.6666666666665], [655.0, 2624.0], [640.0, 2620.5], [643.0, 2614.3333333333335], [642.0, 2607.5], [645.0, 2617.0], [644.0, 2617.0], [647.0, 2623.0], [646.0, 2620.0], [654.0, 2625.6], [653.0, 2625.5], [652.0, 2622.0], [651.0, 2623.5], [650.0, 2621.0], [649.0, 2620.5], [648.0, 2625.5], [663.0, 2626.0], [661.0, 2628.0], [702.0, 2681.0000000000005], [691.0, 2666.75], [703.0, 2677.0], [688.0, 2657.0], [697.0, 2682.0], [679.0, 2649.0], [678.0, 2649.3333333333335], [677.0, 2646.0], [676.0, 2640.0], [675.0, 2641.0], [674.0, 2641.0], [673.0, 2639.3333333333335], [672.0, 2639.5], [687.0, 2657.1428571428573], [686.0, 2655.6666666666665], [685.0, 2650.0], [684.0, 2652.6666666666665], [683.0, 2652.0], [682.0, 2652.5], [681.0, 2650.0], [680.0, 2650.3333333333335], [694.0, 2666.5], [693.0, 2662.0], [692.0, 2664.0], [690.0, 2664.5], [689.0, 2657.0], [732.0, 2684.0], [735.0, 2684.3333333333335], [721.0, 2675.0], [720.0, 2679.0], [723.0, 2675.0], [722.0, 2678.0], [725.0, 2679.0], [724.0, 2677.0], [734.0, 2684.5], [733.0, 2683.5], [731.0, 2682.5], [730.0, 2679.2499999999995], [729.0, 2678.0], [728.0, 2674.5], [719.0, 2675.25], [705.0, 2674.0], [704.0, 2675.5], [707.0, 2675.0], [706.0, 2674.0], [709.0, 2675.0], [708.0, 2675.0], [711.0, 2671.0], [710.0, 2670.25], [718.0, 2675.0], [717.0, 2674.5], [716.0, 2674.0], [715.0, 2672.3333333333335], [714.0, 2675.3333333333335], [713.0, 2675.6666666666665], [727.0, 2677.0], [726.0, 2676.0], [749.0, 2706.9999999999995], [750.0, 6334.045880374723], [737.0, 2712.5], [736.0, 2685.0], [739.0, 2688.5], [738.0, 2689.0], [748.0, 2704.5], [747.0, 2704.066666666666], [746.0, 2698.3333333333335], [745.0, 2696.0], [744.0, 2696.45], [743.0, 2695.1538461538457], [742.0, 2695.857142857143], [741.0, 2692.4666666666667], [740.0, 2688.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[657.0349999999988, 5003.076833333319]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 750.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4215.483333333334, "minX": 1.69670298E12, "maxY": 214932.85, "series": [{"data": [[1.69670298E12, 116811.16666666667], [1.69670304E12, 214932.85]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69670298E12, 4215.483333333334], [1.69670304E12, 11422.016666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69670304E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2739.824557146325, "minX": 1.69670298E12, "maxY": 9966.814262905797, "series": [{"data": [[1.69670298E12, 9966.814262905797], [1.69670304E12, 2739.824557146325]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69670304E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2739.476583353554, "minX": 1.69670298E12, "maxY": 9966.786056412993, "series": [{"data": [[1.69670298E12, 9966.786056412993], [1.69670304E12, 2739.476583353554]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69670304E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 87.10531424411543, "minX": 1.69670298E12, "maxY": 2962.57158062799, "series": [{"data": [[1.69670298E12, 2962.57158062799], [1.69670304E12, 87.10531424411543]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69670304E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 106.0, "minX": 1.69670298E12, "maxY": 33506.0, "series": [{"data": [[1.69670298E12, 27850.0], [1.69670304E12, 33506.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69670298E12, 1215.0], [1.69670304E12, 106.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69670298E12, 22780.0], [1.69670304E12, 3049.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69670298E12, 27094.600000000002], [1.69670304E12, 27963.599999999995]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69670298E12, 4237.0], [1.69670304E12, 2639.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.69670298E12, 23784.0], [1.69670304E12, 3068.8999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69670304E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 546.0, "minX": 8.0, "maxY": 22661.0, "series": [{"data": [[8.0, 19544.5], [132.0, 2291.0], [187.0, 546.0], [193.0, 22661.0], [208.0, 20226.5], [215.0, 2153.0], [222.0, 2411.5], [217.0, 3052.0], [240.0, 2902.0], [249.0, 3049.0], [266.0, 3049.0], [270.0, 2661.5], [276.0, 2735.5], [273.0, 2884.0], [295.0, 2620.0], [297.0, 2544.0], [307.0, 2701.0], [335.0, 1794.0], [338.0, 1298.0], [377.0, 1713.0], [426.0, 4500.0], [113.0, 2378.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 426.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 545.0, "minX": 8.0, "maxY": 22661.0, "series": [{"data": [[8.0, 19540.5], [132.0, 2291.0], [187.0, 545.0], [193.0, 22661.0], [208.0, 20226.5], [215.0, 2153.0], [222.0, 2411.5], [217.0, 3052.0], [240.0, 2902.0], [249.0, 3049.0], [266.0, 3049.0], [270.0, 2661.0], [276.0, 2735.5], [273.0, 2884.0], [295.0, 2619.0], [297.0, 2544.0], [307.0, 2701.0], [335.0, 1794.0], [338.0, 1297.0], [377.0, 1713.0], [426.0, 4500.0], [113.0, 2378.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 426.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 43.81666666666667, "minX": 1.69670298E12, "maxY": 56.18333333333333, "series": [{"data": [[1.69670298E12, 43.81666666666667], [1.69670304E12, 56.18333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69670304E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 31.316666666666666, "minX": 1.69670298E12, "maxY": 68.68333333333334, "series": [{"data": [[1.69670298E12, 31.316666666666666], [1.69670304E12, 68.68333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69670304E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 31.316666666666666, "minX": 1.69670298E12, "maxY": 68.68333333333334, "series": [{"data": [[1.69670298E12, 31.316666666666666], [1.69670304E12, 68.68333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69670304E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 31.316666666666666, "minX": 1.69670298E12, "maxY": 68.68333333333334, "series": [{"data": [[1.69670298E12, 31.316666666666666], [1.69670304E12, 68.68333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69670304E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

