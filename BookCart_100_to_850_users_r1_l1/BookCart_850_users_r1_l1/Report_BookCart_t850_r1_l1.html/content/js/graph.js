/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 109.0, "minX": 0.0, "maxY": 20224.0, "series": [{"data": [[0.0, 109.0], [0.1, 463.0], [0.2, 645.0], [0.3, 736.0], [0.4, 1106.0], [0.5, 1191.0], [0.6, 1217.0], [0.7, 1237.0], [0.8, 1349.0], [0.9, 1358.0], [1.0, 1371.0], [1.1, 1376.0], [1.2, 1385.0], [1.3, 1388.0], [1.4, 1395.0], [1.5, 1400.0], [1.6, 1402.0], [1.7, 1411.0], [1.8, 1427.0], [1.9, 1447.0], [2.0, 1459.0], [2.1, 1464.0], [2.2, 1469.0], [2.3, 1489.0], [2.4, 1508.0], [2.5, 1529.0], [2.6, 1535.0], [2.7, 1538.0], [2.8, 1546.0], [2.9, 1554.0], [3.0, 1561.0], [3.1, 1568.0], [3.2, 1571.0], [3.3, 1579.0], [3.4, 1590.0], [3.5, 1602.0], [3.6, 1605.0], [3.7, 1613.0], [3.8, 1617.0], [3.9, 1624.0], [4.0, 1629.0], [4.1, 1632.0], [4.2, 1635.0], [4.3, 1638.0], [4.4, 1639.0], [4.5, 1642.0], [4.6, 1644.0], [4.7, 1646.0], [4.8, 1647.0], [4.9, 1648.0], [5.0, 1649.0], [5.1, 1649.0], [5.2, 1651.0], [5.3, 1652.0], [5.4, 1653.0], [5.5, 1653.0], [5.6, 1654.0], [5.7, 1656.0], [5.8, 1659.0], [5.9, 1663.0], [6.0, 1668.0], [6.1, 1673.0], [6.2, 1682.0], [6.3, 1691.0], [6.4, 1699.0], [6.5, 1717.0], [6.6, 1726.0], [6.7, 1750.0], [6.8, 1763.0], [6.9, 1784.0], [7.0, 1817.0], [7.1, 1931.0], [7.2, 2020.0], [7.3, 2116.0], [7.4, 2123.0], [7.5, 2127.0], [7.6, 2131.0], [7.7, 2134.0], [7.8, 2136.0], [7.9, 2140.0], [8.0, 2142.0], [8.1, 2144.0], [8.2, 2147.0], [8.3, 2148.0], [8.4, 2150.0], [8.5, 2151.0], [8.6, 2154.0], [8.7, 2156.0], [8.8, 2159.0], [8.9, 2161.0], [9.0, 2164.0], [9.1, 2166.0], [9.2, 2169.0], [9.3, 2172.0], [9.4, 2178.0], [9.5, 2188.0], [9.6, 2195.0], [9.7, 2207.0], [9.8, 2212.0], [9.9, 2214.0], [10.0, 2221.0], [10.1, 2228.0], [10.2, 2246.0], [10.3, 2275.0], [10.4, 2280.0], [10.5, 2290.0], [10.6, 2297.0], [10.7, 2315.0], [10.8, 2327.0], [10.9, 2338.0], [11.0, 2344.0], [11.1, 2357.0], [11.2, 2365.0], [11.3, 2370.0], [11.4, 2376.0], [11.5, 2378.0], [11.6, 2381.0], [11.7, 2386.0], [11.8, 2388.0], [11.9, 2390.0], [12.0, 2393.0], [12.1, 2394.0], [12.2, 2396.0], [12.3, 2397.0], [12.4, 2399.0], [12.5, 2400.0], [12.6, 2402.0], [12.7, 2404.0], [12.8, 2406.0], [12.9, 2409.0], [13.0, 2410.0], [13.1, 2417.0], [13.2, 2423.0], [13.3, 2433.0], [13.4, 2445.0], [13.5, 2460.0], [13.6, 2465.0], [13.7, 2478.0], [13.8, 2488.0], [13.9, 2499.0], [14.0, 2503.0], [14.1, 2508.0], [14.2, 2513.0], [14.3, 2516.0], [14.4, 2518.0], [14.5, 2523.0], [14.6, 2528.0], [14.7, 2533.0], [14.8, 2543.0], [14.9, 2547.0], [15.0, 2551.0], [15.1, 2556.0], [15.2, 2564.0], [15.3, 2570.0], [15.4, 2574.0], [15.5, 2577.0], [15.6, 2580.0], [15.7, 2582.0], [15.8, 2586.0], [15.9, 2592.0], [16.0, 2596.0], [16.1, 2601.0], [16.2, 2610.0], [16.3, 2618.0], [16.4, 2621.0], [16.5, 2627.0], [16.6, 2634.0], [16.7, 2638.0], [16.8, 2642.0], [16.9, 2644.0], [17.0, 2648.0], [17.1, 2651.0], [17.2, 2656.0], [17.3, 2660.0], [17.4, 2665.0], [17.5, 2668.0], [17.6, 2672.0], [17.7, 2674.0], [17.8, 2676.0], [17.9, 2677.0], [18.0, 2680.0], [18.1, 2683.0], [18.2, 2685.0], [18.3, 2688.0], [18.4, 2690.0], [18.5, 2692.0], [18.6, 2695.0], [18.7, 2699.0], [18.8, 2701.0], [18.9, 2703.0], [19.0, 2705.0], [19.1, 2710.0], [19.2, 2716.0], [19.3, 2725.0], [19.4, 2731.0], [19.5, 2739.0], [19.6, 2743.0], [19.7, 2747.0], [19.8, 2750.0], [19.9, 2753.0], [20.0, 2758.0], [20.1, 2760.0], [20.2, 2763.0], [20.3, 2767.0], [20.4, 2773.0], [20.5, 2776.0], [20.6, 2779.0], [20.7, 2782.0], [20.8, 2785.0], [20.9, 2787.0], [21.0, 2789.0], [21.1, 2791.0], [21.2, 2796.0], [21.3, 2799.0], [21.4, 2803.0], [21.5, 2806.0], [21.6, 2810.0], [21.7, 2814.0], [21.8, 2816.0], [21.9, 2820.0], [22.0, 2825.0], [22.1, 2828.0], [22.2, 2832.0], [22.3, 2836.0], [22.4, 2839.0], [22.5, 2844.0], [22.6, 2847.0], [22.7, 2850.0], [22.8, 2853.0], [22.9, 2857.0], [23.0, 2861.0], [23.1, 2865.0], [23.2, 2869.0], [23.3, 2873.0], [23.4, 2878.0], [23.5, 2879.0], [23.6, 2883.0], [23.7, 2886.0], [23.8, 2891.0], [23.9, 2894.0], [24.0, 2897.0], [24.1, 2900.0], [24.2, 2907.0], [24.3, 2910.0], [24.4, 2913.0], [24.5, 2918.0], [24.6, 2923.0], [24.7, 2926.0], [24.8, 2928.0], [24.9, 2931.0], [25.0, 2932.0], [25.1, 2935.0], [25.2, 2937.0], [25.3, 2941.0], [25.4, 2945.0], [25.5, 2947.0], [25.6, 2951.0], [25.7, 2955.0], [25.8, 2958.0], [25.9, 2960.0], [26.0, 2963.0], [26.1, 2967.0], [26.2, 2969.0], [26.3, 2971.0], [26.4, 2973.0], [26.5, 2974.0], [26.6, 2975.0], [26.7, 2976.0], [26.8, 2977.0], [26.9, 2978.0], [27.0, 2979.0], [27.1, 2980.0], [27.2, 2981.0], [27.3, 2982.0], [27.4, 2982.0], [27.5, 2983.0], [27.6, 2984.0], [27.7, 2984.0], [27.8, 2985.0], [27.9, 2986.0], [28.0, 2986.0], [28.1, 2987.0], [28.2, 2988.0], [28.3, 2988.0], [28.4, 2989.0], [28.5, 2990.0], [28.6, 2991.0], [28.7, 2991.0], [28.8, 2992.0], [28.9, 2992.0], [29.0, 2993.0], [29.1, 2993.0], [29.2, 2994.0], [29.3, 2995.0], [29.4, 2995.0], [29.5, 2997.0], [29.6, 2998.0], [29.7, 2999.0], [29.8, 3000.0], [29.9, 3002.0], [30.0, 3002.0], [30.1, 3004.0], [30.2, 3009.0], [30.3, 3011.0], [30.4, 3015.0], [30.5, 3017.0], [30.6, 3020.0], [30.7, 3022.0], [30.8, 3026.0], [30.9, 3030.0], [31.0, 3033.0], [31.1, 3034.0], [31.2, 3038.0], [31.3, 3040.0], [31.4, 3041.0], [31.5, 3042.0], [31.6, 3045.0], [31.7, 3048.0], [31.8, 3052.0], [31.9, 3055.0], [32.0, 3057.0], [32.1, 3059.0], [32.2, 3061.0], [32.3, 3063.0], [32.4, 3064.0], [32.5, 3065.0], [32.6, 3068.0], [32.7, 3071.0], [32.8, 3075.0], [32.9, 3077.0], [33.0, 3080.0], [33.1, 3082.0], [33.2, 3083.0], [33.3, 3085.0], [33.4, 3086.0], [33.5, 3087.0], [33.6, 3088.0], [33.7, 3089.0], [33.8, 3092.0], [33.9, 3092.0], [34.0, 3094.0], [34.1, 3095.0], [34.2, 3097.0], [34.3, 3098.0], [34.4, 3099.0], [34.5, 3100.0], [34.6, 3102.0], [34.7, 3103.0], [34.8, 3104.0], [34.9, 3105.0], [35.0, 3107.0], [35.1, 3108.0], [35.2, 3110.0], [35.3, 3112.0], [35.4, 3114.0], [35.5, 3115.0], [35.6, 3116.0], [35.7, 3117.0], [35.8, 3118.0], [35.9, 3119.0], [36.0, 3120.0], [36.1, 3122.0], [36.2, 3123.0], [36.3, 3125.0], [36.4, 3126.0], [36.5, 3128.0], [36.6, 3131.0], [36.7, 3133.0], [36.8, 3134.0], [36.9, 3136.0], [37.0, 3137.0], [37.1, 3138.0], [37.2, 3139.0], [37.3, 3139.0], [37.4, 3140.0], [37.5, 3140.0], [37.6, 3141.0], [37.7, 3141.0], [37.8, 3142.0], [37.9, 3142.0], [38.0, 3143.0], [38.1, 3143.0], [38.2, 3144.0], [38.3, 3144.0], [38.4, 3144.0], [38.5, 3145.0], [38.6, 3145.0], [38.7, 3145.0], [38.8, 3146.0], [38.9, 3146.0], [39.0, 3147.0], [39.1, 3147.0], [39.2, 3147.0], [39.3, 3147.0], [39.4, 3148.0], [39.5, 3148.0], [39.6, 3148.0], [39.7, 3149.0], [39.8, 3149.0], [39.9, 3149.0], [40.0, 3149.0], [40.1, 3150.0], [40.2, 3150.0], [40.3, 3150.0], [40.4, 3150.0], [40.5, 3150.0], [40.6, 3151.0], [40.7, 3151.0], [40.8, 3151.0], [40.9, 3151.0], [41.0, 3151.0], [41.1, 3152.0], [41.2, 3152.0], [41.3, 3152.0], [41.4, 3152.0], [41.5, 3152.0], [41.6, 3152.0], [41.7, 3152.0], [41.8, 3153.0], [41.9, 3153.0], [42.0, 3153.0], [42.1, 3153.0], [42.2, 3153.0], [42.3, 3154.0], [42.4, 3154.0], [42.5, 3154.0], [42.6, 3154.0], [42.7, 3155.0], [42.8, 3155.0], [42.9, 3156.0], [43.0, 3156.0], [43.1, 3156.0], [43.2, 3156.0], [43.3, 3157.0], [43.4, 3157.0], [43.5, 3157.0], [43.6, 3158.0], [43.7, 3158.0], [43.8, 3158.0], [43.9, 3159.0], [44.0, 3159.0], [44.1, 3160.0], [44.2, 3160.0], [44.3, 3160.0], [44.4, 3161.0], [44.5, 3161.0], [44.6, 3161.0], [44.7, 3161.0], [44.8, 3162.0], [44.9, 3162.0], [45.0, 3163.0], [45.1, 3163.0], [45.2, 3163.0], [45.3, 3164.0], [45.4, 3164.0], [45.5, 3164.0], [45.6, 3165.0], [45.7, 3165.0], [45.8, 3165.0], [45.9, 3166.0], [46.0, 3167.0], [46.1, 3167.0], [46.2, 3168.0], [46.3, 3169.0], [46.4, 3170.0], [46.5, 3172.0], [46.6, 3173.0], [46.7, 3175.0], [46.8, 3176.0], [46.9, 3178.0], [47.0, 3181.0], [47.1, 3182.0], [47.2, 3185.0], [47.3, 3186.0], [47.4, 3189.0], [47.5, 3191.0], [47.6, 3194.0], [47.7, 3195.0], [47.8, 3198.0], [47.9, 3200.0], [48.0, 3201.0], [48.1, 3204.0], [48.2, 3206.0], [48.3, 3209.0], [48.4, 3212.0], [48.5, 3215.0], [48.6, 3217.0], [48.7, 3219.0], [48.8, 3219.0], [48.9, 3221.0], [49.0, 3223.0], [49.1, 3224.0], [49.2, 3225.0], [49.3, 3228.0], [49.4, 3231.0], [49.5, 3232.0], [49.6, 3234.0], [49.7, 3235.0], [49.8, 3236.0], [49.9, 3237.0], [50.0, 3238.0], [50.1, 3239.0], [50.2, 3240.0], [50.3, 3242.0], [50.4, 3243.0], [50.5, 3245.0], [50.6, 3246.0], [50.7, 3248.0], [50.8, 3250.0], [50.9, 3252.0], [51.0, 3253.0], [51.1, 3255.0], [51.2, 3256.0], [51.3, 3257.0], [51.4, 3260.0], [51.5, 3262.0], [51.6, 3264.0], [51.7, 3265.0], [51.8, 3267.0], [51.9, 3270.0], [52.0, 3272.0], [52.1, 3272.0], [52.2, 3274.0], [52.3, 3277.0], [52.4, 3278.0], [52.5, 3280.0], [52.6, 3281.0], [52.7, 3284.0], [52.8, 3286.0], [52.9, 3287.0], [53.0, 3290.0], [53.1, 3290.0], [53.2, 3292.0], [53.3, 3294.0], [53.4, 3297.0], [53.5, 3299.0], [53.6, 3301.0], [53.7, 3304.0], [53.8, 3306.0], [53.9, 3310.0], [54.0, 3311.0], [54.1, 3313.0], [54.2, 3316.0], [54.3, 3319.0], [54.4, 3322.0], [54.5, 3324.0], [54.6, 3327.0], [54.7, 3331.0], [54.8, 3335.0], [54.9, 3340.0], [55.0, 3345.0], [55.1, 3351.0], [55.2, 3354.0], [55.3, 3358.0], [55.4, 3361.0], [55.5, 3366.0], [55.6, 3370.0], [55.7, 3373.0], [55.8, 3380.0], [55.9, 3387.0], [56.0, 3391.0], [56.1, 3396.0], [56.2, 3402.0], [56.3, 3411.0], [56.4, 3421.0], [56.5, 3424.0], [56.6, 3427.0], [56.7, 3431.0], [56.8, 3437.0], [56.9, 3440.0], [57.0, 3443.0], [57.1, 3446.0], [57.2, 3453.0], [57.3, 3460.0], [57.4, 3472.0], [57.5, 3478.0], [57.6, 3487.0], [57.7, 3489.0], [57.8, 3492.0], [57.9, 3494.0], [58.0, 3495.0], [58.1, 3496.0], [58.2, 3496.0], [58.3, 3497.0], [58.4, 3498.0], [58.5, 3498.0], [58.6, 3499.0], [58.7, 3499.0], [58.8, 3500.0], [58.9, 3500.0], [59.0, 3500.0], [59.1, 3501.0], [59.2, 3501.0], [59.3, 3502.0], [59.4, 3502.0], [59.5, 3503.0], [59.6, 3503.0], [59.7, 3503.0], [59.8, 3504.0], [59.9, 3504.0], [60.0, 3504.0], [60.1, 3504.0], [60.2, 3505.0], [60.3, 3505.0], [60.4, 3505.0], [60.5, 3505.0], [60.6, 3506.0], [60.7, 3506.0], [60.8, 3506.0], [60.9, 3507.0], [61.0, 3508.0], [61.1, 3508.0], [61.2, 3508.0], [61.3, 3509.0], [61.4, 3510.0], [61.5, 3511.0], [61.6, 3512.0], [61.7, 3513.0], [61.8, 3514.0], [61.9, 3515.0], [62.0, 3516.0], [62.1, 3517.0], [62.2, 3517.0], [62.3, 3518.0], [62.4, 3519.0], [62.5, 3519.0], [62.6, 3520.0], [62.7, 3520.0], [62.8, 3521.0], [62.9, 3521.0], [63.0, 3521.0], [63.1, 3522.0], [63.2, 3522.0], [63.3, 3523.0], [63.4, 3523.0], [63.5, 3524.0], [63.6, 3524.0], [63.7, 3525.0], [63.8, 3525.0], [63.9, 3525.0], [64.0, 3526.0], [64.1, 3526.0], [64.2, 3526.0], [64.3, 3526.0], [64.4, 3527.0], [64.5, 3527.0], [64.6, 3527.0], [64.7, 3527.0], [64.8, 3528.0], [64.9, 3528.0], [65.0, 3528.0], [65.1, 3529.0], [65.2, 3529.0], [65.3, 3529.0], [65.4, 3529.0], [65.5, 3529.0], [65.6, 3529.0], [65.7, 3530.0], [65.8, 3530.0], [65.9, 3530.0], [66.0, 3530.0], [66.1, 3530.0], [66.2, 3530.0], [66.3, 3530.0], [66.4, 3530.0], [66.5, 3530.0], [66.6, 3531.0], [66.7, 3531.0], [66.8, 3531.0], [66.9, 3531.0], [67.0, 3531.0], [67.1, 3531.0], [67.2, 3532.0], [67.3, 3532.0], [67.4, 3532.0], [67.5, 3532.0], [67.6, 3533.0], [67.7, 3533.0], [67.8, 3533.0], [67.9, 3533.0], [68.0, 3534.0], [68.1, 3534.0], [68.2, 3535.0], [68.3, 3535.0], [68.4, 3536.0], [68.5, 3537.0], [68.6, 3537.0], [68.7, 3538.0], [68.8, 3539.0], [68.9, 3540.0], [69.0, 3541.0], [69.1, 3541.0], [69.2, 3542.0], [69.3, 3543.0], [69.4, 3544.0], [69.5, 3544.0], [69.6, 3545.0], [69.7, 3545.0], [69.8, 3546.0], [69.9, 3546.0], [70.0, 3547.0], [70.1, 3548.0], [70.2, 3549.0], [70.3, 3550.0], [70.4, 3551.0], [70.5, 3552.0], [70.6, 3552.0], [70.7, 3553.0], [70.8, 3554.0], [70.9, 3555.0], [71.0, 3556.0], [71.1, 3557.0], [71.2, 3558.0], [71.3, 3560.0], [71.4, 3560.0], [71.5, 3561.0], [71.6, 3562.0], [71.7, 3564.0], [71.8, 3565.0], [71.9, 3568.0], [72.0, 3569.0], [72.1, 3569.0], [72.2, 3571.0], [72.3, 3571.0], [72.4, 3573.0], [72.5, 3574.0], [72.6, 3576.0], [72.7, 3577.0], [72.8, 3578.0], [72.9, 3579.0], [73.0, 3580.0], [73.1, 3582.0], [73.2, 3583.0], [73.3, 3585.0], [73.4, 3586.0], [73.5, 3587.0], [73.6, 3588.0], [73.7, 3589.0], [73.8, 3590.0], [73.9, 3592.0], [74.0, 3593.0], [74.1, 3598.0], [74.2, 3600.0], [74.3, 3602.0], [74.4, 3607.0], [74.5, 3611.0], [74.6, 3615.0], [74.7, 3617.0], [74.8, 3618.0], [74.9, 3619.0], [75.0, 3621.0], [75.1, 3624.0], [75.2, 3627.0], [75.3, 3632.0], [75.4, 3638.0], [75.5, 3645.0], [75.6, 3652.0], [75.7, 3655.0], [75.8, 3658.0], [75.9, 3661.0], [76.0, 3667.0], [76.1, 3670.0], [76.2, 3679.0], [76.3, 3684.0], [76.4, 3689.0], [76.5, 3692.0], [76.6, 3698.0], [76.7, 3702.0], [76.8, 3708.0], [76.9, 3717.0], [77.0, 3726.0], [77.1, 3735.0], [77.2, 3738.0], [77.3, 3742.0], [77.4, 3748.0], [77.5, 3752.0], [77.6, 3758.0], [77.7, 3768.0], [77.8, 3773.0], [77.9, 3775.0], [78.0, 3783.0], [78.1, 3794.0], [78.2, 3799.0], [78.3, 3799.0], [78.4, 3801.0], [78.5, 3805.0], [78.6, 3810.0], [78.7, 3812.0], [78.8, 3815.0], [78.9, 3817.0], [79.0, 3818.0], [79.1, 3819.0], [79.2, 3821.0], [79.3, 3823.0], [79.4, 3825.0], [79.5, 3828.0], [79.6, 3831.0], [79.7, 3834.0], [79.8, 3836.0], [79.9, 3845.0], [80.0, 3851.0], [80.1, 4285.0], [80.2, 5344.0], [80.3, 5526.0], [80.4, 5585.0], [80.5, 5590.0], [80.6, 5599.0], [80.7, 5603.0], [80.8, 5607.0], [80.9, 5614.0], [81.0, 5648.0], [81.1, 5653.0], [81.2, 5664.0], [81.3, 5666.0], [81.4, 5669.0], [81.5, 5678.0], [81.6, 5682.0], [81.7, 5692.0], [81.8, 5700.0], [81.9, 5707.0], [82.0, 5724.0], [82.1, 5744.0], [82.2, 5753.0], [82.3, 5764.0], [82.4, 5779.0], [82.5, 5784.0], [82.6, 5791.0], [82.7, 5794.0], [82.8, 5807.0], [82.9, 5808.0], [83.0, 5809.0], [83.1, 5814.0], [83.2, 5823.0], [83.3, 5829.0], [83.4, 5834.0], [83.5, 5835.0], [83.6, 5837.0], [83.7, 5839.0], [83.8, 5844.0], [83.9, 5850.0], [84.0, 5860.0], [84.1, 5875.0], [84.2, 5879.0], [84.3, 5886.0], [84.4, 5892.0], [84.5, 5905.0], [84.6, 5909.0], [84.7, 5915.0], [84.8, 5921.0], [84.9, 5927.0], [85.0, 5933.0], [85.1, 5935.0], [85.2, 5941.0], [85.3, 5944.0], [85.4, 5952.0], [85.5, 5957.0], [85.6, 5970.0], [85.7, 5977.0], [85.8, 5988.0], [85.9, 5991.0], [86.0, 6000.0], [86.1, 6005.0], [86.2, 6028.0], [86.3, 6048.0], [86.4, 6057.0], [86.5, 6074.0], [86.6, 6080.0], [86.7, 6093.0], [86.8, 6115.0], [86.9, 6118.0], [87.0, 6122.0], [87.1, 6125.0], [87.2, 6129.0], [87.3, 6138.0], [87.4, 6254.0], [87.5, 8989.0], [87.6, 9393.0], [87.7, 9556.0], [87.8, 9581.0], [87.9, 9654.0], [88.0, 9692.0], [88.1, 9747.0], [88.2, 9795.0], [88.3, 9856.0], [88.4, 9888.0], [88.5, 9897.0], [88.6, 9916.0], [88.7, 9942.0], [88.8, 9965.0], [88.9, 9979.0], [89.0, 10003.0], [89.1, 10025.0], [89.2, 10050.0], [89.3, 10077.0], [89.4, 10090.0], [89.5, 10105.0], [89.6, 10121.0], [89.7, 10139.0], [89.8, 10157.0], [89.9, 10178.0], [90.0, 10200.0], [90.1, 10234.0], [90.2, 10260.0], [90.3, 10277.0], [90.4, 10292.0], [90.5, 10325.0], [90.6, 10344.0], [90.7, 10367.0], [90.8, 10384.0], [90.9, 10401.0], [91.0, 10420.0], [91.1, 10453.0], [91.2, 10469.0], [91.3, 10493.0], [91.4, 10515.0], [91.5, 10533.0], [91.6, 10570.0], [91.7, 10620.0], [91.8, 10651.0], [91.9, 10697.0], [92.0, 10713.0], [92.1, 10760.0], [92.2, 10768.0], [92.3, 10783.0], [92.4, 10816.0], [92.5, 10842.0], [92.6, 10871.0], [92.7, 10887.0], [92.8, 10914.0], [92.9, 10950.0], [93.0, 10972.0], [93.1, 10987.0], [93.2, 11006.0], [93.3, 11050.0], [93.4, 11082.0], [93.5, 11092.0], [93.6, 11119.0], [93.7, 11134.0], [93.8, 11164.0], [93.9, 11184.0], [94.0, 11202.0], [94.1, 11215.0], [94.2, 11227.0], [94.3, 11247.0], [94.4, 11256.0], [94.5, 11276.0], [94.6, 11294.0], [94.7, 11318.0], [94.8, 11331.0], [94.9, 11346.0], [95.0, 11350.0], [95.1, 11366.0], [95.2, 11381.0], [95.3, 11388.0], [95.4, 11403.0], [95.5, 11416.0], [95.6, 11433.0], [95.7, 11450.0], [95.8, 11464.0], [95.9, 11480.0], [96.0, 11498.0], [96.1, 11515.0], [96.2, 11528.0], [96.3, 11539.0], [96.4, 11556.0], [96.5, 11566.0], [96.6, 11593.0], [96.7, 11608.0], [96.8, 11619.0], [96.9, 11629.0], [97.0, 11639.0], [97.1, 11658.0], [97.2, 11674.0], [97.3, 11695.0], [97.4, 11707.0], [97.5, 11713.0], [97.6, 11719.0], [97.7, 11741.0], [97.8, 11764.0], [97.9, 11780.0], [98.0, 11792.0], [98.1, 11805.0], [98.2, 11835.0], [98.3, 11872.0], [98.4, 11892.0], [98.5, 11927.0], [98.6, 11954.0], [98.7, 11980.0], [98.8, 12043.0], [98.9, 12102.0], [99.0, 12173.0], [99.1, 12235.0], [99.2, 12271.0], [99.3, 12339.0], [99.4, 12382.0], [99.5, 12437.0], [99.6, 12573.0], [99.7, 14143.0], [99.8, 17193.0], [99.9, 17645.0], [100.0, 20224.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 1050.0, "series": [{"data": [[100.0, 5.0], [300.0, 1.0], [400.0, 1.0], [500.0, 5.0], [600.0, 4.0], [700.0, 7.0], [800.0, 2.0], [1000.0, 2.0], [1100.0, 9.0], [1200.0, 18.0], [1300.0, 48.0], [1400.0, 60.0], [1500.0, 74.0], [1600.0, 201.0], [1700.0, 37.0], [1800.0, 7.0], [1900.0, 5.0], [2000.0, 9.0], [2100.0, 160.0], [2200.0, 66.0], [2300.0, 124.0], [2400.0, 102.0], [2500.0, 144.0], [2600.0, 183.0], [2700.0, 175.0], [2800.0, 186.0], [2900.0, 390.0], [3000.0, 316.0], [3100.0, 915.0], [3200.0, 385.0], [3300.0, 177.0], [3400.0, 176.0], [3500.0, 1050.0], [3600.0, 165.0], [3700.0, 116.0], [3800.0, 118.0], [3900.0, 1.0], [4200.0, 2.0], [4100.0, 2.0], [4600.0, 1.0], [4500.0, 2.0], [4700.0, 2.0], [5300.0, 2.0], [5600.0, 79.0], [5500.0, 24.0], [5400.0, 2.0], [5800.0, 115.0], [5700.0, 67.0], [6100.0, 44.0], [6000.0, 50.0], [5900.0, 105.0], [6200.0, 3.0], [6500.0, 2.0], [7300.0, 1.0], [8100.0, 1.0], [9200.0, 2.0], [9000.0, 3.0], [8800.0, 1.0], [8900.0, 1.0], [9100.0, 1.0], [9500.0, 12.0], [9300.0, 1.0], [9400.0, 3.0], [9600.0, 14.0], [9700.0, 14.0], [9800.0, 20.0], [9900.0, 31.0], [10000.0, 33.0], [10100.0, 35.0], [10200.0, 30.0], [10300.0, 30.0], [10400.0, 32.0], [10500.0, 21.0], [10600.0, 18.0], [10700.0, 29.0], [10800.0, 27.0], [10900.0, 28.0], [11000.0, 27.0], [11100.0, 28.0], [11200.0, 45.0], [11300.0, 50.0], [11400.0, 45.0], [11500.0, 43.0], [11600.0, 47.0], [11700.0, 49.0], [11800.0, 24.0], [11900.0, 20.0], [12000.0, 13.0], [12100.0, 7.0], [12200.0, 18.0], [12300.0, 12.0], [12400.0, 10.0], [12500.0, 1.0], [13600.0, 2.0], [13400.0, 2.0], [13500.0, 1.0], [14100.0, 3.0], [14200.0, 1.0], [15900.0, 1.0], [17100.0, 2.0], [17200.0, 3.0], [16400.0, 1.0], [16700.0, 1.0], [17400.0, 1.0], [17300.0, 1.0], [17800.0, 1.0], [17500.0, 1.0], [17900.0, 1.0], [17600.0, 1.0], [18000.0, 1.0], [18500.0, 1.0], [20200.0, 1.0], [19900.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6638.0, "series": [{"data": [[0.0, 7.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 155.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6638.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 751.0082098875615, "minX": 1.69670316E12, "maxY": 850.0, "series": [{"data": [[1.69670316E12, 850.0], [1.69670322E12, 751.0082098875615]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69670322E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 110.0, "minX": 1.0, "maxY": 11477.0, "series": [{"data": [[2.0, 111.0], [3.0, 110.0], [4.0, 1409.5], [5.0, 2652.0], [6.0, 2685.0], [7.0, 2858.0], [8.0, 2844.0], [10.0, 494.0], [11.0, 529.0], [12.0, 536.0], [13.0, 531.0], [14.0, 638.0], [15.0, 645.0], [16.0, 671.0], [17.0, 672.0], [19.0, 712.0], [20.0, 718.0], [21.0, 732.0], [22.0, 736.0], [23.0, 2220.0], [25.0, 2220.5], [26.0, 2225.0], [28.0, 1546.0], [29.0, 2336.0], [30.0, 797.0], [31.0, 2325.0], [33.0, 866.0], [32.0, 859.0], [35.0, 2459.0], [34.0, 2456.0], [37.0, 2466.0], [36.0, 2130.0], [39.0, 2141.0], [38.0, 2145.0], [41.0, 2485.0], [40.0, 2477.0], [43.0, 2231.0], [42.0, 2523.0], [45.0, 2290.0], [44.0, 2644.0], [47.0, 1018.0], [46.0, 2354.0], [49.0, 2280.0], [48.0, 2665.0], [51.0, 2675.0], [50.0, 2664.0], [53.0, 2347.0], [52.0, 2339.0], [55.0, 2359.0], [54.0, 2288.0], [57.0, 1698.5], [56.0, 2378.0], [59.0, 2332.0], [58.0, 2327.0], [61.0, 1106.0], [60.0, 2338.0], [63.0, 2342.0], [62.0, 2345.0], [67.0, 1182.0], [66.0, 2401.0], [65.0, 2433.0], [64.0, 2434.0], [70.0, 1185.0], [69.0, 1187.0], [68.0, 1183.0], [74.0, 1191.5], [72.0, 1807.0], [79.0, 2445.0], [78.0, 1206.0], [77.0, 1206.0], [76.0, 1810.0], [83.0, 1220.0], [82.0, 1219.0], [81.0, 2429.0], [80.0, 1214.0], [87.0, 1224.0], [86.0, 1224.0], [85.0, 1826.0], [91.0, 1237.0], [90.0, 2877.5], [89.0, 2433.0], [88.0, 2879.5], [95.0, 2403.666666666667], [94.0, 1249.0], [93.0, 1248.0], [92.0, 1241.0], [99.0, 1349.0], [98.0, 1351.0], [97.0, 1350.0], [96.0, 1350.0], [102.0, 1358.0], [101.0, 1353.0], [100.0, 1350.0], [107.0, 1360.0], [106.0, 1361.0], [105.0, 1363.0], [104.0, 1361.0], [111.0, 1372.3333333333333], [108.0, 1366.0], [115.0, 1376.0], [114.0, 1386.0], [113.0, 1371.0], [112.0, 1373.0], [119.0, 1371.0], [118.0, 1376.0], [116.0, 1392.5], [123.0, 2667.0], [122.0, 1383.5], [120.0, 1412.0], [127.0, 1396.0], [124.0, 1384.0], [135.0, 1391.0], [134.0, 1388.0], [133.0, 1387.0], [132.0, 1383.0], [131.0, 1385.0], [130.0, 1385.0], [129.0, 1385.0], [128.0, 1385.0], [143.0, 1399.0], [142.0, 1402.0], [141.0, 1394.0], [140.0, 1395.0], [139.0, 1406.0], [137.0, 1393.0], [136.0, 1391.0], [151.0, 1404.0], [150.0, 1404.0], [149.0, 1401.0], [148.0, 1402.0], [147.0, 1397.0], [146.0, 1397.0], [145.0, 1405.2], [159.0, 1436.0], [158.0, 1427.0], [157.0, 1429.0], [156.0, 1428.0], [155.0, 1425.0], [154.0, 1421.0], [153.0, 1412.5], [152.0, 1410.0], [167.0, 1453.0], [166.0, 1453.0], [165.0, 1447.0], [164.0, 1441.0], [163.0, 1449.75], [175.0, 1459.0], [174.0, 1465.0], [173.0, 1463.0], [172.0, 1458.0], [171.0, 1460.0], [170.0, 1458.0], [169.0, 1457.0], [168.0, 1455.0], [183.0, 1469.0], [182.0, 1470.0], [181.0, 1467.0], [180.0, 1469.0], [179.0, 1469.0], [178.0, 1465.0], [177.0, 1464.0], [176.0, 1463.0], [191.0, 1493.0], [190.0, 1487.0], [189.0, 1483.0], [187.0, 1477.0], [186.0, 1489.0], [185.0, 2806.5], [184.0, 1467.0], [199.0, 1508.0], [198.0, 1508.0], [197.0, 1508.0], [196.0, 2838.5], [195.0, 1496.0], [194.0, 1498.0], [193.0, 1493.0], [206.0, 1532.0], [205.0, 1530.0], [204.0, 1528.0], [203.0, 1529.0], [202.0, 1519.0], [201.0, 1517.0], [200.0, 1513.0], [215.0, 1552.0], [214.0, 1543.0], [213.0, 1537.0], [212.0, 1538.0], [211.0, 1540.0], [210.0, 1566.0], [209.0, 1541.0], [208.0, 1537.5], [223.0, 1535.0], [222.0, 1534.0], [220.0, 1613.0], [219.0, 1534.0], [218.0, 1535.0], [217.0, 1533.0], [216.0, 1573.0], [231.0, 2918.0], [230.0, 1546.0], [229.0, 2921.5], [228.0, 1550.0], [227.0, 1548.0], [226.0, 1544.0], [225.0, 1537.0], [224.0, 1535.0], [238.0, 1554.0], [237.0, 1555.0], [236.0, 1556.0], [235.0, 1557.0], [234.0, 1554.0], [233.0, 1549.0], [232.0, 1547.0], [247.0, 1570.0], [246.0, 1558.0], [245.0, 1561.0], [244.0, 1564.0], [243.0, 1572.0], [242.0, 1570.0], [241.0, 1568.0], [240.0, 1563.0], [254.0, 1575.0], [253.0, 1567.0], [252.0, 1567.0], [251.0, 1571.0], [250.0, 1568.0], [249.0, 1570.0], [269.0, 1604.0], [268.0, 1590.0], [259.0, 1579.0], [258.0, 1582.0], [257.0, 1568.0], [256.0, 1571.0], [267.0, 1591.0], [266.0, 1594.0], [265.0, 1589.0], [264.0, 1579.0], [263.0, 1575.0], [262.0, 1579.0], [261.0, 1581.0], [260.0, 1584.0], [285.0, 1598.0], [287.0, 1603.0], [284.0, 1601.0], [275.0, 1613.6666666666667], [272.0, 1606.6666666666667], [283.0, 1603.0], [282.0, 1615.0], [281.0, 1606.0], [280.0, 1603.0], [279.0, 1604.0], [278.0, 1605.0], [277.0, 1610.0], [276.0, 1602.0], [302.0, 1632.0], [303.0, 1622.0], [301.0, 1633.0], [300.0, 1629.0], [299.0, 1622.0], [298.0, 1625.0], [297.0, 1622.0], [296.0, 1615.0], [295.0, 1616.0], [288.0, 1605.0], [290.0, 1618.0], [289.0, 1614.0], [294.0, 1615.0], [293.0, 1627.0], [316.0, 1634.0], [319.0, 1639.0], [318.0, 1636.0], [317.0, 1633.0], [313.0, 1634.4], [308.0, 1632.0], [307.0, 1629.0], [306.0, 1622.0], [305.0, 1626.0], [304.0, 1624.0], [334.0, 1641.0], [335.0, 1646.0], [333.0, 1643.0], [332.0, 1634.0], [331.0, 1636.0], [330.0, 1640.0], [329.0, 1642.0], [328.0, 1637.0], [327.0, 1637.0], [321.0, 1628.0], [320.0, 1629.0], [323.0, 1624.0], [322.0, 1627.0], [326.0, 1636.0], [325.0, 1638.0], [324.0, 1639.0], [350.0, 1639.0], [351.0, 1643.0], [349.0, 1643.0], [348.0, 1644.0], [347.0, 1645.0], [346.0, 1639.0], [345.0, 1639.0], [344.0, 1639.0], [343.0, 1649.0], [337.0, 1642.0], [336.0, 1642.0], [339.0, 1644.0], [338.0, 1645.0], [342.0, 1650.0], [341.0, 1645.0], [340.0, 1640.0], [366.0, 1647.0], [367.0, 1653.0], [365.0, 1649.0], [364.0, 1650.0], [363.0, 1653.0], [362.0, 1654.0], [361.0, 1652.0], [360.0, 1651.0], [359.0, 1659.0], [355.0, 1648.0], [354.0, 1643.0], [353.0, 1646.5], [352.0, 1642.0], [358.0, 1653.6666666666667], [382.0, 1648.0], [383.0, 1647.0], [381.0, 1647.0], [380.0, 1646.0], [379.0, 1650.0], [378.0, 1653.0], [377.0, 1648.0], [376.0, 1645.0], [375.0, 1649.0], [369.0, 1651.0], [368.0, 1651.0], [371.0, 1652.0], [370.0, 1650.0], [374.0, 1650.0], [373.0, 1649.0], [372.0, 1656.0], [397.0, 1656.0], [399.0, 1671.5], [396.0, 1653.0], [387.0, 1649.0], [386.0, 1647.0], [385.0, 1648.0], [384.0, 1647.0], [395.0, 1658.0], [394.0, 1652.0], [393.0, 1653.0], [392.0, 1656.0], [391.0, 1649.0], [390.0, 1653.5], [388.0, 1652.0], [412.0, 1656.6666666666667], [415.0, 1653.0], [414.0, 1647.0], [413.0, 1651.0], [409.0, 1649.0], [407.0, 1646.0], [400.0, 1655.0], [402.0, 1658.0], [401.0, 1657.0], [406.0, 1660.0], [405.0, 1659.0], [404.0, 1660.0], [430.0, 1657.0], [431.0, 1657.0], [429.0, 1652.0], [428.0, 1648.0], [427.0, 1647.5], [425.0, 1646.0], [424.0, 1663.0], [422.0, 1653.0], [417.0, 1652.0], [416.0, 1652.0], [419.0, 1649.0], [418.0, 1649.0], [421.0, 1660.5], [420.0, 1648.0], [446.0, 1673.0], [447.0, 1680.0], [445.0, 1665.5], [435.0, 1664.0], [434.0, 1656.0], [433.0, 1658.0], [432.0, 1655.0], [443.0, 1668.0], [442.0, 1668.0], [441.0, 1667.0], [440.0, 1664.0], [439.0, 1668.0], [438.0, 1666.6666666666667], [462.0, 1691.0], [461.0, 1692.0], [451.0, 1686.0], [450.0, 1679.0], [449.0, 1672.0], [448.0, 1677.0], [459.0, 1696.0], [458.0, 1686.0], [457.0, 1688.0], [456.0, 1680.0], [455.0, 1684.0], [454.0, 1682.0], [453.0, 1688.0], [452.0, 1682.0], [478.0, 1727.0], [477.0, 1720.5], [475.0, 1719.0], [474.0, 1714.0], [473.0, 1712.1666666666667], [467.0, 1699.0], [465.0, 1696.0], [464.0, 1693.0], [495.0, 1766.0], [494.0, 1746.0], [493.0, 1765.5], [491.0, 1745.3333333333333], [487.0, 1761.5], [483.0, 1730.5], [481.0, 1747.6666666666667], [510.0, 2320.0], [511.0, 2335.0], [509.0, 2276.0], [508.0, 2818.8333333333335], [507.0, 2813.285714285714], [506.0, 2663.5], [505.0, 2642.0], [504.0, 2020.0], [503.0, 2110.285714285714], [497.0, 1774.5], [496.0, 1765.0], [499.0, 2614.6666666666665], [498.0, 1775.5], [502.0, 2214.0], [501.0, 1803.0], [500.0, 1789.0], [537.0, 2994.3333333333335], [541.0, 2994.3333333333335], [543.0, 2989.5], [529.0, 2988.0], [528.0, 2979.1333333333337], [531.0, 2993.125], [530.0, 2990.25], [533.0, 2993.529411764706], [532.0, 2993.727272727273], [540.0, 2991.0], [539.0, 2994.0], [538.0, 2992.0], [536.0, 2998.0], [519.0, 2882.0], [518.0, 2880.8571428571427], [517.0, 2874.0], [516.0, 2859.3225806451615], [515.0, 2700.046594982079], [514.0, 2449.0], [513.0, 2401.0], [512.0, 2393.0], [527.0, 2971.0], [526.0, 2970.25], [525.0, 3187.0], [524.0, 2952.0], [523.0, 2940.0], [522.0, 2930.875], [521.0, 2926.5], [520.0, 2908.7941176470576], [535.0, 2999.0], [534.0, 2992.5], [569.0, 2980.0], [573.0, 2982.0], [574.0, 2980.0], [560.0, 2975.0], [562.0, 2981.0], [561.0, 2973.0], [572.0, 2977.0], [571.0, 2985.0], [570.0, 2979.0], [568.0, 2975.3333333333335], [551.0, 2985.0], [550.0, 2992.0], [549.0, 2986.0], [548.0, 2985.0], [547.0, 2985.0], [546.0, 2988.0], [545.0, 2992.0], [544.0, 2994.0], [559.0, 2981.0], [558.0, 2983.0], [557.0, 2983.0], [556.0, 2982.0], [555.0, 2989.0], [554.0, 2990.0], [553.0, 2983.0], [552.0, 2982.0], [565.0, 2981.5], [563.0, 2982.0], [605.0, 4072.3333333333335], [596.0, 2983.0], [606.0, 2988.0], [592.0, 2970.0], [594.0, 2971.0], [593.0, 2972.0], [603.0, 2975.0], [601.0, 2975.0], [600.0, 2973.0], [583.0, 2967.0], [582.0, 2980.5], [580.0, 2987.0], [579.0, 2980.0], [578.0, 2985.5], [591.0, 2984.0], [590.0, 2982.0], [589.0, 2985.0], [588.0, 2973.0], [587.0, 2978.0], [586.0, 2979.6666666666665], [599.0, 2988.0], [598.0, 2977.0], [597.0, 4612.0], [634.0, 2974.0], [638.0, 2991.0], [639.0, 2993.0], [625.0, 2999.0], [627.0, 2980.0], [626.0, 2986.0], [629.0, 2982.0], [628.0, 2980.0], [637.0, 2981.0], [636.0, 2981.0], [635.0, 2985.5], [633.0, 2984.5], [615.0, 2979.0], [614.0, 2983.0], [613.0, 3000.0], [612.0, 2980.0], [611.0, 2977.0], [610.0, 2975.0], [609.0, 11477.0], [608.0, 2978.0], [623.0, 2984.0], [622.0, 2989.0], [620.0, 2997.5], [618.0, 2991.0], [617.0, 2975.0], [616.0, 2982.0], [631.0, 2995.0], [630.0, 2977.0], [665.0, 3015.0], [670.0, 3029.0], [671.0, 3017.0], [657.0, 3006.0], [656.0, 2997.0], [659.0, 2998.0], [658.0, 3001.0], [661.0, 3010.0], [660.0, 3003.0], [669.0, 3017.0], [668.0, 3012.0], [667.0, 3009.5], [664.0, 2997.0], [647.0, 3001.5], [646.0, 2992.0], [645.0, 2994.5], [643.0, 2994.5], [641.0, 2985.0], [640.0, 2992.0], [655.0, 3002.0], [654.0, 3002.0], [653.0, 2999.5], [652.0, 2996.0], [650.0, 3001.0], [649.0, 2994.0], [648.0, 2991.0], [663.0, 2998.0], [662.0, 3004.0], [697.0, 3061.0], [702.0, 3060.5], [703.0, 3058.0], [688.0, 3044.0], [690.0, 3048.0], [689.0, 3045.0], [693.0, 3048.0], [691.0, 3041.0], [700.0, 3057.0], [699.0, 3060.0], [698.0, 3069.0], [696.0, 3058.5], [678.0, 3028.0], [677.0, 3032.0], [676.0, 3026.0], [675.0, 3030.0], [674.0, 3019.0], [673.0, 3022.0], [672.0, 3020.0], [685.0, 3041.0], [684.0, 3035.5], [682.0, 3049.5], [680.0, 3045.5], [695.0, 3057.0], [694.0, 3049.0], [728.0, 3075.5], [732.0, 3086.5], [735.0, 3084.0], [721.0, 3073.0], [723.0, 3071.0], [722.0, 3071.0], [734.0, 3083.0], [733.0, 3083.0], [731.0, 3089.0], [730.0, 3076.0], [729.0, 3079.0], [719.0, 3066.0], [705.0, 3062.0], [704.0, 3055.0], [709.0, 3067.5], [707.0, 3061.0], [711.0, 3062.0], [710.0, 3061.0], [718.0, 3068.0], [717.0, 3065.0], [716.0, 3108.0], [715.0, 3065.0], [714.0, 3082.0], [713.0, 3063.0], [712.0, 3067.0], [726.0, 3073.0], [724.0, 3071.0], [760.0, 3092.0], [764.0, 3094.0], [767.0, 3092.0], [753.0, 3083.0], [752.0, 3090.0], [755.0, 3089.0], [754.0, 3089.0], [766.0, 3100.0], [765.0, 3096.0], [763.0, 3095.0], [762.0, 3094.0], [761.0, 3094.0], [751.0, 3088.6666666666665], [736.0, 3088.0], [738.0, 3085.0], [737.0, 3093.0], [740.0, 3087.0], [739.0, 3092.0], [743.0, 3082.5], [741.0, 3085.0], [749.0, 3087.0], [748.0, 3085.0], [747.0, 3091.5], [745.0, 3085.0], [744.0, 3080.0], [759.0, 3091.0], [758.0, 3094.6666666666665], [792.0, 3115.0], [797.0, 3107.0], [799.0, 3110.6666666666665], [784.0, 3113.0], [786.0, 3115.0], [785.0, 3120.0], [796.0, 3108.0], [795.0, 3105.0], [794.0, 3121.0], [783.0, 3120.6666666666665], [769.0, 3095.0], [768.0, 3094.0], [771.0, 3104.0], [770.0, 3095.0], [774.0, 3100.0], [773.0, 3106.0], [781.0, 3101.0], [780.0, 3107.0], [778.0, 3099.0], [777.0, 3099.0], [776.0, 3103.5], [791.0, 3117.0], [790.0, 3121.0], [789.0, 3117.0], [788.0, 3117.5], [828.0, 3146.8750000000005], [831.0, 3150.6666666666665], [817.0, 3145.5], [819.0, 3142.3333333333335], [818.0, 3141.75], [821.0, 3143.0], [820.0, 3142.0], [830.0, 3147.3333333333335], [829.0, 3145.533333333333], [827.0, 3144.0], [826.0, 3138.0], [825.0, 3139.8], [824.0, 3143.0], [815.0, 3144.3333333333335], [802.0, 3112.0], [801.0, 3115.0], [805.0, 3120.0], [804.0, 3130.0], [807.0, 3113.0], [806.0, 3105.0], [813.0, 3137.0], [812.0, 3131.0], [811.0, 3123.5], [810.0, 3123.5], [809.0, 3124.0], [823.0, 3144.0], [822.0, 3142.0], [847.0, 3165.6875], [850.0, 4849.71002654685], [849.0, 3151.8888888888887], [848.0, 3158.3333333333335], [846.0, 3163.5227272727275], [844.0, 3357.985714285714], [843.0, 3151.159090909091], [842.0, 3146.5], [841.0, 3149.8333333333335], [840.0, 3152.666666666667], [839.0, 3152.9], [838.0, 3146.010869565217], [837.0, 3152.7222222222217], [836.0, 3160.6666666666665], [835.0, 3151.066666666667], [834.0, 3157.1818181818185], [1.0, 2518.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[768.4336764705879, 4228.670441176447]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 850.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2693.9666666666667, "minX": 1.69670316E12, "maxY": 301531.7166666667, "series": [{"data": [[1.69670316E12, 74413.5], [1.69670322E12, 301531.7166666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69670316E12, 2693.9666666666667], [1.69670322E12, 15028.533333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69670322E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3304.959842941278, "minX": 1.69670316E12, "maxY": 8552.438596491216, "series": [{"data": [[1.69670316E12, 8552.438596491216], [1.69670322E12, 3304.959842941278]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69670322E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3302.0349812600302, "minX": 1.69670316E12, "maxY": 8552.410192147036, "series": [{"data": [[1.69670316E12, 8552.410192147036], [1.69670322E12, 3302.0349812600302]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69670322E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 32.21916830269503, "minX": 1.69670316E12, "maxY": 5776.583959899749, "series": [{"data": [[1.69670316E12, 5776.583959899749], [1.69670322E12, 32.21916830269503]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69670322E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 109.0, "minX": 1.69670316E12, "maxY": 20224.0, "series": [{"data": [[1.69670316E12, 14285.0], [1.69670322E12, 20224.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69670316E12, 1841.0], [1.69670322E12, 109.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69670316E12, 11789.6], [1.69670322E12, 3828.6000000000004]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69670316E12, 12465.16], [1.69670322E12, 6118.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69670316E12, 10410.0], [1.69670322E12, 3167.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.69670316E12, 12083.0], [1.69670322E12, 5837.8]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69670322E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 109.0, "minX": 3.0, "maxY": 11634.0, "series": [{"data": [[3.0, 109.0], [104.0, 1694.0], [121.0, 3126.0], [10.0, 9162.0], [171.0, 3330.0], [168.0, 3815.0], [178.0, 2883.5], [183.0, 3231.0], [185.0, 2366.0], [198.0, 3500.5], [224.0, 2635.0], [233.0, 3652.0], [232.0, 3558.0], [241.0, 10091.0], [249.0, 3532.0], [271.0, 10990.0], [268.0, 3140.0], [297.0, 2668.0], [294.0, 3505.0], [307.0, 3209.0], [304.0, 3531.0], [318.0, 3161.0], [21.0, 3421.0], [355.0, 11634.0], [376.0, 2933.5], [400.0, 5902.5], [404.0, 5664.5], [417.0, 1622.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 417.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 109.0, "minX": 3.0, "maxY": 11634.0, "series": [{"data": [[3.0, 109.0], [104.0, 1360.5], [121.0, 3126.0], [10.0, 9162.0], [171.0, 3330.0], [168.0, 3815.0], [178.0, 2883.5], [183.0, 3231.0], [185.0, 2366.0], [198.0, 3500.5], [224.0, 2632.0], [233.0, 3652.0], [232.0, 3557.5], [241.0, 10091.0], [249.0, 3532.0], [271.0, 10990.0], [268.0, 3140.0], [297.0, 2668.0], [294.0, 3505.0], [307.0, 3209.0], [304.0, 3531.0], [318.0, 3161.0], [21.0, 3421.0], [355.0, 11634.0], [376.0, 2933.0], [400.0, 5902.5], [404.0, 5664.5], [417.0, 1622.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 417.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 34.11666666666667, "minX": 1.69670316E12, "maxY": 79.21666666666667, "series": [{"data": [[1.69670316E12, 34.11666666666667], [1.69670322E12, 79.21666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69670322E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 19.95, "minX": 1.69670316E12, "maxY": 93.38333333333334, "series": [{"data": [[1.69670316E12, 19.95], [1.69670322E12, 93.38333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69670322E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 19.95, "minX": 1.69670316E12, "maxY": 93.38333333333334, "series": [{"data": [[1.69670316E12, 19.95], [1.69670322E12, 93.38333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69670322E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 19.95, "minX": 1.69670316E12, "maxY": 93.38333333333334, "series": [{"data": [[1.69670316E12, 19.95], [1.69670322E12, 93.38333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69670322E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

