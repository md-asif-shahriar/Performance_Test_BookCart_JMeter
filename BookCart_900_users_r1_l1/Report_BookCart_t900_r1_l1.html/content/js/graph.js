/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 110.0, "minX": 0.0, "maxY": 28106.0, "series": [{"data": [[0.0, 110.0], [0.1, 124.0], [0.2, 147.0], [0.3, 178.0], [0.4, 227.0], [0.5, 250.0], [0.6, 291.0], [0.7, 318.0], [0.8, 386.0], [0.9, 438.0], [1.0, 502.0], [1.1, 525.0], [1.2, 537.0], [1.3, 598.0], [1.4, 754.0], [1.5, 778.0], [1.6, 802.0], [1.7, 852.0], [1.8, 868.0], [1.9, 887.0], [2.0, 907.0], [2.1, 922.0], [2.2, 992.0], [2.3, 1058.0], [2.4, 1125.0], [2.5, 1137.0], [2.6, 1164.0], [2.7, 1184.0], [2.8, 1195.0], [2.9, 1208.0], [3.0, 1247.0], [3.1, 1267.0], [3.2, 1309.0], [3.3, 1326.0], [3.4, 1335.0], [3.5, 1367.0], [3.6, 1378.0], [3.7, 1389.0], [3.8, 1400.0], [3.9, 1426.0], [4.0, 1438.0], [4.1, 1442.0], [4.2, 1455.0], [4.3, 1474.0], [4.4, 1520.0], [4.5, 1560.0], [4.6, 1617.0], [4.7, 1645.0], [4.8, 1665.0], [4.9, 1682.0], [5.0, 1694.0], [5.1, 1708.0], [5.2, 1767.0], [5.3, 1823.0], [5.4, 1864.0], [5.5, 1884.0], [5.6, 1941.0], [5.7, 1980.0], [5.8, 2014.0], [5.9, 2077.0], [6.0, 2108.0], [6.1, 2137.0], [6.2, 2151.0], [6.3, 2176.0], [6.4, 2201.0], [6.5, 2215.0], [6.6, 2225.0], [6.7, 2240.0], [6.8, 2251.0], [6.9, 2265.0], [7.0, 2277.0], [7.1, 2303.0], [7.2, 2309.0], [7.3, 2318.0], [7.4, 2324.0], [7.5, 2331.0], [7.6, 2399.0], [7.7, 2470.0], [7.8, 2496.0], [7.9, 2512.0], [8.0, 2520.0], [8.1, 2530.0], [8.2, 2535.0], [8.3, 2557.0], [8.4, 2568.0], [8.5, 2577.0], [8.6, 2581.0], [8.7, 2584.0], [8.8, 2587.0], [8.9, 2591.0], [9.0, 2598.0], [9.1, 2602.0], [9.2, 2604.0], [9.3, 2605.0], [9.4, 2606.0], [9.5, 2607.0], [9.6, 2608.0], [9.7, 2609.0], [9.8, 2609.0], [9.9, 2610.0], [10.0, 2611.0], [10.1, 2612.0], [10.2, 2612.0], [10.3, 2613.0], [10.4, 2614.0], [10.5, 2614.0], [10.6, 2615.0], [10.7, 2615.0], [10.8, 2616.0], [10.9, 2617.0], [11.0, 2617.0], [11.1, 2619.0], [11.2, 2619.0], [11.3, 2620.0], [11.4, 2621.0], [11.5, 2622.0], [11.6, 2624.0], [11.7, 2625.0], [11.8, 2627.0], [11.9, 2628.0], [12.0, 2629.0], [12.1, 2630.0], [12.2, 2632.0], [12.3, 2633.0], [12.4, 2635.0], [12.5, 2637.0], [12.6, 2639.0], [12.7, 2641.0], [12.8, 2643.0], [12.9, 2644.0], [13.0, 2645.0], [13.1, 2647.0], [13.2, 2649.0], [13.3, 2651.0], [13.4, 2654.0], [13.5, 2655.0], [13.6, 2659.0], [13.7, 2663.0], [13.8, 2667.0], [13.9, 2672.0], [14.0, 2675.0], [14.1, 2681.0], [14.2, 2686.0], [14.3, 2688.0], [14.4, 2690.0], [14.5, 2696.0], [14.6, 2699.0], [14.7, 2703.0], [14.8, 2708.0], [14.9, 2713.0], [15.0, 2717.0], [15.1, 2722.0], [15.2, 2726.0], [15.3, 2731.0], [15.4, 2736.0], [15.5, 2740.0], [15.6, 2744.0], [15.7, 2746.0], [15.8, 2748.0], [15.9, 2749.0], [16.0, 2754.0], [16.1, 2757.0], [16.2, 2763.0], [16.3, 2769.0], [16.4, 2772.0], [16.5, 2778.0], [16.6, 2782.0], [16.7, 2784.0], [16.8, 2786.0], [16.9, 2788.0], [17.0, 2789.0], [17.1, 2793.0], [17.2, 2795.0], [17.3, 2797.0], [17.4, 2800.0], [17.5, 2801.0], [17.6, 2804.0], [17.7, 2806.0], [17.8, 2808.0], [17.9, 2810.0], [18.0, 2814.0], [18.1, 2820.0], [18.2, 2822.0], [18.3, 2829.0], [18.4, 2836.0], [18.5, 2845.0], [18.6, 2851.0], [18.7, 2857.0], [18.8, 2860.0], [18.9, 2861.0], [19.0, 2862.0], [19.1, 2864.0], [19.2, 2865.0], [19.3, 2866.0], [19.4, 2866.0], [19.5, 2867.0], [19.6, 2867.0], [19.7, 2868.0], [19.8, 2869.0], [19.9, 2870.0], [20.0, 2871.0], [20.1, 2873.0], [20.2, 2873.0], [20.3, 2876.0], [20.4, 2878.0], [20.5, 2878.0], [20.6, 2880.0], [20.7, 2882.0], [20.8, 2885.0], [20.9, 2886.0], [21.0, 2887.0], [21.1, 2890.0], [21.2, 2894.0], [21.3, 2897.0], [21.4, 2902.0], [21.5, 2913.0], [21.6, 2919.0], [21.7, 2926.0], [21.8, 2929.0], [21.9, 2937.0], [22.0, 2945.0], [22.1, 2950.0], [22.2, 2952.0], [22.3, 2954.0], [22.4, 2957.0], [22.5, 2959.0], [22.6, 2963.0], [22.7, 2965.0], [22.8, 2968.0], [22.9, 2970.0], [23.0, 2972.0], [23.1, 2974.0], [23.2, 2975.0], [23.3, 2979.0], [23.4, 2981.0], [23.5, 2986.0], [23.6, 2989.0], [23.7, 2993.0], [23.8, 2999.0], [23.9, 3003.0], [24.0, 3007.0], [24.1, 3008.0], [24.2, 3012.0], [24.3, 3013.0], [24.4, 3014.0], [24.5, 3015.0], [24.6, 3017.0], [24.7, 3018.0], [24.8, 3019.0], [24.9, 3019.0], [25.0, 3020.0], [25.1, 3022.0], [25.2, 3024.0], [25.3, 3026.0], [25.4, 3027.0], [25.5, 3029.0], [25.6, 3031.0], [25.7, 3033.0], [25.8, 3035.0], [25.9, 3036.0], [26.0, 3038.0], [26.1, 3040.0], [26.2, 3042.0], [26.3, 3045.0], [26.4, 3048.0], [26.5, 3050.0], [26.6, 3054.0], [26.7, 3058.0], [26.8, 3061.0], [26.9, 3064.0], [27.0, 3067.0], [27.1, 3070.0], [27.2, 3074.0], [27.3, 3077.0], [27.4, 3078.0], [27.5, 3080.0], [27.6, 3082.0], [27.7, 3086.0], [27.8, 3088.0], [27.9, 3090.0], [28.0, 3091.0], [28.1, 3094.0], [28.2, 3096.0], [28.3, 3097.0], [28.4, 3099.0], [28.5, 3101.0], [28.6, 3103.0], [28.7, 3105.0], [28.8, 3106.0], [28.9, 3108.0], [29.0, 3110.0], [29.1, 3113.0], [29.2, 3114.0], [29.3, 3115.0], [29.4, 3118.0], [29.5, 3121.0], [29.6, 3127.0], [29.7, 3133.0], [29.8, 3136.0], [29.9, 3141.0], [30.0, 3143.0], [30.1, 3146.0], [30.2, 3148.0], [30.3, 3151.0], [30.4, 3154.0], [30.5, 3157.0], [30.6, 3159.0], [30.7, 3160.0], [30.8, 3164.0], [30.9, 3166.0], [31.0, 3167.0], [31.1, 3169.0], [31.2, 3170.0], [31.3, 3172.0], [31.4, 3173.0], [31.5, 3174.0], [31.6, 3176.0], [31.7, 3180.0], [31.8, 3185.0], [31.9, 3187.0], [32.0, 3192.0], [32.1, 3195.0], [32.2, 3197.0], [32.3, 3202.0], [32.4, 3212.0], [32.5, 3216.0], [32.6, 3220.0], [32.7, 3226.0], [32.8, 3231.0], [32.9, 3235.0], [33.0, 3237.0], [33.1, 3243.0], [33.2, 3248.0], [33.3, 3252.0], [33.4, 3261.0], [33.5, 3265.0], [33.6, 3272.0], [33.7, 3275.0], [33.8, 3277.0], [33.9, 3278.0], [34.0, 3280.0], [34.1, 3284.0], [34.2, 3286.0], [34.3, 3289.0], [34.4, 3291.0], [34.5, 3295.0], [34.6, 3299.0], [34.7, 3303.0], [34.8, 3306.0], [34.9, 3310.0], [35.0, 3312.0], [35.1, 3314.0], [35.2, 3315.0], [35.3, 3317.0], [35.4, 3318.0], [35.5, 3321.0], [35.6, 3323.0], [35.7, 3327.0], [35.8, 3329.0], [35.9, 3331.0], [36.0, 3335.0], [36.1, 3338.0], [36.2, 3338.0], [36.3, 3340.0], [36.4, 3340.0], [36.5, 3341.0], [36.6, 3342.0], [36.7, 3342.0], [36.8, 3343.0], [36.9, 3344.0], [37.0, 3345.0], [37.1, 3347.0], [37.2, 3347.0], [37.3, 3347.0], [37.4, 3348.0], [37.5, 3349.0], [37.6, 3350.0], [37.7, 3352.0], [37.8, 3353.0], [37.9, 3354.0], [38.0, 3355.0], [38.1, 3358.0], [38.2, 3359.0], [38.3, 3360.0], [38.4, 3361.0], [38.5, 3362.0], [38.6, 3363.0], [38.7, 3364.0], [38.8, 3365.0], [38.9, 3367.0], [39.0, 3369.0], [39.1, 3371.0], [39.2, 3373.0], [39.3, 3374.0], [39.4, 3377.0], [39.5, 3380.0], [39.6, 3381.0], [39.7, 3384.0], [39.8, 3385.0], [39.9, 3387.0], [40.0, 3391.0], [40.1, 3393.0], [40.2, 3398.0], [40.3, 3400.0], [40.4, 3404.0], [40.5, 3408.0], [40.6, 3413.0], [40.7, 3416.0], [40.8, 3418.0], [40.9, 3422.0], [41.0, 3424.0], [41.1, 3425.0], [41.2, 3427.0], [41.3, 3428.0], [41.4, 3431.0], [41.5, 3433.0], [41.6, 3434.0], [41.7, 3436.0], [41.8, 3438.0], [41.9, 3439.0], [42.0, 3441.0], [42.1, 3443.0], [42.2, 3445.0], [42.3, 3448.0], [42.4, 3451.0], [42.5, 3453.0], [42.6, 3456.0], [42.7, 3457.0], [42.8, 3458.0], [42.9, 3461.0], [43.0, 3463.0], [43.1, 3464.0], [43.2, 3465.0], [43.3, 3466.0], [43.4, 3467.0], [43.5, 3468.0], [43.6, 3470.0], [43.7, 3471.0], [43.8, 3472.0], [43.9, 3473.0], [44.0, 3473.0], [44.1, 3474.0], [44.2, 3475.0], [44.3, 3475.0], [44.4, 3476.0], [44.5, 3477.0], [44.6, 3479.0], [44.7, 3479.0], [44.8, 3480.0], [44.9, 3480.0], [45.0, 3481.0], [45.1, 3482.0], [45.2, 3482.0], [45.3, 3484.0], [45.4, 3485.0], [45.5, 3486.0], [45.6, 3488.0], [45.7, 3489.0], [45.8, 3491.0], [45.9, 3492.0], [46.0, 3493.0], [46.1, 3494.0], [46.2, 3495.0], [46.3, 3495.0], [46.4, 3496.0], [46.5, 3499.0], [46.6, 3501.0], [46.7, 3503.0], [46.8, 3504.0], [46.9, 3505.0], [47.0, 3506.0], [47.1, 3506.0], [47.2, 3507.0], [47.3, 3508.0], [47.4, 3508.0], [47.5, 3509.0], [47.6, 3509.0], [47.7, 3510.0], [47.8, 3511.0], [47.9, 3511.0], [48.0, 3511.0], [48.1, 3512.0], [48.2, 3512.0], [48.3, 3513.0], [48.4, 3513.0], [48.5, 3513.0], [48.6, 3514.0], [48.7, 3514.0], [48.8, 3514.0], [48.9, 3515.0], [49.0, 3515.0], [49.1, 3516.0], [49.2, 3516.0], [49.3, 3517.0], [49.4, 3517.0], [49.5, 3517.0], [49.6, 3517.0], [49.7, 3518.0], [49.8, 3518.0], [49.9, 3518.0], [50.0, 3519.0], [50.1, 3519.0], [50.2, 3519.0], [50.3, 3520.0], [50.4, 3520.0], [50.5, 3520.0], [50.6, 3521.0], [50.7, 3521.0], [50.8, 3521.0], [50.9, 3522.0], [51.0, 3522.0], [51.1, 3522.0], [51.2, 3523.0], [51.3, 3523.0], [51.4, 3523.0], [51.5, 3524.0], [51.6, 3524.0], [51.7, 3524.0], [51.8, 3525.0], [51.9, 3525.0], [52.0, 3525.0], [52.1, 3525.0], [52.2, 3526.0], [52.3, 3526.0], [52.4, 3526.0], [52.5, 3526.0], [52.6, 3527.0], [52.7, 3527.0], [52.8, 3527.0], [52.9, 3527.0], [53.0, 3528.0], [53.1, 3528.0], [53.2, 3529.0], [53.3, 3529.0], [53.4, 3529.0], [53.5, 3529.0], [53.6, 3530.0], [53.7, 3530.0], [53.8, 3530.0], [53.9, 3531.0], [54.0, 3531.0], [54.1, 3531.0], [54.2, 3531.0], [54.3, 3532.0], [54.4, 3532.0], [54.5, 3532.0], [54.6, 3532.0], [54.7, 3533.0], [54.8, 3533.0], [54.9, 3533.0], [55.0, 3533.0], [55.1, 3533.0], [55.2, 3534.0], [55.3, 3534.0], [55.4, 3534.0], [55.5, 3534.0], [55.6, 3535.0], [55.7, 3535.0], [55.8, 3535.0], [55.9, 3536.0], [56.0, 3536.0], [56.1, 3536.0], [56.2, 3537.0], [56.3, 3537.0], [56.4, 3537.0], [56.5, 3537.0], [56.6, 3537.0], [56.7, 3538.0], [56.8, 3538.0], [56.9, 3539.0], [57.0, 3539.0], [57.1, 3539.0], [57.2, 3540.0], [57.3, 3540.0], [57.4, 3540.0], [57.5, 3540.0], [57.6, 3541.0], [57.7, 3541.0], [57.8, 3541.0], [57.9, 3542.0], [58.0, 3542.0], [58.1, 3542.0], [58.2, 3543.0], [58.3, 3543.0], [58.4, 3543.0], [58.5, 3543.0], [58.6, 3544.0], [58.7, 3544.0], [58.8, 3545.0], [58.9, 3545.0], [59.0, 3546.0], [59.1, 3546.0], [59.2, 3547.0], [59.3, 3547.0], [59.4, 3548.0], [59.5, 3549.0], [59.6, 3549.0], [59.7, 3550.0], [59.8, 3550.0], [59.9, 3551.0], [60.0, 3552.0], [60.1, 3552.0], [60.2, 3552.0], [60.3, 3553.0], [60.4, 3554.0], [60.5, 3555.0], [60.6, 3556.0], [60.7, 3556.0], [60.8, 3557.0], [60.9, 3558.0], [61.0, 3558.0], [61.1, 3559.0], [61.2, 3560.0], [61.3, 3561.0], [61.4, 3562.0], [61.5, 3563.0], [61.6, 3563.0], [61.7, 3565.0], [61.8, 3567.0], [61.9, 3568.0], [62.0, 3569.0], [62.1, 3570.0], [62.2, 3571.0], [62.3, 3572.0], [62.4, 3574.0], [62.5, 3575.0], [62.6, 3577.0], [62.7, 3577.0], [62.8, 3579.0], [62.9, 3581.0], [63.0, 3583.0], [63.1, 3585.0], [63.2, 3587.0], [63.3, 3589.0], [63.4, 3590.0], [63.5, 3591.0], [63.6, 3593.0], [63.7, 3594.0], [63.8, 3595.0], [63.9, 3597.0], [64.0, 3598.0], [64.1, 3599.0], [64.2, 3600.0], [64.3, 3601.0], [64.4, 3602.0], [64.5, 3603.0], [64.6, 3604.0], [64.7, 3605.0], [64.8, 3606.0], [64.9, 3607.0], [65.0, 3607.0], [65.1, 3608.0], [65.2, 3608.0], [65.3, 3609.0], [65.4, 3609.0], [65.5, 3610.0], [65.6, 3611.0], [65.7, 3611.0], [65.8, 3612.0], [65.9, 3612.0], [66.0, 3613.0], [66.1, 3613.0], [66.2, 3614.0], [66.3, 3614.0], [66.4, 3615.0], [66.5, 3615.0], [66.6, 3616.0], [66.7, 3616.0], [66.8, 3616.0], [66.9, 3617.0], [67.0, 3617.0], [67.1, 3617.0], [67.2, 3618.0], [67.3, 3619.0], [67.4, 3619.0], [67.5, 3620.0], [67.6, 3620.0], [67.7, 3620.0], [67.8, 3620.0], [67.9, 3621.0], [68.0, 3622.0], [68.1, 3622.0], [68.2, 3623.0], [68.3, 3623.0], [68.4, 3624.0], [68.5, 3624.0], [68.6, 3625.0], [68.7, 3625.0], [68.8, 3627.0], [68.9, 3628.0], [69.0, 3629.0], [69.1, 3630.0], [69.2, 3631.0], [69.3, 3634.0], [69.4, 3636.0], [69.5, 3638.0], [69.6, 3639.0], [69.7, 3642.0], [69.8, 3643.0], [69.9, 3645.0], [70.0, 3647.0], [70.1, 3649.0], [70.2, 3650.0], [70.3, 3651.0], [70.4, 3652.0], [70.5, 3653.0], [70.6, 3655.0], [70.7, 3656.0], [70.8, 3657.0], [70.9, 3658.0], [71.0, 3659.0], [71.1, 3660.0], [71.2, 3662.0], [71.3, 3664.0], [71.4, 3665.0], [71.5, 3667.0], [71.6, 3669.0], [71.7, 3669.0], [71.8, 3670.0], [71.9, 3671.0], [72.0, 3672.0], [72.1, 3674.0], [72.2, 3675.0], [72.3, 3676.0], [72.4, 3677.0], [72.5, 3677.0], [72.6, 3679.0], [72.7, 3681.0], [72.8, 3683.0], [72.9, 3684.0], [73.0, 3686.0], [73.1, 3687.0], [73.2, 3689.0], [73.3, 3689.0], [73.4, 3690.0], [73.5, 3691.0], [73.6, 3692.0], [73.7, 3693.0], [73.8, 3694.0], [73.9, 3695.0], [74.0, 3697.0], [74.1, 3700.0], [74.2, 3703.0], [74.3, 3706.0], [74.4, 3708.0], [74.5, 3710.0], [74.6, 3712.0], [74.7, 3714.0], [74.8, 3716.0], [74.9, 3717.0], [75.0, 3719.0], [75.1, 3720.0], [75.2, 3722.0], [75.3, 3724.0], [75.4, 3727.0], [75.5, 3729.0], [75.6, 3731.0], [75.7, 3733.0], [75.8, 3735.0], [75.9, 3736.0], [76.0, 3737.0], [76.1, 3739.0], [76.2, 3741.0], [76.3, 3742.0], [76.4, 3744.0], [76.5, 3746.0], [76.6, 3747.0], [76.7, 3750.0], [76.8, 3754.0], [76.9, 3756.0], [77.0, 3759.0], [77.1, 3788.0], [77.2, 3803.0], [77.3, 3825.0], [77.4, 3840.0], [77.5, 3863.0], [77.6, 3893.0], [77.7, 3908.0], [77.8, 3921.0], [77.9, 3928.0], [78.0, 3936.0], [78.1, 3946.0], [78.2, 3961.0], [78.3, 3967.0], [78.4, 3983.0], [78.5, 4001.0], [78.6, 4014.0], [78.7, 4032.0], [78.8, 4050.0], [78.9, 4070.0], [79.0, 4087.0], [79.1, 4113.0], [79.2, 4145.0], [79.3, 4167.0], [79.4, 4186.0], [79.5, 4205.0], [79.6, 4235.0], [79.7, 4263.0], [79.8, 4273.0], [79.9, 4294.0], [80.0, 4310.0], [80.1, 4323.0], [80.2, 4337.0], [80.3, 4364.0], [80.4, 4401.0], [80.5, 4437.0], [80.6, 4465.0], [80.7, 4487.0], [80.8, 4507.0], [80.9, 4528.0], [81.0, 4552.0], [81.1, 4571.0], [81.2, 4597.0], [81.3, 4617.0], [81.4, 4625.0], [81.5, 4646.0], [81.6, 4664.0], [81.7, 4705.0], [81.8, 4759.0], [81.9, 4813.0], [82.0, 4904.0], [82.1, 4950.0], [82.2, 5040.0], [82.3, 5126.0], [82.4, 5332.0], [82.5, 5531.0], [82.6, 5605.0], [82.7, 5700.0], [82.8, 5760.0], [82.9, 5849.0], [83.0, 5939.0], [83.1, 6202.0], [83.2, 6557.0], [83.3, 6752.0], [83.4, 6836.0], [83.5, 6869.0], [83.6, 6893.0], [83.7, 6965.0], [83.8, 6979.0], [83.9, 6991.0], [84.0, 6996.0], [84.1, 7000.0], [84.2, 7008.0], [84.3, 7049.0], [84.4, 7066.0], [84.5, 7086.0], [84.6, 7093.0], [84.7, 7111.0], [84.8, 7123.0], [84.9, 7133.0], [85.0, 7141.0], [85.1, 7155.0], [85.2, 7162.0], [85.3, 7172.0], [85.4, 7177.0], [85.5, 7181.0], [85.6, 7190.0], [85.7, 7205.0], [85.8, 7214.0], [85.9, 7228.0], [86.0, 7248.0], [86.1, 7268.0], [86.2, 7287.0], [86.3, 7303.0], [86.4, 7316.0], [86.5, 7368.0], [86.6, 7473.0], [86.7, 7577.0], [86.8, 7872.0], [86.9, 8239.0], [87.0, 9027.0], [87.1, 9814.0], [87.2, 9948.0], [87.3, 10045.0], [87.4, 10147.0], [87.5, 10257.0], [87.6, 10355.0], [87.7, 10399.0], [87.8, 10473.0], [87.9, 10515.0], [88.0, 10568.0], [88.1, 10618.0], [88.2, 10675.0], [88.3, 10775.0], [88.4, 10833.0], [88.5, 10940.0], [88.6, 10999.0], [88.7, 11049.0], [88.8, 11121.0], [88.9, 11192.0], [89.0, 11227.0], [89.1, 11250.0], [89.2, 11303.0], [89.3, 11327.0], [89.4, 11356.0], [89.5, 11390.0], [89.6, 11423.0], [89.7, 11453.0], [89.8, 11470.0], [89.9, 11496.0], [90.0, 11523.0], [90.1, 11561.0], [90.2, 11591.0], [90.3, 11625.0], [90.4, 11644.0], [90.5, 11672.0], [90.6, 11712.0], [90.7, 11747.0], [90.8, 11757.0], [90.9, 11775.0], [91.0, 11792.0], [91.1, 11806.0], [91.2, 11832.0], [91.3, 11861.0], [91.4, 11888.0], [91.5, 11899.0], [91.6, 11921.0], [91.7, 11931.0], [91.8, 11965.0], [91.9, 11985.0], [92.0, 12021.0], [92.1, 12061.0], [92.2, 12076.0], [92.3, 12105.0], [92.4, 12125.0], [92.5, 12160.0], [92.6, 12170.0], [92.7, 12183.0], [92.8, 12200.0], [92.9, 12258.0], [93.0, 12279.0], [93.1, 12298.0], [93.2, 12326.0], [93.3, 12340.0], [93.4, 12364.0], [93.5, 12394.0], [93.6, 12409.0], [93.7, 12440.0], [93.8, 12456.0], [93.9, 12476.0], [94.0, 12485.0], [94.1, 12513.0], [94.2, 12537.0], [94.3, 12559.0], [94.4, 12587.0], [94.5, 12625.0], [94.6, 12663.0], [94.7, 12684.0], [94.8, 12705.0], [94.9, 12722.0], [95.0, 12759.0], [95.1, 12786.0], [95.2, 12813.0], [95.3, 12830.0], [95.4, 12863.0], [95.5, 12925.0], [95.6, 12944.0], [95.7, 12952.0], [95.8, 12967.0], [95.9, 12994.0], [96.0, 13041.0], [96.1, 13066.0], [96.2, 13101.0], [96.3, 13143.0], [96.4, 13169.0], [96.5, 13216.0], [96.6, 13236.0], [96.7, 13277.0], [96.8, 13292.0], [96.9, 13324.0], [97.0, 13357.0], [97.1, 13387.0], [97.2, 13427.0], [97.3, 13466.0], [97.4, 13508.0], [97.5, 13534.0], [97.6, 13563.0], [97.7, 13602.0], [97.8, 13658.0], [97.9, 13717.0], [98.0, 13808.0], [98.1, 13840.0], [98.2, 13991.0], [98.3, 14111.0], [98.4, 14186.0], [98.5, 14263.0], [98.6, 14384.0], [98.7, 15153.0], [98.8, 15549.0], [98.9, 16191.0], [99.0, 16950.0], [99.1, 17535.0], [99.2, 18526.0], [99.3, 19182.0], [99.4, 19601.0], [99.5, 19856.0], [99.6, 20258.0], [99.7, 20463.0], [99.8, 20943.0], [99.9, 21056.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 1269.0, "series": [{"data": [[100.0, 24.0], [200.0, 20.0], [300.0, 17.0], [400.0, 11.0], [500.0, 22.0], [600.0, 3.0], [700.0, 18.0], [800.0, 24.0], [900.0, 22.0], [1000.0, 8.0], [1100.0, 35.0], [1200.0, 22.0], [1300.0, 47.0], [1400.0, 41.0], [1500.0, 15.0], [1600.0, 34.0], [1700.0, 15.0], [1800.0, 19.0], [1900.0, 16.0], [2000.0, 18.0], [2100.0, 28.0], [2200.0, 50.0], [2300.0, 39.0], [2400.0, 15.0], [2500.0, 87.0], [2600.0, 404.0], [2800.0, 283.0], [2700.0, 198.0], [2900.0, 179.0], [3000.0, 331.0], [3100.0, 278.0], [3200.0, 169.0], [3300.0, 407.0], [3400.0, 450.0], [3500.0, 1269.0], [3700.0, 223.0], [3600.0, 717.0], [3800.0, 33.0], [3900.0, 60.0], [4000.0, 41.0], [4300.0, 32.0], [4100.0, 30.0], [4200.0, 33.0], [4400.0, 30.0], [4600.0, 34.0], [4500.0, 30.0], [4800.0, 9.0], [4700.0, 14.0], [5000.0, 7.0], [4900.0, 13.0], [5100.0, 3.0], [5200.0, 5.0], [5300.0, 4.0], [5500.0, 10.0], [5600.0, 7.0], [5400.0, 1.0], [5700.0, 12.0], [5800.0, 7.0], [5900.0, 5.0], [6000.0, 2.0], [6100.0, 3.0], [6200.0, 2.0], [6500.0, 5.0], [6400.0, 3.0], [6600.0, 3.0], [6900.0, 33.0], [6700.0, 7.0], [6800.0, 18.0], [7000.0, 42.0], [7100.0, 72.0], [7200.0, 44.0], [7300.0, 19.0], [7400.0, 7.0], [7500.0, 6.0], [7600.0, 4.0], [7800.0, 4.0], [7900.0, 2.0], [8000.0, 1.0], [8200.0, 3.0], [8400.0, 3.0], [8700.0, 1.0], [8900.0, 1.0], [8800.0, 1.0], [9000.0, 1.0], [9100.0, 1.0], [9600.0, 1.0], [9700.0, 2.0], [10000.0, 8.0], [10200.0, 8.0], [10100.0, 6.0], [9800.0, 7.0], [9900.0, 7.0], [10300.0, 10.0], [10400.0, 9.0], [10500.0, 17.0], [10600.0, 12.0], [10700.0, 9.0], [10800.0, 7.0], [11100.0, 11.0], [11200.0, 20.0], [11000.0, 11.0], [10900.0, 11.0], [11300.0, 24.0], [11400.0, 27.0], [11500.0, 24.0], [11600.0, 24.0], [11700.0, 35.0], [11800.0, 33.0], [11900.0, 30.0], [12000.0, 25.0], [12100.0, 37.0], [12200.0, 23.0], [12300.0, 32.0], [12400.0, 37.0], [12500.0, 27.0], [12600.0, 25.0], [12700.0, 28.0], [12800.0, 21.0], [12900.0, 32.0], [13000.0, 20.0], [13100.0, 19.0], [13200.0, 27.0], [13300.0, 20.0], [13400.0, 19.0], [13500.0, 22.0], [13600.0, 12.0], [13700.0, 10.0], [13800.0, 12.0], [13900.0, 4.0], [14100.0, 8.0], [14000.0, 6.0], [14200.0, 11.0], [14300.0, 5.0], [14400.0, 2.0], [14800.0, 1.0], [14700.0, 1.0], [15100.0, 2.0], [15300.0, 2.0], [15200.0, 1.0], [15400.0, 2.0], [15500.0, 2.0], [15800.0, 1.0], [15700.0, 1.0], [15600.0, 1.0], [15900.0, 1.0], [16000.0, 1.0], [16100.0, 3.0], [16300.0, 1.0], [16400.0, 2.0], [17100.0, 3.0], [16600.0, 2.0], [16900.0, 1.0], [17200.0, 3.0], [16800.0, 1.0], [17500.0, 2.0], [18100.0, 2.0], [17600.0, 2.0], [18000.0, 1.0], [18600.0, 1.0], [18500.0, 1.0], [19000.0, 2.0], [19200.0, 2.0], [18700.0, 2.0], [19300.0, 1.0], [18900.0, 1.0], [19100.0, 2.0], [19400.0, 1.0], [19600.0, 2.0], [19700.0, 3.0], [19800.0, 4.0], [19900.0, 1.0], [20100.0, 4.0], [20000.0, 1.0], [19500.0, 1.0], [20200.0, 2.0], [20300.0, 4.0], [20400.0, 3.0], [20500.0, 2.0], [20700.0, 2.0], [20800.0, 1.0], [20900.0, 3.0], [21100.0, 1.0], [21000.0, 5.0], [21300.0, 2.0], [21200.0, 1.0], [24500.0, 1.0], [24900.0, 1.0], [28100.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 28100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 72.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6886.0, "series": [{"data": [[0.0, 72.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 242.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6886.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 802.8338888888873, "minX": 1.6967034E12, "maxY": 802.8338888888873, "series": [{"data": [[1.6967034E12, 802.8338888888873]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6967034E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 110.0, "minX": 1.0, "maxY": 5508.40909090909, "series": [{"data": [[2.0, 114.0], [3.0, 112.66666666666667], [4.0, 156.0], [5.0, 123.0], [6.0, 130.66666666666666], [7.0, 133.0], [8.0, 134.0], [10.0, 202.0], [12.0, 139.0], [13.0, 147.0], [14.0, 152.0], [16.0, 159.0], [17.0, 158.0], [19.0, 171.5], [20.0, 191.0], [21.0, 219.0], [22.0, 215.0], [23.0, 200.0], [26.0, 234.0], [28.0, 240.0], [30.0, 279.0], [31.0, 231.0], [33.0, 257.0], [35.0, 257.5], [36.0, 277.0], [39.0, 291.0], [38.0, 294.6666666666667], [41.0, 275.0], [40.0, 315.0], [43.0, 318.0], [42.0, 319.0], [45.0, 304.0], [44.0, 317.0], [47.0, 353.0], [46.0, 315.0], [49.0, 352.5], [51.0, 369.0], [50.0, 348.0], [53.0, 395.0], [52.0, 390.6666666666667], [55.0, 444.0], [54.0, 410.0], [57.0, 469.0], [56.0, 441.0], [58.0, 484.75], [61.0, 502.0], [60.0, 516.0], [63.0, 522.5], [62.0, 520.0], [67.0, 536.8], [65.0, 526.0], [64.0, 523.0], [71.0, 640.8333333333333], [70.0, 557.5], [69.0, 535.0], [68.0, 538.0], [75.0, 765.5], [73.0, 742.0], [72.0, 744.5], [79.0, 770.25], [78.0, 761.0], [77.0, 759.0], [76.0, 754.0], [82.0, 840.0], [81.0, 803.25], [80.0, 784.0], [87.0, 861.0], [85.0, 861.0], [84.0, 853.3333333333334], [90.0, 869.0], [89.0, 868.0], [88.0, 868.0], [93.0, 890.0], [92.0, 876.0], [99.0, 902.0], [98.0, 913.0], [97.0, 898.0], [96.0, 895.0], [103.0, 922.0], [102.0, 906.0], [101.0, 906.6666666666666], [100.0, 897.0], [107.0, 977.0], [106.0, 997.5], [105.0, 953.0], [104.0, 927.75], [111.0, 1096.5], [110.0, 1107.0], [109.0, 1109.3333333333333], [108.0, 1004.6], [115.0, 1152.0], [114.0, 1131.0], [113.0, 1115.0], [112.0, 1134.0], [119.0, 1143.0], [118.0, 1143.5], [117.0, 1148.0], [116.0, 1113.0], [123.0, 1199.0], [122.0, 2373.0], [121.0, 1131.0], [120.0, 1126.0], [127.0, 1164.0], [126.0, 1198.5], [125.0, 1124.0], [124.0, 1218.0], [135.0, 1190.5], [134.0, 1205.0], [133.0, 1190.0], [132.0, 1132.0], [131.0, 1186.0], [130.0, 1136.0], [129.0, 1172.0], [128.0, 1167.0], [143.0, 1210.0], [142.0, 1195.0], [141.0, 1182.0], [140.0, 1187.0], [139.0, 1184.0], [138.0, 1192.0], [137.0, 1196.0], [136.0, 1190.0], [151.0, 1281.0], [150.0, 1257.0], [149.0, 1253.0], [148.0, 1253.0], [147.0, 1263.0], [146.0, 1247.0], [145.0, 1213.3333333333335], [144.0, 1204.0], [159.0, 1330.3333333333333], [158.0, 1324.75], [157.0, 1310.0], [156.0, 1319.3333333333335], [155.0, 1295.0], [154.0, 1295.0], [153.0, 1269.0], [152.0, 1264.0], [165.0, 1364.0], [164.0, 1377.0], [163.0, 1356.0], [162.0, 1340.0], [161.0, 1334.0], [160.0, 1339.0], [175.0, 1412.0], [174.0, 1385.0], [171.0, 1377.0], [170.0, 1378.0], [169.0, 1373.0], [168.0, 1376.5], [182.0, 1398.0], [180.0, 1405.6666666666667], [178.0, 1383.3333333333333], [191.0, 1437.0], [190.0, 1431.0], [189.0, 1426.0], [188.0, 1414.0], [187.0, 1404.0], [185.0, 1403.0], [184.0, 1397.0], [198.0, 1440.5], [196.0, 1442.0], [195.0, 1436.5], [193.0, 1439.0], [192.0, 1432.0], [207.0, 1461.25], [203.0, 1445.0], [202.0, 1439.5], [201.0, 1436.0], [215.0, 1464.0], [214.0, 1456.0], [213.0, 1491.0], [212.0, 1460.5], [211.0, 1448.0], [210.0, 1453.0], [209.0, 1438.0], [208.0, 1439.0], [221.0, 1514.0], [220.0, 1512.0], [219.0, 1490.0], [218.0, 1490.0], [217.0, 1474.0], [216.0, 1467.0], [231.0, 1574.0], [230.0, 1538.0], [229.0, 1531.0], [228.0, 1535.0], [227.0, 1530.0], [226.0, 1531.0], [225.0, 1520.0], [224.0, 1552.0], [239.0, 1639.0], [238.0, 1627.0], [237.0, 1626.0], [236.0, 1619.3333333333333], [235.0, 1601.0], [234.0, 1593.0], [233.0, 1599.0], [232.0, 1573.0], [247.0, 1665.0], [246.0, 1659.0], [245.0, 1658.0], [244.0, 1658.0], [243.0, 1663.0], [242.0, 1645.0], [241.0, 1645.5], [255.0, 1677.5], [253.0, 1681.5], [250.0, 1662.0], [249.0, 1688.5], [269.0, 1833.0], [270.0, 1839.5], [268.0, 1821.5], [259.0, 1691.5], [258.0, 1691.0], [257.0, 1680.0], [256.0, 1682.0], [267.0, 1795.5], [266.0, 1775.5], [265.0, 1775.75], [264.0, 1740.0], [263.0, 1746.5], [262.0, 1695.0], [261.0, 1699.0], [260.0, 1717.4], [286.0, 1955.2], [287.0, 1996.4444444444443], [285.0, 1939.0], [284.0, 1931.0], [283.0, 1921.0], [282.0, 1900.0], [281.0, 1890.0], [280.0, 1884.0], [279.0, 1869.0], [272.0, 1856.5], [274.0, 1867.0], [273.0, 1864.0], [278.0, 1866.0], [277.0, 1869.0], [276.0, 1874.0], [301.0, 2176.0], [302.0, 2198.0], [300.0, 2178.5], [291.0, 2105.8], [290.0, 2084.5], [289.0, 2060.0], [288.0, 2021.25], [299.0, 2177.0], [298.0, 2174.0], [297.0, 2157.0], [296.0, 2159.0], [295.0, 2144.75], [294.0, 2143.0], [293.0, 2144.0], [292.0, 2130.3333333333335], [318.0, 2370.75], [319.0, 2468.3333333333335], [317.0, 2254.6666666666665], [316.0, 2241.5], [315.0, 2240.0], [314.0, 2231.0], [313.0, 2227.0], [312.0, 2225.5], [311.0, 2220.5], [305.0, 2195.0], [304.0, 2208.0], [307.0, 2209.0], [306.0, 2196.0], [310.0, 2213.0], [309.0, 2201.0], [308.0, 2203.0], [334.0, 2581.8571428571427], [335.0, 2580.666666666667], [333.0, 2570.5], [332.0, 2564.0000000000005], [331.0, 2556.0], [330.0, 2545.0], [329.0, 2537.25], [328.0, 2525.9], [327.0, 2516.25], [321.0, 2496.0], [320.0, 2491.0], [323.0, 2503.0], [322.0, 2497.0], [326.0, 2526.0], [325.0, 2520.25], [324.0, 2517.5], [338.0, 2587.0], [350.0, 2617.0], [347.0, 2599.75], [343.0, 2583.0], [342.0, 2593.5], [340.0, 2584.0], [339.0, 2580.0], [337.0, 2594.0], [336.0, 2587.0], [366.0, 2613.5], [367.0, 2620.0], [365.0, 2608.75], [363.0, 2609.5], [362.0, 2598.0], [361.0, 2606.3333333333335], [359.0, 2618.5], [357.0, 2620.8888888888887], [355.0, 2643.0], [354.0, 2634.0], [371.0, 2613.0], [383.0, 2611.75], [380.0, 2606.0], [370.0, 2613.0], [369.0, 2609.5], [368.0, 2614.0], [379.0, 2614.0], [378.0, 2618.0], [376.0, 2617.0], [375.0, 2627.0], [374.0, 2614.5], [373.0, 2619.0], [372.0, 2618.0], [398.0, 2609.0], [399.0, 2611.0], [397.0, 2619.5], [396.0, 2613.3333333333335], [395.0, 2612.0], [394.0, 2615.0], [393.0, 2617.0], [392.0, 2619.6666666666665], [391.0, 2622.5], [384.0, 2607.0], [386.0, 2606.0], [385.0, 2605.0], [390.0, 2616.4285714285716], [389.0, 2617.6], [388.0, 2617.25], [414.0, 2682.0], [415.0, 2676.0], [413.0, 2670.2], [412.0, 2651.0], [411.0, 2658.75], [410.0, 2674.0], [408.0, 2668.166666666667], [407.0, 2654.0], [401.0, 2613.0], [400.0, 2623.2], [403.0, 2623.6666666666665], [402.0, 2631.0], [406.0, 2643.125], [404.0, 2620.4], [430.0, 2682.0], [431.0, 2681.0], [429.0, 2680.3333333333335], [428.0, 2686.0], [427.0, 2698.3333333333335], [426.0, 2698.0], [425.0, 2687.0], [424.0, 2690.0], [423.0, 2706.5], [417.0, 2677.0], [416.0, 2688.0], [419.0, 2692.0], [418.0, 2687.5], [422.0, 2685.5], [421.0, 2691.0], [420.0, 2697.0], [435.0, 2711.0], [446.0, 2702.0], [447.0, 2702.5], [444.0, 2699.0], [443.0, 2725.3333333333335], [441.0, 2717.8], [439.0, 2721.3333333333335], [438.0, 2718.0], [437.0, 2728.6666666666665], [434.0, 2725.0], [433.0, 2707.5], [432.0, 2704.0], [462.0, 2751.6666666666665], [463.0, 2734.0], [460.0, 2727.0], [451.0, 2706.5], [450.0, 2721.0], [449.0, 2707.0], [448.0, 2706.0], [459.0, 2734.5], [458.0, 2731.25], [457.0, 2720.0], [456.0, 2729.6666666666665], [454.0, 2717.0], [452.0, 2713.6666666666665], [477.0, 2785.0], [476.0, 2782.0], [467.0, 2762.0], [466.0, 2757.3333333333335], [465.0, 2755.5], [464.0, 2745.0], [475.0, 2787.0], [474.0, 2780.8], [473.0, 2790.4285714285716], [472.0, 2771.6666666666665], [471.0, 2768.5], [470.0, 2767.3333333333335], [469.0, 2762.0], [494.0, 2786.3333333333335], [495.0, 2788.0], [492.0, 2780.0], [480.0, 2806.5], [491.0, 2798.0], [490.0, 2786.0], [489.0, 2779.0], [488.0, 2812.5], [486.0, 2802.6666666666665], [484.0, 2813.6666666666665], [508.0, 2787.5], [507.0, 2794.0], [506.0, 2790.5], [505.0, 2790.3333333333335], [503.0, 2792.0], [497.0, 2800.0], [502.0, 2784.0], [501.0, 2791.0], [500.0, 2781.5], [499.0, 2789.0], [498.0, 2780.0], [536.0, 2818.5], [541.0, 2808.8], [543.0, 2803.0], [530.0, 2807.0], [528.0, 2806.0], [540.0, 2814.0], [539.0, 2806.0], [538.0, 2821.5], [527.0, 2799.0], [512.0, 2793.4], [515.0, 2797.0], [513.0, 2788.0], [517.0, 2785.0], [516.0, 2799.0], [519.0, 2790.0], [518.0, 2784.0], [526.0, 2800.5], [525.0, 2800.0], [524.0, 2801.0], [523.0, 2799.0], [522.0, 2798.0], [521.0, 2797.0], [520.0, 2800.0], [534.0, 2814.0], [533.0, 2810.0], [532.0, 2813.0], [531.0, 2814.0], [573.0, 2867.0], [564.0, 2860.5], [574.0, 2866.5], [561.0, 2869.5], [563.0, 2866.0], [562.0, 2865.0], [572.0, 2872.0], [571.0, 2877.3333333333335], [568.0, 2868.0], [551.0, 2845.0], [550.0, 2850.0], [549.0, 2851.6666666666665], [548.0, 2831.0], [545.0, 2815.5], [544.0, 2796.0], [559.0, 2863.0], [558.0, 2859.0], [557.0, 2854.0], [556.0, 2848.0], [555.0, 2850.0], [554.0, 2848.0], [552.0, 2845.0], [567.0, 2869.8], [566.0, 2862.0], [565.0, 2855.0], [605.0, 2877.0], [595.0, 2861.0], [607.0, 2870.5], [592.0, 2866.6666666666665], [594.0, 2862.0], [593.0, 2860.0], [603.0, 2871.5], [601.0, 2866.5], [600.0, 2867.5], [583.0, 2867.5], [582.0, 2869.0], [581.0, 2869.5], [580.0, 2881.5], [578.0, 2870.0], [577.0, 2870.3333333333335], [591.0, 2861.0], [590.0, 2857.0], [589.0, 2861.0], [588.0, 2860.6666666666665], [587.0, 2863.0], [586.0, 2865.0], [585.0, 2866.0], [584.0, 2865.0], [598.0, 2869.0], [597.0, 2866.0], [596.0, 2870.6666666666665], [638.0, 2867.5], [639.0, 2869.0], [625.0, 2883.3333333333335], [627.0, 2872.5], [626.0, 2883.6666666666665], [629.0, 2865.3333333333335], [628.0, 2868.0], [637.0, 2862.6666666666665], [636.0, 2872.0], [635.0, 2873.5], [634.0, 2870.6666666666665], [633.0, 2875.0], [615.0, 2877.0], [613.0, 2869.0], [612.0, 2867.3333333333335], [609.0, 2871.0], [608.0, 2868.0], [621.0, 2878.0], [619.0, 2880.5], [618.0, 2880.0], [631.0, 2873.0], [630.0, 2862.5], [668.0, 2918.0], [670.0, 2928.75], [657.0, 2890.666666666667], [667.0, 2921.0], [666.0, 2924.0], [665.0, 2908.6666666666665], [664.0, 2901.0], [653.0, 2876.0], [641.0, 2873.0], [640.0, 2873.0], [643.0, 2875.0], [642.0, 2869.0], [646.0, 2887.5], [645.0, 2879.6666666666665], [652.0, 2886.75], [650.0, 2889.75], [662.0, 2892.5], [661.0, 2897.0], [660.0, 2892.5], [658.0, 2881.0], [701.0, 2960.5], [703.0, 2976.5], [699.0, 2970.0], [696.0, 2965.3333333333335], [694.0, 2981.5], [692.0, 2963.5], [690.0, 2970.0], [688.0, 2959.3333333333335], [685.0, 2951.0], [673.0, 2929.0], [672.0, 2917.0], [676.0, 2940.0], [675.0, 2934.3333333333335], [679.0, 2944.8], [677.0, 2935.0], [684.0, 2955.3333333333335], [683.0, 2947.0], [682.0, 2946.6666666666665], [681.0, 2947.5], [733.0, 2976.0], [734.0, 2979.0], [731.0, 2966.0], [730.0, 2977.0], [728.0, 2961.5], [711.0, 2979.25], [708.0, 2989.0], [707.0, 2964.0], [706.0, 2970.0], [705.0, 2975.5], [719.0, 2966.5], [718.0, 2971.0], [717.0, 2971.6666666666665], [714.0, 2974.0], [713.0, 2978.0], [712.0, 2982.0], [724.0, 2954.0], [723.0, 2954.5], [721.0, 2957.0], [720.0, 2959.0], [763.0, 2979.0], [756.0, 2966.0], [766.0, 2999.0], [753.0, 2962.0], [752.0, 2962.0], [762.0, 2988.6666666666665], [743.0, 2958.0], [742.0, 2961.0], [741.0, 2958.0], [740.0, 2959.0], [739.0, 2965.0], [738.0, 2960.0], [737.0, 2998.0], [736.0, 2983.0], [751.0, 2964.0], [750.0, 2952.0], [749.0, 2973.5], [747.0, 2958.0], [746.0, 2960.0], [745.0, 2955.0], [744.0, 2957.0], [759.0, 2968.0], [758.0, 2972.0], [757.0, 2970.0], [755.0, 2967.0], [754.0, 2959.0], [797.0, 3022.0], [799.0, 3023.0], [784.0, 3003.0], [796.0, 3016.5], [795.0, 3036.3333333333335], [793.0, 3030.0], [792.0, 3017.6666666666665], [783.0, 3002.0], [773.0, 3007.1666666666665], [770.0, 2999.0], [782.0, 2992.0], [781.0, 2992.5], [779.0, 2994.0], [778.0, 3005.4], [791.0, 3013.5], [789.0, 3008.0], [788.0, 3007.0], [787.0, 3040.0], [828.0, 3017.0], [831.0, 3028.3333333333335], [816.0, 3045.6666666666665], [818.0, 3061.0], [817.0, 3062.0], [820.0, 3069.25], [819.0, 3051.0], [830.0, 3022.3333333333335], [829.0, 3018.5], [827.0, 3045.6666666666665], [826.0, 3029.6], [825.0, 3040.4], [824.0, 3041.5], [815.0, 3029.3333333333335], [801.0, 3017.0], [805.0, 3021.5], [803.0, 3022.5], [807.0, 5436.0], [806.0, 3023.3333333333335], [814.0, 3042.5], [813.0, 3028.3333333333335], [812.0, 3034.0], [811.0, 3006.0], [810.0, 3017.0], [823.0, 3076.6666666666665], [822.0, 3073.0], [860.0, 3513.7209302325577], [863.0, 3351.0], [848.0, 3287.0], [851.0, 3276.076923076923], [850.0, 3312.1], [853.0, 3272.75], [852.0, 3273.0], [862.0, 3444.5833333333326], [861.0, 3323.0], [859.0, 3287.5], [858.0, 3284.75], [857.0, 3287.0], [856.0, 3279.8], [847.0, 3273.0], [833.0, 3026.75], [832.0, 3027.5], [835.0, 3026.5], [834.0, 3010.0], [837.0, 3160.8571428571427], [836.0, 3097.4590163934413], [839.0, 3172.7058823529414], [838.0, 3168.375], [846.0, 3280.0], [845.0, 3256.0], [844.0, 3252.0], [843.0, 3243.75], [842.0, 3239.0], [841.0, 3218.5227272727266], [840.0, 3183.3589743589737], [855.0, 3276.5], [854.0, 3273.0], [889.0, 4008.571428571428], [894.0, 4551.428571428572], [895.0, 5340.5], [881.0, 3405.7142857142853], [880.0, 3387.6521739130435], [883.0, 3420.6666666666665], [882.0, 3414.0], [892.0, 3512.0], [891.0, 3508.0], [890.0, 5017.083333333332], [888.0, 3488.5], [871.0, 3358.5555555555557], [869.0, 3359.0], [868.0, 3358.666666666667], [867.0, 3364.4], [866.0, 3365.5], [865.0, 3354.777777777778], [864.0, 3348.0], [879.0, 3371.6666666666665], [878.0, 3373.5], [877.0, 3374.0], [876.0, 3361.25], [874.0, 3364.666666666667], [873.0, 3363.0], [872.0, 3361.5], [887.0, 3485.1428571428573], [886.0, 3473.777777777778], [885.0, 3474.6666666666665], [884.0, 3505.6181818181817], [900.0, 5476.128427419343], [899.0, 5508.40909090909], [898.0, 3518.6666666666665], [896.0, 4725.666666666667], [1.0, 110.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[802.8338888888873, 4614.537638888868]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 900.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 18765.0, "minX": 1.6967034E12, "maxY": 397938.5333333333, "series": [{"data": [[1.6967034E12, 397938.5333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6967034E12, 18765.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6967034E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4614.537638888868, "minX": 1.6967034E12, "maxY": 4614.537638888868, "series": [{"data": [[1.6967034E12, 4614.537638888868]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6967034E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4613.716944444435, "minX": 1.6967034E12, "maxY": 4613.716944444435, "series": [{"data": [[1.6967034E12, 4613.716944444435]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6967034E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1099.5987499999976, "minX": 1.6967034E12, "maxY": 1099.5987499999976, "series": [{"data": [[1.6967034E12, 1099.5987499999976]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6967034E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 110.0, "minX": 1.6967034E12, "maxY": 28106.0, "series": [{"data": [[1.6967034E12, 28106.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6967034E12, 110.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6967034E12, 11522.900000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6967034E12, 16948.60999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6967034E12, 3519.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.6967034E12, 12758.199999999997]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6967034E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 274.5, "minX": 13.0, "maxY": 14403.0, "series": [{"data": [[39.0, 10160.0], [76.0, 274.5], [101.0, 11049.0], [125.0, 13644.0], [204.0, 2665.0], [13.0, 14403.0], [212.0, 3539.0], [211.0, 3556.0], [224.0, 3598.0], [229.0, 3527.0], [234.0, 3144.0], [239.0, 3492.0], [232.0, 3695.0], [244.0, 2693.0], [251.0, 3704.0], [259.0, 11793.0], [262.0, 4276.0], [270.0, 3440.5], [257.0, 3619.0], [267.0, 2572.0], [277.0, 3527.0], [276.0, 3540.0], [284.0, 3079.0], [294.0, 3707.5], [295.0, 3226.0], [305.0, 3367.0], [313.0, 2775.0], [325.0, 2856.0], [345.0, 12624.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 345.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 274.0, "minX": 13.0, "maxY": 14403.0, "series": [{"data": [[39.0, 10160.0], [76.0, 274.0], [101.0, 11049.0], [125.0, 13644.0], [204.0, 2665.0], [13.0, 14403.0], [212.0, 3539.0], [211.0, 3556.0], [224.0, 3598.0], [229.0, 3527.0], [234.0, 3144.0], [239.0, 3492.0], [232.0, 3695.0], [244.0, 2693.0], [251.0, 3693.0], [259.0, 11793.0], [262.0, 4276.0], [270.0, 3440.5], [257.0, 3619.0], [267.0, 2572.0], [277.0, 3527.0], [276.0, 3540.0], [284.0, 3078.5], [294.0, 3707.5], [295.0, 3223.0], [305.0, 3367.0], [313.0, 2772.0], [325.0, 2856.0], [345.0, 12624.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 345.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 120.0, "minX": 1.6967034E12, "maxY": 120.0, "series": [{"data": [[1.6967034E12, 120.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6967034E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 120.0, "minX": 1.6967034E12, "maxY": 120.0, "series": [{"data": [[1.6967034E12, 120.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6967034E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 120.0, "minX": 1.6967034E12, "maxY": 120.0, "series": [{"data": [[1.6967034E12, 120.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6967034E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 120.0, "minX": 1.6967034E12, "maxY": 120.0, "series": [{"data": [[1.6967034E12, 120.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6967034E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

