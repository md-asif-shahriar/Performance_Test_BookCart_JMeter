/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 100.0, "minX": 0.0, "maxY": 8841.0, "series": [{"data": [[0.0, 100.0], [0.1, 100.0], [0.2, 100.0], [0.3, 100.0], [0.4, 101.0], [0.5, 102.0], [0.6, 102.0], [0.7, 103.0], [0.8, 103.0], [0.9, 105.0], [1.0, 107.0], [1.1, 108.0], [1.2, 109.0], [1.3, 110.0], [1.4, 110.0], [1.5, 110.0], [1.6, 111.0], [1.7, 111.0], [1.8, 111.0], [1.9, 112.0], [2.0, 114.0], [2.1, 114.0], [2.2, 115.0], [2.3, 115.0], [2.4, 116.0], [2.5, 118.0], [2.6, 121.0], [2.7, 123.0], [2.8, 124.0], [2.9, 125.0], [3.0, 127.0], [3.1, 127.0], [3.2, 130.0], [3.3, 133.0], [3.4, 135.0], [3.5, 138.0], [3.6, 139.0], [3.7, 141.0], [3.8, 144.0], [3.9, 151.0], [4.0, 163.0], [4.1, 194.0], [4.2, 201.0], [4.3, 202.0], [4.4, 206.0], [4.5, 210.0], [4.6, 211.0], [4.7, 215.0], [4.8, 216.0], [4.9, 220.0], [5.0, 222.0], [5.1, 225.0], [5.2, 225.0], [5.3, 228.0], [5.4, 233.0], [5.5, 236.0], [5.6, 240.0], [5.7, 243.0], [5.8, 244.0], [5.9, 248.0], [6.0, 250.0], [6.1, 251.0], [6.2, 252.0], [6.3, 255.0], [6.4, 259.0], [6.5, 267.0], [6.6, 270.0], [6.7, 272.0], [6.8, 280.0], [6.9, 282.0], [7.0, 284.0], [7.1, 290.0], [7.2, 296.0], [7.3, 306.0], [7.4, 311.0], [7.5, 315.0], [7.6, 319.0], [7.7, 320.0], [7.8, 322.0], [7.9, 324.0], [8.0, 328.0], [8.1, 331.0], [8.2, 341.0], [8.3, 346.0], [8.4, 353.0], [8.5, 355.0], [8.6, 357.0], [8.7, 358.0], [8.8, 359.0], [8.9, 359.0], [9.0, 361.0], [9.1, 362.0], [9.2, 362.0], [9.3, 363.0], [9.4, 364.0], [9.5, 366.0], [9.6, 368.0], [9.7, 370.0], [9.8, 370.0], [9.9, 373.0], [10.0, 380.0], [10.1, 447.0], [10.2, 478.0], [10.3, 494.0], [10.4, 502.0], [10.5, 524.0], [10.6, 551.0], [10.7, 572.0], [10.8, 653.0], [10.9, 665.0], [11.0, 679.0], [11.1, 686.0], [11.2, 703.0], [11.3, 720.0], [11.4, 742.0], [11.5, 755.0], [11.6, 772.0], [11.7, 812.0], [11.8, 820.0], [11.9, 822.0], [12.0, 831.0], [12.1, 842.0], [12.2, 862.0], [12.3, 874.0], [12.4, 885.0], [12.5, 900.0], [12.6, 914.0], [12.7, 934.0], [12.8, 943.0], [12.9, 970.0], [13.0, 986.0], [13.1, 987.0], [13.2, 989.0], [13.3, 991.0], [13.4, 995.0], [13.5, 997.0], [13.6, 999.0], [13.7, 1000.0], [13.8, 1001.0], [13.9, 1003.0], [14.0, 1004.0], [14.1, 1006.0], [14.2, 1007.0], [14.3, 1009.0], [14.4, 1010.0], [14.5, 1013.0], [14.6, 1015.0], [14.7, 1016.0], [14.8, 1018.0], [14.9, 1023.0], [15.0, 1024.0], [15.1, 1027.0], [15.2, 1029.0], [15.3, 1031.0], [15.4, 1034.0], [15.5, 1038.0], [15.6, 1046.0], [15.7, 1065.0], [15.8, 1067.0], [15.9, 1071.0], [16.0, 1076.0], [16.1, 1079.0], [16.2, 1082.0], [16.3, 1083.0], [16.4, 1086.0], [16.5, 1090.0], [16.6, 1092.0], [16.7, 1093.0], [16.8, 1095.0], [16.9, 1097.0], [17.0, 1099.0], [17.1, 1100.0], [17.2, 1101.0], [17.3, 1103.0], [17.4, 1105.0], [17.5, 1105.0], [17.6, 1106.0], [17.7, 1107.0], [17.8, 1108.0], [17.9, 1109.0], [18.0, 1111.0], [18.1, 1111.0], [18.2, 1113.0], [18.3, 1114.0], [18.4, 1118.0], [18.5, 1120.0], [18.6, 1123.0], [18.7, 1123.0], [18.8, 1124.0], [18.9, 1124.0], [19.0, 1125.0], [19.1, 1127.0], [19.2, 1128.0], [19.3, 1129.0], [19.4, 1131.0], [19.5, 1134.0], [19.6, 1134.0], [19.7, 1135.0], [19.8, 1135.0], [19.9, 1136.0], [20.0, 1137.0], [20.1, 1138.0], [20.2, 1138.0], [20.3, 1139.0], [20.4, 1140.0], [20.5, 1141.0], [20.6, 1141.0], [20.7, 1142.0], [20.8, 1144.0], [20.9, 1146.0], [21.0, 1146.0], [21.1, 1147.0], [21.2, 1148.0], [21.3, 1150.0], [21.4, 1151.0], [21.5, 1153.0], [21.6, 1153.0], [21.7, 1155.0], [21.8, 1156.0], [21.9, 1157.0], [22.0, 1157.0], [22.1, 1159.0], [22.2, 1159.0], [22.3, 1160.0], [22.4, 1160.0], [22.5, 1161.0], [22.6, 1161.0], [22.7, 1161.0], [22.8, 1162.0], [22.9, 1163.0], [23.0, 1165.0], [23.1, 1166.0], [23.2, 1168.0], [23.3, 1168.0], [23.4, 1170.0], [23.5, 1173.0], [23.6, 1176.0], [23.7, 1178.0], [23.8, 1180.0], [23.9, 1182.0], [24.0, 1183.0], [24.1, 1187.0], [24.2, 1190.0], [24.3, 1190.0], [24.4, 1192.0], [24.5, 1196.0], [24.6, 1198.0], [24.7, 1200.0], [24.8, 1201.0], [24.9, 1201.0], [25.0, 1202.0], [25.1, 1202.0], [25.2, 1203.0], [25.3, 1206.0], [25.4, 1206.0], [25.5, 1208.0], [25.6, 1210.0], [25.7, 1211.0], [25.8, 1211.0], [25.9, 1212.0], [26.0, 1213.0], [26.1, 1215.0], [26.2, 1215.0], [26.3, 1216.0], [26.4, 1217.0], [26.5, 1220.0], [26.6, 1221.0], [26.7, 1222.0], [26.8, 1222.0], [26.9, 1222.0], [27.0, 1224.0], [27.1, 1225.0], [27.2, 1226.0], [27.3, 1227.0], [27.4, 1229.0], [27.5, 1232.0], [27.6, 1233.0], [27.7, 1234.0], [27.8, 1235.0], [27.9, 1235.0], [28.0, 1236.0], [28.1, 1237.0], [28.2, 1238.0], [28.3, 1240.0], [28.4, 1242.0], [28.5, 1245.0], [28.6, 1245.0], [28.7, 1246.0], [28.8, 1247.0], [28.9, 1247.0], [29.0, 1249.0], [29.1, 1249.0], [29.2, 1250.0], [29.3, 1251.0], [29.4, 1251.0], [29.5, 1251.0], [29.6, 1252.0], [29.7, 1252.0], [29.8, 1253.0], [29.9, 1254.0], [30.0, 1255.0], [30.1, 1256.0], [30.2, 1256.0], [30.3, 1256.0], [30.4, 1256.0], [30.5, 1257.0], [30.6, 1259.0], [30.7, 1259.0], [30.8, 1260.0], [30.9, 1260.0], [31.0, 1261.0], [31.1, 1261.0], [31.2, 1262.0], [31.3, 1262.0], [31.4, 1262.0], [31.5, 1262.0], [31.6, 1263.0], [31.7, 1264.0], [31.8, 1265.0], [31.9, 1265.0], [32.0, 1266.0], [32.1, 1266.0], [32.2, 1267.0], [32.3, 1267.0], [32.4, 1268.0], [32.5, 1268.0], [32.6, 1269.0], [32.7, 1269.0], [32.8, 1270.0], [32.9, 1271.0], [33.0, 1271.0], [33.1, 1272.0], [33.2, 1272.0], [33.3, 1273.0], [33.4, 1273.0], [33.5, 1273.0], [33.6, 1274.0], [33.7, 1275.0], [33.8, 1275.0], [33.9, 1275.0], [34.0, 1275.0], [34.1, 1276.0], [34.2, 1276.0], [34.3, 1277.0], [34.4, 1277.0], [34.5, 1278.0], [34.6, 1278.0], [34.7, 1279.0], [34.8, 1279.0], [34.9, 1279.0], [35.0, 1280.0], [35.1, 1280.0], [35.2, 1280.0], [35.3, 1280.0], [35.4, 1281.0], [35.5, 1281.0], [35.6, 1281.0], [35.7, 1282.0], [35.8, 1283.0], [35.9, 1283.0], [36.0, 1284.0], [36.1, 1286.0], [36.2, 1286.0], [36.3, 1287.0], [36.4, 1288.0], [36.5, 1289.0], [36.6, 1289.0], [36.7, 1290.0], [36.8, 1291.0], [36.9, 1292.0], [37.0, 1294.0], [37.1, 1295.0], [37.2, 1296.0], [37.3, 1297.0], [37.4, 1298.0], [37.5, 1299.0], [37.6, 1302.0], [37.7, 1304.0], [37.8, 1305.0], [37.9, 1305.0], [38.0, 1306.0], [38.1, 1306.0], [38.2, 1307.0], [38.3, 1308.0], [38.4, 1308.0], [38.5, 1310.0], [38.6, 1310.0], [38.7, 1313.0], [38.8, 1314.0], [38.9, 1314.0], [39.0, 1315.0], [39.1, 1316.0], [39.2, 1317.0], [39.3, 1317.0], [39.4, 1318.0], [39.5, 1319.0], [39.6, 1319.0], [39.7, 1319.0], [39.8, 1320.0], [39.9, 1321.0], [40.0, 1323.0], [40.1, 1323.0], [40.2, 1324.0], [40.3, 1326.0], [40.4, 1327.0], [40.5, 1328.0], [40.6, 1329.0], [40.7, 1330.0], [40.8, 1330.0], [40.9, 1331.0], [41.0, 1333.0], [41.1, 1334.0], [41.2, 1335.0], [41.3, 1335.0], [41.4, 1336.0], [41.5, 1337.0], [41.6, 1337.0], [41.7, 1339.0], [41.8, 1340.0], [41.9, 1340.0], [42.0, 1341.0], [42.1, 1341.0], [42.2, 1342.0], [42.3, 1343.0], [42.4, 1344.0], [42.5, 1345.0], [42.6, 1346.0], [42.7, 1346.0], [42.8, 1348.0], [42.9, 1349.0], [43.0, 1349.0], [43.1, 1350.0], [43.2, 1350.0], [43.3, 1350.0], [43.4, 1351.0], [43.5, 1352.0], [43.6, 1353.0], [43.7, 1353.0], [43.8, 1354.0], [43.9, 1355.0], [44.0, 1356.0], [44.1, 1356.0], [44.2, 1357.0], [44.3, 1358.0], [44.4, 1359.0], [44.5, 1360.0], [44.6, 1361.0], [44.7, 1361.0], [44.8, 1363.0], [44.9, 1364.0], [45.0, 1365.0], [45.1, 1366.0], [45.2, 1367.0], [45.3, 1368.0], [45.4, 1369.0], [45.5, 1369.0], [45.6, 1370.0], [45.7, 1371.0], [45.8, 1371.0], [45.9, 1372.0], [46.0, 1374.0], [46.1, 1375.0], [46.2, 1376.0], [46.3, 1377.0], [46.4, 1377.0], [46.5, 1378.0], [46.6, 1379.0], [46.7, 1379.0], [46.8, 1381.0], [46.9, 1382.0], [47.0, 1383.0], [47.1, 1384.0], [47.2, 1385.0], [47.3, 1386.0], [47.4, 1387.0], [47.5, 1387.0], [47.6, 1388.0], [47.7, 1389.0], [47.8, 1390.0], [47.9, 1390.0], [48.0, 1390.0], [48.1, 1391.0], [48.2, 1392.0], [48.3, 1393.0], [48.4, 1393.0], [48.5, 1395.0], [48.6, 1395.0], [48.7, 1397.0], [48.8, 1399.0], [48.9, 1399.0], [49.0, 1403.0], [49.1, 1403.0], [49.2, 1405.0], [49.3, 1406.0], [49.4, 1408.0], [49.5, 1408.0], [49.6, 1408.0], [49.7, 1410.0], [49.8, 1411.0], [49.9, 1412.0], [50.0, 1414.0], [50.1, 1414.0], [50.2, 1415.0], [50.3, 1417.0], [50.4, 1419.0], [50.5, 1420.0], [50.6, 1421.0], [50.7, 1422.0], [50.8, 1423.0], [50.9, 1424.0], [51.0, 1426.0], [51.1, 1426.0], [51.2, 1428.0], [51.3, 1429.0], [51.4, 1430.0], [51.5, 1432.0], [51.6, 1434.0], [51.7, 1434.0], [51.8, 1435.0], [51.9, 1436.0], [52.0, 1436.0], [52.1, 1440.0], [52.2, 1442.0], [52.3, 1444.0], [52.4, 1447.0], [52.5, 1449.0], [52.6, 1450.0], [52.7, 1452.0], [52.8, 1453.0], [52.9, 1455.0], [53.0, 1458.0], [53.1, 1459.0], [53.2, 1460.0], [53.3, 1461.0], [53.4, 1462.0], [53.5, 1463.0], [53.6, 1466.0], [53.7, 1467.0], [53.8, 1470.0], [53.9, 1471.0], [54.0, 1477.0], [54.1, 1479.0], [54.2, 1480.0], [54.3, 1481.0], [54.4, 1483.0], [54.5, 1484.0], [54.6, 1488.0], [54.7, 1489.0], [54.8, 1491.0], [54.9, 1493.0], [55.0, 1496.0], [55.1, 1497.0], [55.2, 1498.0], [55.3, 1500.0], [55.4, 1501.0], [55.5, 1503.0], [55.6, 1503.0], [55.7, 1503.0], [55.8, 1505.0], [55.9, 1505.0], [56.0, 1507.0], [56.1, 1508.0], [56.2, 1508.0], [56.3, 1509.0], [56.4, 1509.0], [56.5, 1510.0], [56.6, 1512.0], [56.7, 1514.0], [56.8, 1514.0], [56.9, 1515.0], [57.0, 1515.0], [57.1, 1516.0], [57.2, 1517.0], [57.3, 1520.0], [57.4, 1521.0], [57.5, 1523.0], [57.6, 1525.0], [57.7, 1527.0], [57.8, 1529.0], [57.9, 1529.0], [58.0, 1532.0], [58.1, 1533.0], [58.2, 1534.0], [58.3, 1535.0], [58.4, 1535.0], [58.5, 1537.0], [58.6, 1539.0], [58.7, 1540.0], [58.8, 1541.0], [58.9, 1542.0], [59.0, 1545.0], [59.1, 1545.0], [59.2, 1546.0], [59.3, 1548.0], [59.4, 1549.0], [59.5, 1550.0], [59.6, 1552.0], [59.7, 1553.0], [59.8, 1554.0], [59.9, 1556.0], [60.0, 1556.0], [60.1, 1558.0], [60.2, 1558.0], [60.3, 1560.0], [60.4, 1560.0], [60.5, 1563.0], [60.6, 1566.0], [60.7, 1567.0], [60.8, 1568.0], [60.9, 1568.0], [61.0, 1570.0], [61.1, 1571.0], [61.2, 1572.0], [61.3, 1572.0], [61.4, 1573.0], [61.5, 1575.0], [61.6, 1576.0], [61.7, 1577.0], [61.8, 1577.0], [61.9, 1578.0], [62.0, 1578.0], [62.1, 1579.0], [62.2, 1579.0], [62.3, 1580.0], [62.4, 1580.0], [62.5, 1582.0], [62.6, 1582.0], [62.7, 1582.0], [62.8, 1583.0], [62.9, 1584.0], [63.0, 1585.0], [63.1, 1585.0], [63.2, 1585.0], [63.3, 1586.0], [63.4, 1586.0], [63.5, 1586.0], [63.6, 1586.0], [63.7, 1587.0], [63.8, 1588.0], [63.9, 1588.0], [64.0, 1588.0], [64.1, 1589.0], [64.2, 1590.0], [64.3, 1590.0], [64.4, 1590.0], [64.5, 1591.0], [64.6, 1591.0], [64.7, 1592.0], [64.8, 1593.0], [64.9, 1593.0], [65.0, 1593.0], [65.1, 1594.0], [65.2, 1594.0], [65.3, 1594.0], [65.4, 1594.0], [65.5, 1595.0], [65.6, 1595.0], [65.7, 1596.0], [65.8, 1596.0], [65.9, 1597.0], [66.0, 1598.0], [66.1, 1598.0], [66.2, 1598.0], [66.3, 1599.0], [66.4, 1599.0], [66.5, 1600.0], [66.6, 1600.0], [66.7, 1600.0], [66.8, 1601.0], [66.9, 1601.0], [67.0, 1601.0], [67.1, 1602.0], [67.2, 1602.0], [67.3, 1602.0], [67.4, 1603.0], [67.5, 1604.0], [67.6, 1605.0], [67.7, 1607.0], [67.8, 1607.0], [67.9, 1609.0], [68.0, 1610.0], [68.1, 1611.0], [68.2, 1612.0], [68.3, 1612.0], [68.4, 1613.0], [68.5, 1614.0], [68.6, 1614.0], [68.7, 1616.0], [68.8, 1616.0], [68.9, 1617.0], [69.0, 1618.0], [69.1, 1619.0], [69.2, 1620.0], [69.3, 1621.0], [69.4, 1622.0], [69.5, 1624.0], [69.6, 1624.0], [69.7, 1625.0], [69.8, 1625.0], [69.9, 1627.0], [70.0, 1628.0], [70.1, 1628.0], [70.2, 1629.0], [70.3, 1629.0], [70.4, 1630.0], [70.5, 1631.0], [70.6, 1631.0], [70.7, 1632.0], [70.8, 1633.0], [70.9, 1634.0], [71.0, 1634.0], [71.1, 1635.0], [71.2, 1636.0], [71.3, 1637.0], [71.4, 1638.0], [71.5, 1639.0], [71.6, 1639.0], [71.7, 1640.0], [71.8, 1640.0], [71.9, 1640.0], [72.0, 1642.0], [72.1, 1642.0], [72.2, 1643.0], [72.3, 1644.0], [72.4, 1644.0], [72.5, 1645.0], [72.6, 1646.0], [72.7, 1646.0], [72.8, 1647.0], [72.9, 1648.0], [73.0, 1649.0], [73.1, 1650.0], [73.2, 1650.0], [73.3, 1651.0], [73.4, 1652.0], [73.5, 1653.0], [73.6, 1653.0], [73.7, 1653.0], [73.8, 1654.0], [73.9, 1655.0], [74.0, 1658.0], [74.1, 1658.0], [74.2, 1659.0], [74.3, 1660.0], [74.4, 1661.0], [74.5, 1661.0], [74.6, 1662.0], [74.7, 1662.0], [74.8, 1663.0], [74.9, 1663.0], [75.0, 1664.0], [75.1, 1665.0], [75.2, 1665.0], [75.3, 1666.0], [75.4, 1667.0], [75.5, 1667.0], [75.6, 1668.0], [75.7, 1669.0], [75.8, 1670.0], [75.9, 1671.0], [76.0, 1672.0], [76.1, 1673.0], [76.2, 1675.0], [76.3, 1677.0], [76.4, 1678.0], [76.5, 1681.0], [76.6, 1684.0], [76.7, 1687.0], [76.8, 1692.0], [76.9, 1696.0], [77.0, 1706.0], [77.1, 1712.0], [77.2, 1717.0], [77.3, 1732.0], [77.4, 1735.0], [77.5, 1742.0], [77.6, 1749.0], [77.7, 1751.0], [77.8, 1753.0], [77.9, 1762.0], [78.0, 1768.0], [78.1, 1769.0], [78.2, 1774.0], [78.3, 1777.0], [78.4, 1781.0], [78.5, 1785.0], [78.6, 1788.0], [78.7, 1790.0], [78.8, 1793.0], [78.9, 1796.0], [79.0, 1807.0], [79.1, 1811.0], [79.2, 1820.0], [79.3, 1822.0], [79.4, 1831.0], [79.5, 1845.0], [79.6, 1850.0], [79.7, 1853.0], [79.8, 1859.0], [79.9, 1875.0], [80.0, 1922.0], [80.1, 1973.0], [80.2, 1991.0], [80.3, 2002.0], [80.4, 2036.0], [80.5, 2049.0], [80.6, 2078.0], [80.7, 2106.0], [80.8, 2143.0], [80.9, 2179.0], [81.0, 2217.0], [81.1, 2222.0], [81.2, 2247.0], [81.3, 2254.0], [81.4, 2257.0], [81.5, 2277.0], [81.6, 2294.0], [81.7, 2299.0], [81.8, 2310.0], [81.9, 2313.0], [82.0, 2321.0], [82.1, 2327.0], [82.2, 2331.0], [82.3, 2341.0], [82.4, 2344.0], [82.5, 2347.0], [82.6, 2350.0], [82.7, 2352.0], [82.8, 2355.0], [82.9, 2359.0], [83.0, 2367.0], [83.1, 2374.0], [83.2, 2384.0], [83.3, 2388.0], [83.4, 2408.0], [83.5, 2421.0], [83.6, 2425.0], [83.7, 2428.0], [83.8, 2428.0], [83.9, 2430.0], [84.0, 2432.0], [84.1, 2433.0], [84.2, 2436.0], [84.3, 2437.0], [84.4, 2440.0], [84.5, 2444.0], [84.6, 2448.0], [84.7, 2449.0], [84.8, 2451.0], [84.9, 2458.0], [85.0, 2469.0], [85.1, 2482.0], [85.2, 2491.0], [85.3, 2505.0], [85.4, 2546.0], [85.5, 2566.0], [85.6, 2586.0], [85.7, 2603.0], [85.8, 2610.0], [85.9, 2619.0], [86.0, 2643.0], [86.1, 2657.0], [86.2, 2679.0], [86.3, 2688.0], [86.4, 2694.0], [86.5, 2721.0], [86.6, 2765.0], [86.7, 2783.0], [86.8, 2793.0], [86.9, 2822.0], [87.0, 2859.0], [87.1, 2891.0], [87.2, 2904.0], [87.3, 2912.0], [87.4, 2922.0], [87.5, 2942.0], [87.6, 2945.0], [87.7, 2973.0], [87.8, 2989.0], [87.9, 2998.0], [88.0, 3015.0], [88.1, 3022.0], [88.2, 3048.0], [88.3, 3099.0], [88.4, 3114.0], [88.5, 3147.0], [88.6, 3154.0], [88.7, 3179.0], [88.8, 3234.0], [88.9, 3266.0], [89.0, 3295.0], [89.1, 3306.0], [89.2, 3314.0], [89.3, 3367.0], [89.4, 3381.0], [89.5, 3408.0], [89.6, 3417.0], [89.7, 3427.0], [89.8, 3436.0], [89.9, 3439.0], [90.0, 3467.0], [90.1, 3476.0], [90.2, 3494.0], [90.3, 3505.0], [90.4, 3511.0], [90.5, 3539.0], [90.6, 3543.0], [90.7, 3573.0], [90.8, 3590.0], [90.9, 3608.0], [91.0, 3618.0], [91.1, 3632.0], [91.2, 3649.0], [91.3, 3661.0], [91.4, 3672.0], [91.5, 3681.0], [91.6, 3705.0], [91.7, 3718.0], [91.8, 3728.0], [91.9, 3738.0], [92.0, 3753.0], [92.1, 3763.0], [92.2, 3772.0], [92.3, 3782.0], [92.4, 3816.0], [92.5, 3858.0], [92.6, 3880.0], [92.7, 3910.0], [92.8, 3917.0], [92.9, 3926.0], [93.0, 3960.0], [93.1, 3968.0], [93.2, 3979.0], [93.3, 4003.0], [93.4, 4043.0], [93.5, 4099.0], [93.6, 4113.0], [93.7, 4137.0], [93.8, 4141.0], [93.9, 4157.0], [94.0, 4212.0], [94.1, 4218.0], [94.2, 4231.0], [94.3, 4259.0], [94.4, 4346.0], [94.5, 4403.0], [94.6, 4412.0], [94.7, 4428.0], [94.8, 4476.0], [94.9, 4626.0], [95.0, 4824.0], [95.1, 4875.0], [95.2, 4928.0], [95.3, 5011.0], [95.4, 5157.0], [95.5, 5290.0], [95.6, 5388.0], [95.7, 5443.0], [95.8, 5539.0], [95.9, 5585.0], [96.0, 5603.0], [96.1, 5787.0], [96.2, 6167.0], [96.3, 6940.0], [96.4, 7021.0], [96.5, 7122.0], [96.6, 7167.0], [96.7, 7197.0], [96.8, 7246.0], [96.9, 7260.0], [97.0, 7268.0], [97.1, 7287.0], [97.2, 7290.0], [97.3, 7299.0], [97.4, 7338.0], [97.5, 7350.0], [97.6, 7358.0], [97.7, 7379.0], [97.8, 7405.0], [97.9, 7412.0], [98.0, 7432.0], [98.1, 7440.0], [98.2, 7465.0], [98.3, 7474.0], [98.4, 7494.0], [98.5, 7536.0], [98.6, 7541.0], [98.7, 7551.0], [98.8, 7570.0], [98.9, 7582.0], [99.0, 7614.0], [99.1, 7626.0], [99.2, 7634.0], [99.3, 7663.0], [99.4, 7679.0], [99.5, 7695.0], [99.6, 7784.0], [99.7, 8205.0], [99.8, 8408.0], [99.9, 8800.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 412.0, "series": [{"data": [[600.0, 13.0], [700.0, 17.0], [800.0, 26.0], [900.0, 36.0], [1000.0, 111.0], [1100.0, 242.0], [1200.0, 412.0], [1300.0, 364.0], [1400.0, 204.0], [1500.0, 357.0], [1600.0, 336.0], [1700.0, 63.0], [1800.0, 34.0], [1900.0, 9.0], [2000.0, 14.0], [2100.0, 10.0], [2300.0, 52.0], [2200.0, 23.0], [2400.0, 62.0], [2500.0, 13.0], [2600.0, 23.0], [2700.0, 14.0], [2800.0, 9.0], [2900.0, 25.0], [3000.0, 13.0], [3100.0, 14.0], [3300.0, 14.0], [3200.0, 9.0], [3400.0, 25.0], [3500.0, 19.0], [3600.0, 24.0], [3700.0, 24.0], [3800.0, 10.0], [3900.0, 20.0], [4000.0, 8.0], [4100.0, 13.0], [4200.0, 12.0], [4300.0, 6.0], [4400.0, 11.0], [4600.0, 1.0], [4500.0, 1.0], [4800.0, 6.0], [4700.0, 2.0], [4900.0, 4.0], [5000.0, 2.0], [5100.0, 2.0], [5300.0, 4.0], [5200.0, 4.0], [5600.0, 2.0], [5500.0, 8.0], [5400.0, 3.0], [5700.0, 2.0], [5800.0, 1.0], [6000.0, 1.0], [6100.0, 2.0], [6200.0, 1.0], [6900.0, 3.0], [7100.0, 8.0], [7000.0, 3.0], [7200.0, 19.0], [7300.0, 14.0], [7400.0, 22.0], [7500.0, 17.0], [7600.0, 18.0], [7700.0, 3.0], [7900.0, 1.0], [8200.0, 2.0], [8300.0, 2.0], [8400.0, 2.0], [8700.0, 1.0], [8800.0, 4.0], [100.0, 133.0], [200.0, 99.0], [300.0, 90.0], [400.0, 10.0], [500.0, 12.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 332.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1440.0, "series": [{"data": [[0.0, 332.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1440.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1428.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 342.07781250000056, "minX": 1.69666248E12, "maxY": 342.07781250000056, "series": [{"data": [[1.69666248E12, 342.07781250000056]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69666248E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 100.0, "minX": 1.0, "maxY": 3798.5, "series": [{"data": [[2.0, 131.0], [3.0, 127.0], [4.0, 138.0], [5.0, 143.5], [6.0, 139.0], [7.0, 2357.916666666667], [8.0, 3159.4], [9.0, 121.0], [10.0, 100.0], [11.0, 1310.5], [12.0, 1687.3333333333335], [13.0, 105.5], [14.0, 2486.0], [15.0, 2114.571428571429], [16.0, 102.0], [17.0, 102.0], [18.0, 108.5], [19.0, 108.0], [20.0, 256.0], [21.0, 116.5], [22.0, 2127.5], [23.0, 705.5], [24.0, 2222.0], [25.0, 2106.5], [26.0, 1708.3], [27.0, 102.0], [28.0, 110.0], [29.0, 280.5], [30.0, 283.0], [31.0, 296.0], [33.0, 114.0], [32.0, 2046.5], [35.0, 109.0], [34.0, 107.0], [37.0, 108.33333333333333], [36.0, 102.0], [39.0, 2495.4], [38.0, 1806.5], [41.0, 3798.5], [40.0, 1859.5], [43.0, 2473.666666666667], [42.0, 108.0], [45.0, 802.6666666666667], [44.0, 890.5], [47.0, 1858.5], [46.0, 110.0], [49.0, 103.0], [48.0, 124.0], [50.0, 114.0], [53.0, 1368.2857142857144], [52.0, 793.0], [55.0, 1780.6], [54.0, 1048.25], [57.0, 126.0], [56.0, 133.0], [59.0, 1512.8], [58.0, 670.0], [61.0, 136.0], [60.0, 2353.0], [63.0, 1457.5], [62.0, 893.0], [67.0, 1772.3333333333335], [66.0, 815.0], [65.0, 506.0], [64.0, 1196.6666666666667], [70.0, 127.0], [69.0, 128.0], [68.0, 636.5], [75.0, 175.75], [74.0, 614.5], [73.0, 151.0], [72.0, 657.5], [79.0, 280.0], [78.0, 117.5], [77.0, 100.0], [76.0, 215.5], [83.0, 298.0], [82.0, 835.25], [87.0, 901.0], [86.0, 1003.6666666666667], [84.0, 115.0], [91.0, 117.0], [90.0, 114.0], [89.0, 844.0], [88.0, 125.0], [93.0, 115.5], [99.0, 140.0], [98.0, 135.0], [97.0, 127.75], [103.0, 1753.5], [101.0, 2700.0], [100.0, 158.0], [107.0, 200.0], [106.0, 204.0], [105.0, 194.0], [104.0, 202.0], [111.0, 1666.25], [110.0, 215.0], [109.0, 230.0], [108.0, 220.0], [115.0, 183.0], [114.0, 969.5], [113.0, 979.6666666666667], [112.0, 220.0], [119.0, 206.0], [118.0, 187.0], [117.0, 160.0], [116.0, 218.0], [123.0, 1132.5], [122.0, 213.5], [121.0, 203.0], [120.0, 1645.0], [127.0, 236.0], [126.0, 228.0], [125.0, 1301.5], [124.0, 248.0], [134.0, 252.0], [133.0, 880.6666666666667], [132.0, 209.5], [131.0, 210.0], [130.0, 1093.4], [143.0, 238.0], [142.0, 225.0], [139.0, 246.00000000000003], [149.0, 266.0], [148.0, 255.0], [147.0, 1637.0], [146.0, 1015.3333333333333], [145.0, 2035.0], [144.0, 2272.3333333333335], [159.0, 256.75], [157.0, 280.0], [156.0, 1498.0], [155.0, 1379.5], [154.0, 293.0], [153.0, 269.0], [152.0, 467.2], [167.0, 890.6666666666666], [166.0, 1317.0], [165.0, 1507.6666666666667], [164.0, 1636.0], [163.0, 2005.0], [162.0, 1564.0], [160.0, 2207.6666666666665], [175.0, 224.0], [174.0, 233.0], [173.0, 1125.0], [172.0, 201.0], [171.0, 1697.3333333333333], [170.0, 1168.5], [169.0, 551.0], [168.0, 1104.0], [183.0, 246.5], [182.0, 228.0], [181.0, 230.0], [180.0, 217.0], [179.0, 221.0], [178.0, 222.0], [177.0, 212.0], [176.0, 215.0], [191.0, 318.6666666666667], [190.0, 696.6666666666667], [189.0, 307.54545454545456], [188.0, 259.0], [187.0, 260.0], [186.0, 245.0], [185.0, 249.0], [184.0, 267.0], [199.0, 370.0], [198.0, 501.55000000000007], [197.0, 348.5], [196.0, 364.0], [195.0, 988.0], [194.0, 353.0], [193.0, 333.0], [192.0, 519.6666666666666], [207.0, 792.25], [206.0, 1046.0], [205.0, 361.0], [204.0, 365.0], [203.0, 355.0], [202.0, 2217.0], [201.0, 1105.0], [200.0, 362.0], [215.0, 461.0], [214.0, 359.0], [213.0, 375.0], [212.0, 361.0], [211.0, 359.0], [210.0, 1302.5], [209.0, 359.0], [208.0, 371.0], [223.0, 522.5], [221.0, 604.0], [219.0, 502.0], [218.0, 358.0], [217.0, 446.0], [216.0, 357.0], [228.0, 523.0], [227.0, 610.5], [225.0, 365.0], [224.0, 363.0], [236.0, 553.5], [234.0, 581.0], [233.0, 487.0], [247.0, 845.0], [246.0, 1150.0], [245.0, 935.5], [244.0, 720.0], [243.0, 824.0], [242.0, 886.3333333333334], [241.0, 714.2222222222222], [255.0, 1129.3333333333333], [253.0, 1358.0], [252.0, 1419.0], [251.0, 1066.2], [250.0, 876.0], [249.0, 812.0], [248.0, 973.5], [269.0, 1597.6875], [270.0, 1892.5], [268.0, 937.3333333333334], [259.0, 1460.5], [258.0, 1654.0], [257.0, 1594.2857142857142], [256.0, 1340.7142857142858], [267.0, 766.5], [266.0, 754.5], [265.0, 1073.4285714285713], [264.0, 1332.5833333333333], [263.0, 947.5909090909091], [262.0, 1239.5], [261.0, 1382.0], [286.0, 1268.3333333333333], [287.0, 1264.5], [285.0, 1270.0], [284.0, 1279.5], [283.0, 1267.5], [282.0, 1621.5], [281.0, 1275.75], [280.0, 1266.5], [279.0, 1264.2], [273.0, 1426.3333333333333], [272.0, 1549.1999999999998], [275.0, 3046.0], [274.0, 1994.4999999999998], [278.0, 1281.0], [277.0, 1363.923076923077], [276.0, 1736.3333333333333], [302.0, 1264.5], [303.0, 1269.5], [301.0, 1280.0], [300.0, 1268.0], [299.0, 1277.0], [298.0, 1273.5], [297.0, 1274.6666666666667], [296.0, 1278.6666666666667], [295.0, 1281.0], [288.0, 1268.0], [290.0, 1271.0], [289.0, 1269.0], [293.0, 1267.0], [292.0, 1275.0], [318.0, 1245.6666666666667], [319.0, 1235.5], [317.0, 1248.0], [316.0, 1237.75], [315.0, 1243.6], [314.0, 1247.0], [312.0, 1247.3333333333333], [310.0, 1246.7142857142856], [307.0, 1262.0], [306.0, 1260.0], [305.0, 1266.0], [304.0, 1264.0], [308.0, 1257.142857142857], [334.0, 1153.5], [335.0, 1141.7777777777778], [333.0, 1148.0], [332.0, 1155.0], [331.0, 1175.75], [329.0, 1161.5], [328.0, 1173.0], [327.0, 1172.5], [321.0, 1223.8571428571427], [320.0, 1235.5], [323.0, 1213.3333333333333], [322.0, 1224.25], [326.0, 1193.25], [325.0, 1193.3333333333333], [324.0, 1207.5], [349.0, 1135.0], [351.0, 1122.0], [348.0, 1125.0], [338.0, 1139.0], [337.0, 1135.0], [336.0, 1150.25], [347.0, 1131.0], [346.0, 1144.5], [345.0, 1149.5], [343.0, 1139.5], [342.0, 1135.3333333333333], [341.0, 1135.6666666666667], [340.0, 1134.5], [366.0, 1101.0], [367.0, 1112.3333333333333], [365.0, 1096.0], [364.0, 1113.5], [362.0, 1110.6666666666667], [361.0, 1110.0], [360.0, 1126.0], [358.0, 1121.2222222222224], [355.0, 1133.0], [354.0, 1133.0], [353.0, 1129.0], [352.0, 1127.75], [357.0, 1128.5], [382.0, 1256.142857142857], [383.0, 1259.0], [381.0, 1257.3], [380.0, 1148.0], [379.0, 1105.0], [378.0, 1099.0], [376.0, 1086.0], [375.0, 1106.6666666666667], [369.0, 1105.75], [368.0, 1101.2], [371.0, 1083.0], [370.0, 1098.5], [374.0, 1094.75], [372.0, 1117.0], [398.0, 1441.5], [399.0, 1488.7142857142856], [397.0, 1392.9714285714285], [396.0, 1383.4285714285713], [395.0, 1355.0], [394.0, 1369.0], [393.0, 1320.75], [392.0, 1350.0], [391.0, 1357.1666666666665], [384.0, 1264.8333333333333], [387.0, 1296.8333333333335], [385.0, 1253.6666666666667], [390.0, 1303.5588235294117], [389.0, 1273.4285714285713], [400.0, 2146.8682058682075], [1.0, 139.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[342.07750000000044, 1788.4618749999963]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8340.0, "minX": 1.69666248E12, "maxY": 176780.43333333332, "series": [{"data": [[1.69666248E12, 176780.43333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69666248E12, 8340.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69666248E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1788.4618749999963, "minX": 1.69666248E12, "maxY": 1788.4618749999963, "series": [{"data": [[1.69666248E12, 1788.4618749999963]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69666248E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1785.835000000001, "minX": 1.69666248E12, "maxY": 1785.835000000001, "series": [{"data": [[1.69666248E12, 1785.835000000001]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69666248E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 445.95218750000066, "minX": 1.69666248E12, "maxY": 445.95218750000066, "series": [{"data": [[1.69666248E12, 445.95218750000066]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69666248E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 100.0, "minX": 1.69666248E12, "maxY": 8841.0, "series": [{"data": [[1.69666248E12, 8841.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69666248E12, 100.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69666248E12, 3466.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69666248E12, 7613.859999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69666248E12, 1414.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.69666248E12, 4823.5999999999985]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69666248E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 112.0, "minX": 19.0, "maxY": 3543.0, "series": [{"data": [[143.0, 1337.0], [166.0, 1341.0], [211.0, 3543.0], [54.0, 112.0], [229.0, 1638.0], [231.0, 270.0], [239.0, 1616.0], [248.0, 1525.5], [257.0, 943.0], [67.0, 970.0], [274.0, 1316.5], [272.0, 1233.5], [308.0, 2349.5], [19.0, 139.0], [354.0, 1410.0], [102.0, 2895.5], [26.0, 113.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 354.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 111.5, "minX": 19.0, "maxY": 3543.0, "series": [{"data": [[143.0, 1337.0], [166.0, 1341.0], [211.0, 3543.0], [54.0, 111.5], [229.0, 1638.0], [231.0, 270.0], [239.0, 1616.0], [248.0, 1525.5], [257.0, 943.0], [67.0, 855.0], [274.0, 1316.5], [272.0, 1232.0], [308.0, 2349.5], [19.0, 138.0], [354.0, 1410.0], [102.0, 2895.5], [26.0, 113.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 354.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 53.333333333333336, "minX": 1.69666248E12, "maxY": 53.333333333333336, "series": [{"data": [[1.69666248E12, 53.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69666248E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 53.333333333333336, "minX": 1.69666248E12, "maxY": 53.333333333333336, "series": [{"data": [[1.69666248E12, 53.333333333333336]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69666248E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 53.333333333333336, "minX": 1.69666248E12, "maxY": 53.333333333333336, "series": [{"data": [[1.69666248E12, 53.333333333333336]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69666248E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 53.333333333333336, "minX": 1.69666248E12, "maxY": 53.333333333333336, "series": [{"data": [[1.69666248E12, 53.333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69666248E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

