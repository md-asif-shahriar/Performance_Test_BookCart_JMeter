/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 105.0, "minX": 0.0, "maxY": 18859.0, "series": [{"data": [[0.0, 105.0], [0.1, 106.0], [0.2, 108.0], [0.3, 108.0], [0.4, 109.0], [0.5, 109.0], [0.6, 109.0], [0.7, 110.0], [0.8, 110.0], [0.9, 110.0], [1.0, 111.0], [1.1, 111.0], [1.2, 112.0], [1.3, 123.0], [1.4, 138.0], [1.5, 148.0], [1.6, 151.0], [1.7, 159.0], [1.8, 165.0], [1.9, 168.0], [2.0, 174.0], [2.1, 177.0], [2.2, 215.0], [2.3, 227.0], [2.4, 238.0], [2.5, 250.0], [2.6, 255.0], [2.7, 259.0], [2.8, 290.0], [2.9, 307.0], [3.0, 313.0], [3.1, 321.0], [3.2, 322.0], [3.3, 328.0], [3.4, 334.0], [3.5, 348.0], [3.6, 362.0], [3.7, 382.0], [3.8, 394.0], [3.9, 401.0], [4.0, 405.0], [4.1, 420.0], [4.2, 445.0], [4.3, 453.0], [4.4, 466.0], [4.5, 495.0], [4.6, 516.0], [4.7, 524.0], [4.8, 538.0], [4.9, 560.0], [5.0, 575.0], [5.1, 587.0], [5.2, 616.0], [5.3, 631.0], [5.4, 638.0], [5.5, 670.0], [5.6, 684.0], [5.7, 693.0], [5.8, 710.0], [5.9, 719.0], [6.0, 724.0], [6.1, 735.0], [6.2, 742.0], [6.3, 749.0], [6.4, 752.0], [6.5, 754.0], [6.6, 757.0], [6.7, 761.0], [6.8, 771.0], [6.9, 783.0], [7.0, 794.0], [7.1, 802.0], [7.2, 807.0], [7.3, 815.0], [7.4, 831.0], [7.5, 852.0], [7.6, 877.0], [7.7, 884.0], [7.8, 906.0], [7.9, 918.0], [8.0, 931.0], [8.1, 999.0], [8.2, 1042.0], [8.3, 1076.0], [8.4, 1118.0], [8.5, 1127.0], [8.6, 1136.0], [8.7, 1144.0], [8.8, 1195.0], [8.9, 1206.0], [9.0, 1229.0], [9.1, 1280.0], [9.2, 1286.0], [9.3, 1322.0], [9.4, 1377.0], [9.5, 1386.0], [9.6, 1415.0], [9.7, 1426.0], [9.8, 1559.0], [9.9, 1579.0], [10.0, 1596.0], [10.1, 1612.0], [10.2, 1637.0], [10.3, 1640.0], [10.4, 1645.0], [10.5, 1669.0], [10.6, 1679.0], [10.7, 1684.0], [10.8, 1687.0], [10.9, 1690.0], [11.0, 1692.0], [11.1, 1695.0], [11.2, 1697.0], [11.3, 1697.0], [11.4, 1698.0], [11.5, 1698.0], [11.6, 1699.0], [11.7, 1699.0], [11.8, 1700.0], [11.9, 1701.0], [12.0, 1701.0], [12.1, 1702.0], [12.2, 1702.0], [12.3, 1702.0], [12.4, 1703.0], [12.5, 1703.0], [12.6, 1704.0], [12.7, 1705.0], [12.8, 1706.0], [12.9, 1707.0], [13.0, 1708.0], [13.1, 1709.0], [13.2, 1710.0], [13.3, 1712.0], [13.4, 1712.0], [13.5, 1713.0], [13.6, 1713.0], [13.7, 1714.0], [13.8, 1715.0], [13.9, 1716.0], [14.0, 1717.0], [14.1, 1717.0], [14.2, 1718.0], [14.3, 1718.0], [14.4, 1718.0], [14.5, 1718.0], [14.6, 1719.0], [14.7, 1719.0], [14.8, 1720.0], [14.9, 1720.0], [15.0, 1720.0], [15.1, 1720.0], [15.2, 1721.0], [15.3, 1721.0], [15.4, 1721.0], [15.5, 1722.0], [15.6, 1722.0], [15.7, 1723.0], [15.8, 1723.0], [15.9, 1723.0], [16.0, 1724.0], [16.1, 1724.0], [16.2, 1724.0], [16.3, 1725.0], [16.4, 1725.0], [16.5, 1725.0], [16.6, 1726.0], [16.7, 1727.0], [16.8, 1727.0], [16.9, 1728.0], [17.0, 1728.0], [17.1, 1729.0], [17.2, 1729.0], [17.3, 1730.0], [17.4, 1730.0], [17.5, 1731.0], [17.6, 1731.0], [17.7, 1732.0], [17.8, 1733.0], [17.9, 1733.0], [18.0, 1734.0], [18.1, 1734.0], [18.2, 1735.0], [18.3, 1736.0], [18.4, 1736.0], [18.5, 1736.0], [18.6, 1737.0], [18.7, 1737.0], [18.8, 1738.0], [18.9, 1738.0], [19.0, 1738.0], [19.1, 1739.0], [19.2, 1739.0], [19.3, 1739.0], [19.4, 1740.0], [19.5, 1740.0], [19.6, 1741.0], [19.7, 1741.0], [19.8, 1742.0], [19.9, 1742.0], [20.0, 1742.0], [20.1, 1742.0], [20.2, 1742.0], [20.3, 1743.0], [20.4, 1743.0], [20.5, 1743.0], [20.6, 1744.0], [20.7, 1744.0], [20.8, 1744.0], [20.9, 1744.0], [21.0, 1744.0], [21.1, 1745.0], [21.2, 1745.0], [21.3, 1745.0], [21.4, 1746.0], [21.5, 1746.0], [21.6, 1747.0], [21.7, 1747.0], [21.8, 1748.0], [21.9, 1748.0], [22.0, 1749.0], [22.1, 1749.0], [22.2, 1749.0], [22.3, 1750.0], [22.4, 1750.0], [22.5, 1750.0], [22.6, 1751.0], [22.7, 1751.0], [22.8, 1752.0], [22.9, 1753.0], [23.0, 1753.0], [23.1, 1753.0], [23.2, 1754.0], [23.3, 1755.0], [23.4, 1755.0], [23.5, 1756.0], [23.6, 1757.0], [23.7, 1757.0], [23.8, 1758.0], [23.9, 1758.0], [24.0, 1759.0], [24.1, 1759.0], [24.2, 1759.0], [24.3, 1760.0], [24.4, 1760.0], [24.5, 1761.0], [24.6, 1761.0], [24.7, 1762.0], [24.8, 1762.0], [24.9, 1763.0], [25.0, 1763.0], [25.1, 1763.0], [25.2, 1764.0], [25.3, 1764.0], [25.4, 1765.0], [25.5, 1765.0], [25.6, 1765.0], [25.7, 1766.0], [25.8, 1766.0], [25.9, 1767.0], [26.0, 1767.0], [26.1, 1768.0], [26.2, 1768.0], [26.3, 1769.0], [26.4, 1769.0], [26.5, 1770.0], [26.6, 1770.0], [26.7, 1770.0], [26.8, 1771.0], [26.9, 1771.0], [27.0, 1771.0], [27.1, 1771.0], [27.2, 1771.0], [27.3, 1772.0], [27.4, 1772.0], [27.5, 1773.0], [27.6, 1774.0], [27.7, 1774.0], [27.8, 1774.0], [27.9, 1776.0], [28.0, 1776.0], [28.1, 1777.0], [28.2, 1778.0], [28.3, 1778.0], [28.4, 1779.0], [28.5, 1779.0], [28.6, 1780.0], [28.7, 1780.0], [28.8, 1781.0], [28.9, 1783.0], [29.0, 1783.0], [29.1, 1785.0], [29.2, 1785.0], [29.3, 1786.0], [29.4, 1787.0], [29.5, 1787.0], [29.6, 1788.0], [29.7, 1788.0], [29.8, 1789.0], [29.9, 1789.0], [30.0, 1789.0], [30.1, 1790.0], [30.2, 1790.0], [30.3, 1790.0], [30.4, 1790.0], [30.5, 1790.0], [30.6, 1791.0], [30.7, 1791.0], [30.8, 1792.0], [30.9, 1792.0], [31.0, 1793.0], [31.1, 1793.0], [31.2, 1793.0], [31.3, 1794.0], [31.4, 1795.0], [31.5, 1795.0], [31.6, 1796.0], [31.7, 1796.0], [31.8, 1796.0], [31.9, 1797.0], [32.0, 1798.0], [32.1, 1798.0], [32.2, 1799.0], [32.3, 1799.0], [32.4, 1799.0], [32.5, 1799.0], [32.6, 1800.0], [32.7, 1800.0], [32.8, 1801.0], [32.9, 1801.0], [33.0, 1802.0], [33.1, 1802.0], [33.2, 1803.0], [33.3, 1803.0], [33.4, 1804.0], [33.5, 1804.0], [33.6, 1805.0], [33.7, 1805.0], [33.8, 1805.0], [33.9, 1806.0], [34.0, 1806.0], [34.1, 1807.0], [34.2, 1807.0], [34.3, 1807.0], [34.4, 1807.0], [34.5, 1808.0], [34.6, 1808.0], [34.7, 1809.0], [34.8, 1809.0], [34.9, 1810.0], [35.0, 1810.0], [35.1, 1812.0], [35.2, 1812.0], [35.3, 1813.0], [35.4, 1814.0], [35.5, 1815.0], [35.6, 1816.0], [35.7, 1817.0], [35.8, 1818.0], [35.9, 1818.0], [36.0, 1819.0], [36.1, 1820.0], [36.2, 1820.0], [36.3, 1823.0], [36.4, 1824.0], [36.5, 1825.0], [36.6, 1826.0], [36.7, 1828.0], [36.8, 1829.0], [36.9, 1830.0], [37.0, 1830.0], [37.1, 1831.0], [37.2, 1832.0], [37.3, 1833.0], [37.4, 1834.0], [37.5, 1834.0], [37.6, 1835.0], [37.7, 1836.0], [37.8, 1837.0], [37.9, 1838.0], [38.0, 1840.0], [38.1, 1841.0], [38.2, 1843.0], [38.3, 1844.0], [38.4, 1846.0], [38.5, 1847.0], [38.6, 1848.0], [38.7, 1849.0], [38.8, 1850.0], [38.9, 1850.0], [39.0, 1852.0], [39.1, 1854.0], [39.2, 1856.0], [39.3, 1858.0], [39.4, 1859.0], [39.5, 1861.0], [39.6, 1864.0], [39.7, 1866.0], [39.8, 1870.0], [39.9, 1873.0], [40.0, 1875.0], [40.1, 1878.0], [40.2, 1881.0], [40.3, 1883.0], [40.4, 1886.0], [40.5, 1888.0], [40.6, 1889.0], [40.7, 1890.0], [40.8, 1891.0], [40.9, 1892.0], [41.0, 1893.0], [41.1, 1894.0], [41.2, 1896.0], [41.3, 1898.0], [41.4, 1899.0], [41.5, 1900.0], [41.6, 1902.0], [41.7, 1903.0], [41.8, 1903.0], [41.9, 1903.0], [42.0, 1904.0], [42.1, 1904.0], [42.2, 1905.0], [42.3, 1905.0], [42.4, 1905.0], [42.5, 1905.0], [42.6, 1906.0], [42.7, 1906.0], [42.8, 1906.0], [42.9, 1906.0], [43.0, 1907.0], [43.1, 1907.0], [43.2, 1907.0], [43.3, 1908.0], [43.4, 1908.0], [43.5, 1908.0], [43.6, 1908.0], [43.7, 1908.0], [43.8, 1909.0], [43.9, 1909.0], [44.0, 1909.0], [44.1, 1909.0], [44.2, 1909.0], [44.3, 1910.0], [44.4, 1910.0], [44.5, 1910.0], [44.6, 1910.0], [44.7, 1911.0], [44.8, 1911.0], [44.9, 1911.0], [45.0, 1911.0], [45.1, 1911.0], [45.2, 1912.0], [45.3, 1912.0], [45.4, 1912.0], [45.5, 1912.0], [45.6, 1912.0], [45.7, 1913.0], [45.8, 1913.0], [45.9, 1913.0], [46.0, 1914.0], [46.1, 1914.0], [46.2, 1914.0], [46.3, 1915.0], [46.4, 1915.0], [46.5, 1916.0], [46.6, 1916.0], [46.7, 1916.0], [46.8, 1917.0], [46.9, 1917.0], [47.0, 1917.0], [47.1, 1918.0], [47.2, 1918.0], [47.3, 1919.0], [47.4, 1919.0], [47.5, 1920.0], [47.6, 1921.0], [47.7, 1921.0], [47.8, 1923.0], [47.9, 1923.0], [48.0, 1923.0], [48.1, 1925.0], [48.2, 1926.0], [48.3, 1928.0], [48.4, 1929.0], [48.5, 1930.0], [48.6, 1932.0], [48.7, 1935.0], [48.8, 1937.0], [48.9, 1939.0], [49.0, 1940.0], [49.1, 1940.0], [49.2, 1940.0], [49.3, 1941.0], [49.4, 1941.0], [49.5, 1942.0], [49.6, 1942.0], [49.7, 1942.0], [49.8, 1943.0], [49.9, 1943.0], [50.0, 1943.0], [50.1, 1944.0], [50.2, 1944.0], [50.3, 1945.0], [50.4, 1945.0], [50.5, 1946.0], [50.6, 1947.0], [50.7, 1948.0], [50.8, 1949.0], [50.9, 1950.0], [51.0, 1952.0], [51.1, 1954.0], [51.2, 1956.0], [51.3, 1958.0], [51.4, 1959.0], [51.5, 1960.0], [51.6, 1961.0], [51.7, 1963.0], [51.8, 1963.0], [51.9, 1964.0], [52.0, 1966.0], [52.1, 1968.0], [52.2, 1970.0], [52.3, 1972.0], [52.4, 1972.0], [52.5, 1972.0], [52.6, 1975.0], [52.7, 1977.0], [52.8, 1978.0], [52.9, 1979.0], [53.0, 1980.0], [53.1, 1982.0], [53.2, 1983.0], [53.3, 1984.0], [53.4, 1984.0], [53.5, 1985.0], [53.6, 1985.0], [53.7, 1986.0], [53.8, 1987.0], [53.9, 1988.0], [54.0, 1988.0], [54.1, 1990.0], [54.2, 1991.0], [54.3, 1993.0], [54.4, 1993.0], [54.5, 1995.0], [54.6, 1996.0], [54.7, 1997.0], [54.8, 1997.0], [54.9, 1998.0], [55.0, 1998.0], [55.1, 1999.0], [55.2, 1999.0], [55.3, 2000.0], [55.4, 2001.0], [55.5, 2002.0], [55.6, 2002.0], [55.7, 2003.0], [55.8, 2003.0], [55.9, 2003.0], [56.0, 2004.0], [56.1, 2005.0], [56.2, 2006.0], [56.3, 2007.0], [56.4, 2008.0], [56.5, 2009.0], [56.6, 2010.0], [56.7, 2011.0], [56.8, 2012.0], [56.9, 2013.0], [57.0, 2013.0], [57.1, 2014.0], [57.2, 2015.0], [57.3, 2016.0], [57.4, 2016.0], [57.5, 2017.0], [57.6, 2018.0], [57.7, 2019.0], [57.8, 2020.0], [57.9, 2020.0], [58.0, 2021.0], [58.1, 2022.0], [58.2, 2022.0], [58.3, 2023.0], [58.4, 2024.0], [58.5, 2025.0], [58.6, 2026.0], [58.7, 2027.0], [58.8, 2027.0], [58.9, 2028.0], [59.0, 2029.0], [59.1, 2030.0], [59.2, 2031.0], [59.3, 2032.0], [59.4, 2033.0], [59.5, 2033.0], [59.6, 2034.0], [59.7, 2035.0], [59.8, 2036.0], [59.9, 2036.0], [60.0, 2036.0], [60.1, 2037.0], [60.2, 2037.0], [60.3, 2037.0], [60.4, 2038.0], [60.5, 2038.0], [60.6, 2038.0], [60.7, 2038.0], [60.8, 2039.0], [60.9, 2039.0], [61.0, 2039.0], [61.1, 2039.0], [61.2, 2040.0], [61.3, 2040.0], [61.4, 2040.0], [61.5, 2041.0], [61.6, 2041.0], [61.7, 2041.0], [61.8, 2042.0], [61.9, 2042.0], [62.0, 2043.0], [62.1, 2043.0], [62.2, 2044.0], [62.3, 2044.0], [62.4, 2045.0], [62.5, 2045.0], [62.6, 2045.0], [62.7, 2046.0], [62.8, 2046.0], [62.9, 2046.0], [63.0, 2046.0], [63.1, 2047.0], [63.2, 2047.0], [63.3, 2047.0], [63.4, 2048.0], [63.5, 2048.0], [63.6, 2049.0], [63.7, 2049.0], [63.8, 2049.0], [63.9, 2050.0], [64.0, 2050.0], [64.1, 2051.0], [64.2, 2051.0], [64.3, 2051.0], [64.4, 2051.0], [64.5, 2051.0], [64.6, 2052.0], [64.7, 2052.0], [64.8, 2052.0], [64.9, 2053.0], [65.0, 2053.0], [65.1, 2053.0], [65.2, 2053.0], [65.3, 2054.0], [65.4, 2054.0], [65.5, 2054.0], [65.6, 2054.0], [65.7, 2054.0], [65.8, 2055.0], [65.9, 2055.0], [66.0, 2055.0], [66.1, 2056.0], [66.2, 2056.0], [66.3, 2056.0], [66.4, 2056.0], [66.5, 2057.0], [66.6, 2057.0], [66.7, 2057.0], [66.8, 2058.0], [66.9, 2058.0], [67.0, 2058.0], [67.1, 2058.0], [67.2, 2058.0], [67.3, 2059.0], [67.4, 2059.0], [67.5, 2059.0], [67.6, 2059.0], [67.7, 2060.0], [67.8, 2060.0], [67.9, 2060.0], [68.0, 2060.0], [68.1, 2061.0], [68.2, 2061.0], [68.3, 2061.0], [68.4, 2062.0], [68.5, 2062.0], [68.6, 2062.0], [68.7, 2062.0], [68.8, 2063.0], [68.9, 2063.0], [69.0, 2063.0], [69.1, 2063.0], [69.2, 2063.0], [69.3, 2064.0], [69.4, 2064.0], [69.5, 2064.0], [69.6, 2065.0], [69.7, 2065.0], [69.8, 2065.0], [69.9, 2065.0], [70.0, 2066.0], [70.1, 2066.0], [70.2, 2067.0], [70.3, 2068.0], [70.4, 2069.0], [70.5, 2070.0], [70.6, 2070.0], [70.7, 2072.0], [70.8, 2072.0], [70.9, 2072.0], [71.0, 2072.0], [71.1, 2073.0], [71.2, 2073.0], [71.3, 2074.0], [71.4, 2074.0], [71.5, 2075.0], [71.6, 2075.0], [71.7, 2075.0], [71.8, 2076.0], [71.9, 2076.0], [72.0, 2076.0], [72.1, 2077.0], [72.2, 2077.0], [72.3, 2077.0], [72.4, 2077.0], [72.5, 2078.0], [72.6, 2078.0], [72.7, 2078.0], [72.8, 2079.0], [72.9, 2079.0], [73.0, 2079.0], [73.1, 2079.0], [73.2, 2080.0], [73.3, 2080.0], [73.4, 2080.0], [73.5, 2080.0], [73.6, 2081.0], [73.7, 2081.0], [73.8, 2081.0], [73.9, 2081.0], [74.0, 2082.0], [74.1, 2082.0], [74.2, 2082.0], [74.3, 2082.0], [74.4, 2083.0], [74.5, 2083.0], [74.6, 2083.0], [74.7, 2084.0], [74.8, 2084.0], [74.9, 2084.0], [75.0, 2084.0], [75.1, 2085.0], [75.2, 2085.0], [75.3, 2086.0], [75.4, 2086.0], [75.5, 2086.0], [75.6, 2087.0], [75.7, 2087.0], [75.8, 2088.0], [75.9, 2088.0], [76.0, 2089.0], [76.1, 2089.0], [76.2, 2089.0], [76.3, 2090.0], [76.4, 2090.0], [76.5, 2091.0], [76.6, 2091.0], [76.7, 2092.0], [76.8, 2092.0], [76.9, 2093.0], [77.0, 2094.0], [77.1, 2094.0], [77.2, 2095.0], [77.3, 2095.0], [77.4, 2095.0], [77.5, 2096.0], [77.6, 2097.0], [77.7, 2097.0], [77.8, 2097.0], [77.9, 2098.0], [78.0, 2098.0], [78.1, 2099.0], [78.2, 2099.0], [78.3, 2099.0], [78.4, 2099.0], [78.5, 2100.0], [78.6, 2101.0], [78.7, 2102.0], [78.8, 2103.0], [78.9, 2104.0], [79.0, 2104.0], [79.1, 2105.0], [79.2, 2105.0], [79.3, 2106.0], [79.4, 2107.0], [79.5, 2108.0], [79.6, 2109.0], [79.7, 2109.0], [79.8, 2110.0], [79.9, 2111.0], [80.0, 2111.0], [80.1, 2113.0], [80.2, 2116.0], [80.3, 2119.0], [80.4, 2121.0], [80.5, 2122.0], [80.6, 2123.0], [80.7, 2124.0], [80.8, 2125.0], [80.9, 2127.0], [81.0, 2130.0], [81.1, 2131.0], [81.2, 2133.0], [81.3, 2136.0], [81.4, 2138.0], [81.5, 2140.0], [81.6, 2141.0], [81.7, 2142.0], [81.8, 2143.0], [81.9, 2146.0], [82.0, 2146.0], [82.1, 2148.0], [82.2, 2150.0], [82.3, 2153.0], [82.4, 2155.0], [82.5, 2160.0], [82.6, 2163.0], [82.7, 2166.0], [82.8, 2177.0], [82.9, 2298.0], [83.0, 2322.0], [83.1, 2437.0], [83.2, 2536.0], [83.3, 2676.0], [83.4, 2737.0], [83.5, 2795.0], [83.6, 2957.0], [83.7, 3136.0], [83.8, 3812.0], [83.9, 3845.0], [84.0, 3865.0], [84.1, 3871.0], [84.2, 3880.0], [84.3, 3913.0], [84.4, 3972.0], [84.5, 4022.0], [84.6, 4043.0], [84.7, 4068.0], [84.8, 4088.0], [84.9, 4098.0], [85.0, 4102.0], [85.1, 4105.0], [85.2, 4106.0], [85.3, 4107.0], [85.4, 4109.0], [85.5, 4112.0], [85.6, 4113.0], [85.7, 4120.0], [85.8, 4126.0], [85.9, 4134.0], [86.0, 4137.0], [86.1, 4152.0], [86.2, 4163.0], [86.3, 4482.0], [86.4, 4715.0], [86.5, 4765.0], [86.6, 4830.0], [86.7, 4904.0], [86.8, 4963.0], [86.9, 5045.0], [87.0, 5108.0], [87.1, 5279.0], [87.2, 5317.0], [87.3, 5356.0], [87.4, 5378.0], [87.5, 5397.0], [87.6, 5434.0], [87.7, 5447.0], [87.8, 5472.0], [87.9, 5512.0], [88.0, 5522.0], [88.1, 5586.0], [88.2, 5601.0], [88.3, 5610.0], [88.4, 5629.0], [88.5, 5643.0], [88.6, 5660.0], [88.7, 5690.0], [88.8, 5703.0], [88.9, 5714.0], [89.0, 5733.0], [89.1, 5749.0], [89.2, 5761.0], [89.3, 5773.0], [89.4, 5786.0], [89.5, 5812.0], [89.6, 5826.0], [89.7, 5838.0], [89.8, 5870.0], [89.9, 5886.0], [90.0, 5905.0], [90.1, 5911.0], [90.2, 5917.0], [90.3, 5923.0], [90.4, 5930.0], [90.5, 5937.0], [90.6, 5943.0], [90.7, 5955.0], [90.8, 5972.0], [90.9, 5980.0], [91.0, 6024.0], [91.1, 6030.0], [91.2, 6037.0], [91.3, 6062.0], [91.4, 6070.0], [91.5, 6087.0], [91.6, 6107.0], [91.7, 6120.0], [91.8, 6125.0], [91.9, 6136.0], [92.0, 6169.0], [92.1, 6190.0], [92.2, 6197.0], [92.3, 6208.0], [92.4, 6214.0], [92.5, 6232.0], [92.6, 6238.0], [92.7, 6252.0], [92.8, 6259.0], [92.9, 6269.0], [93.0, 6290.0], [93.1, 6303.0], [93.2, 6320.0], [93.3, 6326.0], [93.4, 6339.0], [93.5, 6352.0], [93.6, 6363.0], [93.7, 6378.0], [93.8, 6390.0], [93.9, 6406.0], [94.0, 6425.0], [94.1, 6439.0], [94.2, 6452.0], [94.3, 6471.0], [94.4, 6485.0], [94.5, 6513.0], [94.6, 6530.0], [94.7, 6542.0], [94.8, 6556.0], [94.9, 6567.0], [95.0, 6578.0], [95.1, 6589.0], [95.2, 6620.0], [95.3, 6684.0], [95.4, 6720.0], [95.5, 6745.0], [95.6, 6778.0], [95.7, 6791.0], [95.8, 6813.0], [95.9, 6836.0], [96.0, 6854.0], [96.1, 6868.0], [96.2, 6914.0], [96.3, 6930.0], [96.4, 6952.0], [96.5, 6982.0], [96.6, 6993.0], [96.7, 7040.0], [96.8, 7068.0], [96.9, 7098.0], [97.0, 7165.0], [97.1, 7306.0], [97.2, 7521.0], [97.3, 7986.0], [97.4, 8362.0], [97.5, 8451.0], [97.6, 8489.0], [97.7, 8606.0], [97.8, 8671.0], [97.9, 8690.0], [98.0, 8781.0], [98.1, 8827.0], [98.2, 8890.0], [98.3, 8935.0], [98.4, 9089.0], [98.5, 9166.0], [98.6, 9191.0], [98.7, 9270.0], [98.8, 9323.0], [98.9, 10384.0], [99.0, 10711.0], [99.1, 11047.0], [99.2, 12116.0], [99.3, 12210.0], [99.4, 12710.0], [99.5, 14668.0], [99.6, 14960.0], [99.7, 15264.0], [99.8, 16868.0], [99.9, 17350.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 1020.0, "series": [{"data": [[100.0, 96.0], [200.0, 29.0], [300.0, 46.0], [400.0, 27.0], [500.0, 27.0], [600.0, 26.0], [700.0, 61.0], [800.0, 30.0], [900.0, 15.0], [1000.0, 10.0], [1100.0, 21.0], [1200.0, 20.0], [1300.0, 11.0], [1400.0, 11.0], [1500.0, 11.0], [1600.0, 77.0], [1700.0, 912.0], [1800.0, 394.0], [1900.0, 606.0], [2000.0, 1020.0], [2100.0, 197.0], [2300.0, 8.0], [2200.0, 1.0], [2400.0, 4.0], [2500.0, 5.0], [2600.0, 2.0], [2700.0, 8.0], [2800.0, 3.0], [2900.0, 3.0], [3000.0, 1.0], [3100.0, 1.0], [3200.0, 1.0], [3500.0, 1.0], [3600.0, 1.0], [3800.0, 21.0], [3900.0, 11.0], [4000.0, 18.0], [4100.0, 58.0], [4400.0, 4.0], [4600.0, 3.0], [4800.0, 5.0], [4700.0, 8.0], [4900.0, 9.0], [5000.0, 3.0], [5100.0, 5.0], [5200.0, 5.0], [5300.0, 15.0], [5400.0, 15.0], [5500.0, 14.0], [5600.0, 25.0], [5700.0, 31.0], [5800.0, 21.0], [5900.0, 44.0], [6000.0, 29.0], [6100.0, 27.0], [6200.0, 39.0], [6300.0, 34.0], [6400.0, 25.0], [6500.0, 31.0], [6600.0, 10.0], [6700.0, 16.0], [6800.0, 18.0], [6900.0, 22.0], [7000.0, 12.0], [7100.0, 5.0], [7200.0, 2.0], [7300.0, 3.0], [7400.0, 1.0], [7500.0, 3.0], [7700.0, 1.0], [7900.0, 2.0], [7800.0, 1.0], [8000.0, 1.0], [8300.0, 4.0], [8600.0, 11.0], [8700.0, 8.0], [8400.0, 8.0], [8500.0, 2.0], [8900.0, 6.0], [9100.0, 8.0], [9200.0, 8.0], [9000.0, 4.0], [8800.0, 5.0], [9300.0, 1.0], [10000.0, 1.0], [9900.0, 1.0], [10200.0, 1.0], [10700.0, 2.0], [10400.0, 2.0], [10600.0, 1.0], [10500.0, 1.0], [10300.0, 1.0], [10800.0, 1.0], [11000.0, 2.0], [11200.0, 1.0], [11400.0, 1.0], [11800.0, 1.0], [12200.0, 1.0], [12100.0, 5.0], [12700.0, 2.0], [12300.0, 1.0], [12600.0, 2.0], [12900.0, 1.0], [13100.0, 1.0], [13000.0, 1.0], [14600.0, 1.0], [14700.0, 2.0], [15200.0, 3.0], [15000.0, 1.0], [14900.0, 2.0], [15400.0, 1.0], [16200.0, 1.0], [16700.0, 1.0], [16900.0, 1.0], [17300.0, 4.0], [16800.0, 2.0], [17100.0, 1.0], [17400.0, 1.0], [18800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 18800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 198.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3970.0, "series": [{"data": [[0.0, 198.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 232.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3970.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 480.40522727272855, "minX": 1.69668516E12, "maxY": 480.40522727272855, "series": [{"data": [[1.69668516E12, 480.40522727272855]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69668516E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 106.0, "minX": 1.0, "maxY": 2938.617944147358, "series": [{"data": [[2.0, 1012.0], [3.0, 109.5], [4.0, 111.0], [5.0, 110.66666666666667], [6.0, 111.0], [7.0, 107.5], [8.0, 112.0], [10.0, 109.0], [11.0, 110.0], [12.0, 108.0], [13.0, 107.0], [14.0, 107.0], [15.0, 108.0], [16.0, 109.0], [17.0, 110.0], [18.0, 110.0], [19.0, 110.0], [20.0, 106.0], [21.0, 110.0], [22.0, 109.5], [23.0, 107.0], [24.0, 109.5], [25.0, 108.0], [26.0, 109.0], [27.0, 108.0], [28.0, 109.6], [29.0, 108.125], [30.0, 111.0], [31.0, 115.0], [33.0, 115.0], [32.0, 110.0], [35.0, 143.0], [34.0, 134.5], [37.0, 155.0], [36.0, 142.6], [39.0, 156.33333333333334], [41.0, 167.33333333333334], [40.0, 174.5], [43.0, 175.0], [42.0, 171.33333333333334], [45.0, 202.5], [44.0, 174.0], [46.0, 218.0], [49.0, 232.0], [48.0, 228.0], [51.0, 243.0], [50.0, 240.0], [53.0, 251.0], [52.0, 257.0], [55.0, 250.0], [54.0, 249.0], [57.0, 254.0], [56.0, 253.0], [59.0, 255.5], [58.0, 255.0], [61.0, 274.25], [60.0, 261.0], [63.0, 1491.5], [62.0, 300.3333333333333], [66.0, 322.0], [65.0, 316.12500000000006], [64.0, 310.0], [71.0, 329.5], [70.0, 324.0], [68.0, 321.0], [75.0, 394.0], [74.0, 867.8], [73.0, 982.9999999999999], [72.0, 546.5], [79.0, 394.0], [78.0, 392.0], [76.0, 391.0], [83.0, 405.0], [82.0, 401.0], [81.0, 397.0], [80.0, 398.0], [87.0, 420.0], [86.0, 403.0], [85.0, 404.5], [84.0, 402.0], [91.0, 409.0], [90.0, 405.0], [89.0, 407.0], [88.0, 424.0], [95.0, 448.3333333333333], [94.0, 447.0], [93.0, 433.0], [92.0, 428.0], [99.0, 503.0], [98.0, 487.0], [97.0, 464.6], [96.0, 453.0], [102.0, 516.0], [101.0, 516.0], [100.0, 500.0], [107.0, 565.3333333333334], [106.0, 551.0], [105.0, 526.0], [104.0, 518.0], [110.0, 597.5], [109.0, 583.0], [108.0, 579.0], [115.0, 623.3333333333334], [113.0, 619.0], [112.0, 613.3333333333334], [119.0, 2107.0], [118.0, 2146.0], [117.0, 631.6666666666666], [123.0, 685.6666666666667], [122.0, 946.6666666666666], [121.0, 650.0], [120.0, 1139.3333333333333], [127.0, 709.0], [126.0, 706.0], [125.0, 703.0], [124.0, 1693.2], [135.0, 735.0], [134.0, 724.0], [133.0, 1162.5], [132.0, 721.0], [131.0, 1160.5], [129.0, 716.0], [128.0, 723.0], [143.0, 752.25], [142.0, 752.0], [141.0, 752.0], [140.0, 756.0], [139.0, 747.5], [138.0, 743.5], [137.0, 1303.0], [136.0, 737.0], [151.0, 1617.5], [150.0, 759.0], [149.0, 759.0], [148.0, 750.0], [147.0, 770.5], [145.0, 751.5], [159.0, 795.6666666666666], [158.0, 787.0], [157.0, 784.0], [156.0, 771.0], [155.0, 766.0], [154.0, 766.0], [153.0, 760.0], [152.0, 757.0], [167.0, 866.5], [166.0, 852.0], [165.0, 836.0], [164.0, 829.8], [163.0, 819.0], [162.0, 811.0], [161.0, 807.0], [160.0, 801.3333333333334], [175.0, 904.6], [174.0, 888.0], [173.0, 885.0], [172.0, 883.0], [170.0, 878.5], [169.0, 881.0], [168.0, 873.0], [183.0, 1024.0], [182.0, 1006.5], [181.0, 999.0], [180.0, 942.6666666666666], [179.0, 928.0], [178.0, 922.0], [177.0, 920.5], [176.0, 1794.0], [191.0, 1498.0], [190.0, 1118.0], [189.0, 1113.0], [188.0, 1673.6666666666667], [187.0, 1072.0], [186.0, 1075.0], [185.0, 1043.5], [184.0, 1754.0], [199.0, 1206.5], [198.0, 1194.6666666666667], [197.0, 1169.5], [196.0, 1152.0], [195.0, 1144.0], [194.0, 1136.75], [193.0, 1132.0], [192.0, 1126.6666666666667], [207.0, 1289.0], [206.0, 1284.75], [205.0, 1283.0], [204.0, 1280.0], [203.0, 1265.75], [201.0, 1217.25], [200.0, 1204.0], [215.0, 1406.0], [214.0, 1970.3333333333333], [213.0, 1381.0], [212.0, 1378.5], [211.0, 1373.5], [210.0, 1339.0], [209.0, 1329.0], [208.0, 1886.3333333333333], [223.0, 1577.0], [222.0, 1579.0], [221.0, 1558.0], [220.0, 1562.0], [219.0, 1791.6], [218.0, 1424.0], [217.0, 1420.0], [216.0, 1412.25], [231.0, 1638.5], [230.0, 1621.3333333333333], [229.0, 1612.5], [227.0, 1599.5], [226.0, 1592.0], [225.0, 1596.0], [224.0, 1580.0], [239.0, 1691.6666666666667], [238.0, 1692.75], [237.0, 1682.7272727272727], [236.0, 1664.8333333333333], [235.0, 1643.5], [234.0, 1639.0], [233.0, 1642.3333333333333], [232.0, 1640.0], [247.0, 1719.5], [246.0, 1714.857142857143], [245.0, 1707.0], [244.0, 1718.5], [243.0, 1709.75], [242.0, 1698.0], [241.0, 1693.0], [240.0, 1689.0], [255.0, 1694.4285714285713], [254.0, 1699.5], [253.0, 1705.2], [252.0, 1700.6666666666667], [251.0, 1705.7272727272725], [250.0, 1715.0], [249.0, 1723.4], [248.0, 1723.0], [270.0, 1706.0], [271.0, 1706.0], [269.0, 1703.5], [268.0, 1702.5], [267.0, 1701.6], [266.0, 1700.0], [265.0, 1702.0], [264.0, 1703.75], [263.0, 1696.2], [257.0, 1697.0], [256.0, 1695.0], [259.0, 1700.0], [258.0, 1700.5], [262.0, 1696.75], [261.0, 1702.0], [260.0, 1699.0], [286.0, 1715.0], [287.0, 1720.0], [285.0, 1715.0], [284.0, 1729.0], [283.0, 1706.0], [282.0, 1722.5], [280.0, 1706.6666666666667], [279.0, 1718.0], [275.0, 2336.3333333333335], [274.0, 1708.0], [273.0, 1708.0], [272.0, 1707.0], [276.0, 1704.0], [302.0, 1724.0], [303.0, 1717.0], [301.0, 1723.0], [300.0, 1721.0], [299.0, 1721.0], [298.0, 1723.0], [297.0, 1720.0], [296.0, 1717.0], [295.0, 1716.0], [289.0, 1717.0], [288.0, 1720.0], [291.0, 1720.0], [290.0, 1718.0], [294.0, 1720.0], [293.0, 1720.0], [292.0, 1720.0], [318.0, 1718.0], [319.0, 1716.0], [317.0, 1722.0], [316.0, 1724.0], [315.0, 1722.0], [314.0, 1721.6666666666667], [313.0, 1720.0], [312.0, 1722.0], [311.0, 1722.0], [305.0, 1724.0], [304.0, 1716.0], [307.0, 1724.0], [306.0, 1722.5], [310.0, 1723.0], [309.0, 1723.0], [308.0, 1723.0], [334.0, 1712.0], [335.0, 1713.0], [333.0, 1714.5], [323.0, 1720.0], [322.0, 1718.0], [321.0, 1721.0], [320.0, 1719.0], [331.0, 1712.0], [330.0, 1713.0], [329.0, 1715.0], [328.0, 1719.0], [327.0, 1720.0], [326.0, 1719.0], [325.0, 1719.0], [324.0, 1720.0], [350.0, 1730.0], [351.0, 1725.0], [348.0, 1725.5], [339.0, 1728.0], [338.0, 1722.75], [337.0, 1718.0], [347.0, 1727.0], [346.0, 1727.8333333333333], [345.0, 1733.6666666666667], [344.0, 1731.5], [343.0, 1728.0], [342.0, 1725.0], [341.0, 1726.0], [340.0, 1730.0], [364.0, 1709.0], [366.0, 1718.0], [367.0, 1726.0], [365.0, 1705.0], [363.0, 1720.0], [362.0, 1724.4], [359.0, 1720.25], [352.0, 1723.0], [354.0, 1718.0], [353.0, 1720.0], [358.0, 1720.5], [357.0, 1718.0], [356.0, 1718.3333333333333], [382.0, 1743.5], [383.0, 1741.0], [381.0, 1742.0], [380.0, 1741.0], [379.0, 1739.0], [378.0, 1742.0], [377.0, 2706.5], [376.0, 1731.75], [375.0, 1731.0], [369.0, 1720.0], [368.0, 1729.0], [371.0, 1725.3333333333333], [370.0, 1725.0], [374.0, 1730.0], [373.0, 1728.6666666666667], [372.0, 1723.0], [398.0, 1746.0], [399.0, 1745.0], [397.0, 1747.0], [396.0, 1744.0], [395.0, 1741.5], [394.0, 1743.5], [393.0, 1743.0], [392.0, 1745.5], [391.0, 1746.0], [385.0, 1747.0], [384.0, 1745.0], [387.0, 1745.0], [386.0, 1742.0], [390.0, 1745.0], [389.0, 1753.0], [388.0, 1745.0], [414.0, 1748.0], [415.0, 1747.0], [412.0, 1744.5], [403.0, 1742.0], [402.0, 1742.0], [401.0, 1743.0], [400.0, 1746.0], [411.0, 1745.5], [410.0, 1735.0], [409.0, 1739.2], [408.0, 1741.0], [407.0, 1743.0], [406.0, 1742.0], [405.0, 1738.5], [404.0, 1740.0], [430.0, 1858.0], [431.0, 1850.0], [429.0, 1793.0], [428.0, 1818.0], [427.0, 1790.0], [426.0, 1774.0], [425.0, 1760.0], [424.0, 1756.0], [423.0, 1760.0], [417.0, 1750.5], [416.0, 1744.0], [419.0, 1753.0], [418.0, 1745.0], [422.0, 1759.0], [421.0, 1758.0], [420.0, 1747.0], [446.0, 1760.0], [447.0, 1761.0], [444.0, 1763.0], [435.0, 1754.0], [433.0, 1752.0], [443.0, 1760.5], [441.0, 1755.0], [440.0, 1752.0], [439.0, 1751.0], [438.0, 1754.0], [437.0, 1751.0], [436.0, 1755.0], [462.0, 1772.0], [463.0, 1774.0], [461.0, 1771.0], [460.0, 1776.0], [459.0, 1767.0], [458.0, 1761.0], [457.0, 1762.6666666666667], [456.0, 1764.0], [455.0, 1763.0], [449.0, 1760.0], [448.0, 1760.5], [451.0, 1767.0], [450.0, 1762.0], [453.0, 1769.0], [452.0, 1762.0], [478.0, 1780.0], [479.0, 1782.0], [477.0, 1773.0], [476.0, 1779.0], [475.0, 1778.0], [474.0, 1773.0], [473.0, 1778.0], [472.0, 1774.0], [471.0, 1788.5], [465.0, 1775.0], [469.0, 1777.75], [492.0, 1797.2999999999997], [495.0, 1789.5], [494.0, 1788.6666666666667], [493.0, 1797.0], [487.0, 1780.0], [486.0, 1796.0], [483.0, 1782.5], [482.0, 1781.0], [480.0, 1783.0], [510.0, 1797.0], [511.0, 1802.5], [509.0, 1791.5], [508.0, 1799.0], [507.0, 1794.5], [506.0, 1795.0], [505.0, 1796.0], [504.0, 1792.0], [503.0, 1791.5], [497.0, 1792.0], [496.0, 1790.0], [499.0, 1789.0], [498.0, 1790.0], [502.0, 1792.5], [501.0, 1795.0], [500.0, 1793.0], [536.0, 1807.0], [540.0, 1800.0], [543.0, 1806.5], [529.0, 1798.6], [528.0, 1798.0], [533.0, 1808.25], [531.0, 1802.6666666666667], [542.0, 1808.0], [541.0, 1801.5], [539.0, 1804.8], [538.0, 1804.0], [537.0, 1802.0], [527.0, 1807.3333333333333], [513.0, 1799.0], [512.0, 1797.5], [515.0, 1799.0], [514.0, 1800.0], [517.0, 1795.0], [516.0, 1794.5], [519.0, 1796.0], [518.0, 1795.0], [526.0, 1798.0], [525.0, 1806.5], [524.0, 1799.5], [523.0, 1799.0], [522.0, 1798.0], [521.0, 1797.0], [520.0, 1796.0], [535.0, 1806.1666666666667], [534.0, 1807.5], [550.0, 2938.617944147358], [548.0, 1807.5], [547.0, 1800.6666666666667], [546.0, 1809.2], [545.0, 1805.0], [544.0, 1808.0], [1.0, 1641.25]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[480.40522727272855, 2550.494318181817]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 550.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11467.5, "minX": 1.69668516E12, "maxY": 243288.56666666668, "series": [{"data": [[1.69668516E12, 243288.56666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69668516E12, 11467.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69668516E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2550.494318181817, "minX": 1.69668516E12, "maxY": 2550.494318181817, "series": [{"data": [[1.69668516E12, 2550.494318181817]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69668516E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2549.5527272727354, "minX": 1.69668516E12, "maxY": 2549.5527272727354, "series": [{"data": [[1.69668516E12, 2549.5527272727354]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69668516E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 625.0952272727262, "minX": 1.69668516E12, "maxY": 625.0952272727262, "series": [{"data": [[1.69668516E12, 625.0952272727262]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69668516E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 105.0, "minX": 1.69668516E12, "maxY": 18859.0, "series": [{"data": [[1.69668516E12, 18859.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69668516E12, 105.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69668516E12, 5905.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69668516E12, 10709.979999999978]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69668516E12, 1943.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.69668516E12, 6577.9]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69668516E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 111.0, "minX": 4.0, "maxY": 6087.0, "series": [{"data": [[149.0, 2127.0], [188.0, 227.0], [202.0, 1904.0], [204.0, 2109.0], [216.0, 2055.0], [225.0, 1991.0], [237.0, 1774.0], [62.0, 5452.5], [254.0, 1749.0], [260.0, 2041.5], [4.0, 166.0], [275.0, 6087.0], [272.0, 1923.0], [282.0, 1719.0], [298.0, 2054.5], [290.0, 1908.0], [310.0, 2075.5], [324.0, 932.5], [5.0, 111.0], [343.0, 1795.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 343.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 111.0, "minX": 4.0, "maxY": 6087.0, "series": [{"data": [[149.0, 2127.0], [188.0, 227.0], [202.0, 1903.5], [204.0, 2109.0], [216.0, 2055.0], [225.0, 1991.0], [237.0, 1774.0], [62.0, 5452.5], [254.0, 1749.0], [260.0, 2041.5], [4.0, 166.0], [275.0, 6087.0], [272.0, 1923.0], [282.0, 1718.0], [298.0, 2054.5], [290.0, 1908.0], [310.0, 2075.5], [324.0, 931.5], [5.0, 111.0], [343.0, 1794.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 343.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 73.33333333333333, "minX": 1.69668516E12, "maxY": 73.33333333333333, "series": [{"data": [[1.69668516E12, 73.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69668516E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 73.33333333333333, "minX": 1.69668516E12, "maxY": 73.33333333333333, "series": [{"data": [[1.69668516E12, 73.33333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69668516E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 73.33333333333333, "minX": 1.69668516E12, "maxY": 73.33333333333333, "series": [{"data": [[1.69668516E12, 73.33333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69668516E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 73.33333333333333, "minX": 1.69668516E12, "maxY": 73.33333333333333, "series": [{"data": [[1.69668516E12, 73.33333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69668516E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

