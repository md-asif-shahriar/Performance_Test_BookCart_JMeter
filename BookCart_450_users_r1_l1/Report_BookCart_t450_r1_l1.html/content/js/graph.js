/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 100.0, "minX": 0.0, "maxY": 18595.0, "series": [{"data": [[0.0, 100.0], [0.1, 100.0], [0.2, 100.0], [0.3, 101.0], [0.4, 101.0], [0.5, 101.0], [0.6, 101.0], [0.7, 101.0], [0.8, 101.0], [0.9, 102.0], [1.0, 102.0], [1.1, 102.0], [1.2, 103.0], [1.3, 103.0], [1.4, 103.0], [1.5, 104.0], [1.6, 104.0], [1.7, 105.0], [1.8, 106.0], [1.9, 106.0], [2.0, 107.0], [2.1, 107.0], [2.2, 107.0], [2.3, 108.0], [2.4, 108.0], [2.5, 108.0], [2.6, 108.0], [2.7, 108.0], [2.8, 109.0], [2.9, 110.0], [3.0, 110.0], [3.1, 111.0], [3.2, 111.0], [3.3, 111.0], [3.4, 111.0], [3.5, 111.0], [3.6, 112.0], [3.7, 112.0], [3.8, 112.0], [3.9, 113.0], [4.0, 114.0], [4.1, 115.0], [4.2, 116.0], [4.3, 116.0], [4.4, 117.0], [4.5, 118.0], [4.6, 118.0], [4.7, 120.0], [4.8, 121.0], [4.9, 122.0], [5.0, 123.0], [5.1, 123.0], [5.2, 126.0], [5.3, 128.0], [5.4, 131.0], [5.5, 133.0], [5.6, 134.0], [5.7, 139.0], [5.8, 142.0], [5.9, 143.0], [6.0, 148.0], [6.1, 157.0], [6.2, 164.0], [6.3, 171.0], [6.4, 180.0], [6.5, 188.0], [6.6, 193.0], [6.7, 232.0], [6.8, 251.0], [6.9, 258.0], [7.0, 266.0], [7.1, 280.0], [7.2, 290.0], [7.3, 296.0], [7.4, 308.0], [7.5, 321.0], [7.6, 324.0], [7.7, 327.0], [7.8, 331.0], [7.9, 335.0], [8.0, 341.0], [8.1, 347.0], [8.2, 356.0], [8.3, 448.0], [8.4, 543.0], [8.5, 579.0], [8.6, 581.0], [8.7, 593.0], [8.8, 597.0], [8.9, 602.0], [9.0, 604.0], [9.1, 607.0], [9.2, 614.0], [9.3, 623.0], [9.4, 626.0], [9.5, 630.0], [9.6, 632.0], [9.7, 640.0], [9.8, 653.0], [9.9, 660.0], [10.0, 663.0], [10.1, 678.0], [10.2, 685.0], [10.3, 691.0], [10.4, 706.0], [10.5, 708.0], [10.6, 712.0], [10.7, 716.0], [10.8, 717.0], [10.9, 722.0], [11.0, 724.0], [11.1, 730.0], [11.2, 732.0], [11.3, 734.0], [11.4, 735.0], [11.5, 736.0], [11.6, 740.0], [11.7, 743.0], [11.8, 744.0], [11.9, 748.0], [12.0, 750.0], [12.1, 752.0], [12.2, 754.0], [12.3, 755.0], [12.4, 759.0], [12.5, 761.0], [12.6, 765.0], [12.7, 768.0], [12.8, 771.0], [12.9, 774.0], [13.0, 777.0], [13.1, 779.0], [13.2, 786.0], [13.3, 786.0], [13.4, 791.0], [13.5, 792.0], [13.6, 794.0], [13.7, 798.0], [13.8, 798.0], [13.9, 806.0], [14.0, 808.0], [14.1, 810.0], [14.2, 812.0], [14.3, 814.0], [14.4, 815.0], [14.5, 820.0], [14.6, 824.0], [14.7, 828.0], [14.8, 832.0], [14.9, 833.0], [15.0, 835.0], [15.1, 838.0], [15.2, 841.0], [15.3, 846.0], [15.4, 849.0], [15.5, 853.0], [15.6, 854.0], [15.7, 856.0], [15.8, 857.0], [15.9, 861.0], [16.0, 862.0], [16.1, 865.0], [16.2, 869.0], [16.3, 873.0], [16.4, 874.0], [16.5, 875.0], [16.6, 877.0], [16.7, 878.0], [16.8, 880.0], [16.9, 882.0], [17.0, 890.0], [17.1, 892.0], [17.2, 895.0], [17.3, 898.0], [17.4, 906.0], [17.5, 915.0], [17.6, 927.0], [17.7, 940.0], [17.8, 943.0], [17.9, 946.0], [18.0, 948.0], [18.1, 953.0], [18.2, 955.0], [18.3, 957.0], [18.4, 957.0], [18.5, 961.0], [18.6, 961.0], [18.7, 964.0], [18.8, 967.0], [18.9, 969.0], [19.0, 971.0], [19.1, 976.0], [19.2, 983.0], [19.3, 993.0], [19.4, 998.0], [19.5, 1004.0], [19.6, 1010.0], [19.7, 1018.0], [19.8, 1023.0], [19.9, 1027.0], [20.0, 1031.0], [20.1, 1033.0], [20.2, 1034.0], [20.3, 1036.0], [20.4, 1036.0], [20.5, 1039.0], [20.6, 1039.0], [20.7, 1040.0], [20.8, 1042.0], [20.9, 1044.0], [21.0, 1045.0], [21.1, 1046.0], [21.2, 1048.0], [21.3, 1049.0], [21.4, 1051.0], [21.5, 1052.0], [21.6, 1054.0], [21.7, 1056.0], [21.8, 1057.0], [21.9, 1062.0], [22.0, 1065.0], [22.1, 1066.0], [22.2, 1070.0], [22.3, 1071.0], [22.4, 1074.0], [22.5, 1075.0], [22.6, 1078.0], [22.7, 1080.0], [22.8, 1082.0], [22.9, 1083.0], [23.0, 1086.0], [23.1, 1090.0], [23.2, 1092.0], [23.3, 1094.0], [23.4, 1095.0], [23.5, 1097.0], [23.6, 1100.0], [23.7, 1102.0], [23.8, 1103.0], [23.9, 1108.0], [24.0, 1108.0], [24.1, 1112.0], [24.2, 1117.0], [24.3, 1120.0], [24.4, 1125.0], [24.5, 1129.0], [24.6, 1139.0], [24.7, 1144.0], [24.8, 1148.0], [24.9, 1152.0], [25.0, 1156.0], [25.1, 1160.0], [25.2, 1167.0], [25.3, 1172.0], [25.4, 1173.0], [25.5, 1175.0], [25.6, 1178.0], [25.7, 1185.0], [25.8, 1188.0], [25.9, 1193.0], [26.0, 1197.0], [26.1, 1204.0], [26.2, 1224.0], [26.3, 1225.0], [26.4, 1228.0], [26.5, 1235.0], [26.6, 1241.0], [26.7, 1248.0], [26.8, 1254.0], [26.9, 1263.0], [27.0, 1278.0], [27.1, 1293.0], [27.2, 1307.0], [27.3, 1311.0], [27.4, 1315.0], [27.5, 1318.0], [27.6, 1320.0], [27.7, 1321.0], [27.8, 1325.0], [27.9, 1329.0], [28.0, 1330.0], [28.1, 1333.0], [28.2, 1336.0], [28.3, 1338.0], [28.4, 1345.0], [28.5, 1346.0], [28.6, 1349.0], [28.7, 1355.0], [28.8, 1357.0], [28.9, 1360.0], [29.0, 1367.0], [29.1, 1373.0], [29.2, 1375.0], [29.3, 1385.0], [29.4, 1389.0], [29.5, 1389.0], [29.6, 1391.0], [29.7, 1393.0], [29.8, 1395.0], [29.9, 1396.0], [30.0, 1401.0], [30.1, 1410.0], [30.2, 1414.0], [30.3, 1423.0], [30.4, 1425.0], [30.5, 1433.0], [30.6, 1436.0], [30.7, 1441.0], [30.8, 1445.0], [30.9, 1449.0], [31.0, 1451.0], [31.1, 1454.0], [31.2, 1456.0], [31.3, 1460.0], [31.4, 1463.0], [31.5, 1471.0], [31.6, 1475.0], [31.7, 1478.0], [31.8, 1480.0], [31.9, 1489.0], [32.0, 1493.0], [32.1, 1503.0], [32.2, 1504.0], [32.3, 1507.0], [32.4, 1510.0], [32.5, 1514.0], [32.6, 1517.0], [32.7, 1525.0], [32.8, 1526.0], [32.9, 1528.0], [33.0, 1528.0], [33.1, 1529.0], [33.2, 1530.0], [33.3, 1532.0], [33.4, 1532.0], [33.5, 1533.0], [33.6, 1533.0], [33.7, 1534.0], [33.8, 1535.0], [33.9, 1536.0], [34.0, 1537.0], [34.1, 1538.0], [34.2, 1539.0], [34.3, 1539.0], [34.4, 1539.0], [34.5, 1539.0], [34.6, 1540.0], [34.7, 1540.0], [34.8, 1541.0], [34.9, 1542.0], [35.0, 1542.0], [35.1, 1543.0], [35.2, 1544.0], [35.3, 1544.0], [35.4, 1545.0], [35.5, 1546.0], [35.6, 1546.0], [35.7, 1547.0], [35.8, 1547.0], [35.9, 1547.0], [36.0, 1548.0], [36.1, 1549.0], [36.2, 1549.0], [36.3, 1549.0], [36.4, 1550.0], [36.5, 1550.0], [36.6, 1551.0], [36.7, 1551.0], [36.8, 1551.0], [36.9, 1551.0], [37.0, 1552.0], [37.1, 1552.0], [37.2, 1552.0], [37.3, 1553.0], [37.4, 1553.0], [37.5, 1553.0], [37.6, 1554.0], [37.7, 1554.0], [37.8, 1554.0], [37.9, 1554.0], [38.0, 1554.0], [38.1, 1555.0], [38.2, 1555.0], [38.3, 1555.0], [38.4, 1556.0], [38.5, 1556.0], [38.6, 1556.0], [38.7, 1556.0], [38.8, 1556.0], [38.9, 1557.0], [39.0, 1557.0], [39.1, 1557.0], [39.2, 1558.0], [39.3, 1558.0], [39.4, 1558.0], [39.5, 1558.0], [39.6, 1559.0], [39.7, 1559.0], [39.8, 1559.0], [39.9, 1560.0], [40.0, 1560.0], [40.1, 1560.0], [40.2, 1561.0], [40.3, 1561.0], [40.4, 1561.0], [40.5, 1561.0], [40.6, 1561.0], [40.7, 1562.0], [40.8, 1562.0], [40.9, 1563.0], [41.0, 1563.0], [41.1, 1563.0], [41.2, 1563.0], [41.3, 1564.0], [41.4, 1564.0], [41.5, 1564.0], [41.6, 1565.0], [41.7, 1565.0], [41.8, 1565.0], [41.9, 1566.0], [42.0, 1566.0], [42.1, 1567.0], [42.2, 1567.0], [42.3, 1567.0], [42.4, 1567.0], [42.5, 1568.0], [42.6, 1568.0], [42.7, 1569.0], [42.8, 1569.0], [42.9, 1569.0], [43.0, 1570.0], [43.1, 1570.0], [43.2, 1570.0], [43.3, 1570.0], [43.4, 1571.0], [43.5, 1571.0], [43.6, 1572.0], [43.7, 1572.0], [43.8, 1572.0], [43.9, 1573.0], [44.0, 1573.0], [44.1, 1573.0], [44.2, 1573.0], [44.3, 1574.0], [44.4, 1574.0], [44.5, 1574.0], [44.6, 1574.0], [44.7, 1575.0], [44.8, 1575.0], [44.9, 1576.0], [45.0, 1576.0], [45.1, 1577.0], [45.2, 1577.0], [45.3, 1578.0], [45.4, 1578.0], [45.5, 1578.0], [45.6, 1578.0], [45.7, 1579.0], [45.8, 1579.0], [45.9, 1580.0], [46.0, 1580.0], [46.1, 1580.0], [46.2, 1581.0], [46.3, 1581.0], [46.4, 1581.0], [46.5, 1582.0], [46.6, 1582.0], [46.7, 1583.0], [46.8, 1583.0], [46.9, 1584.0], [47.0, 1584.0], [47.1, 1584.0], [47.2, 1584.0], [47.3, 1585.0], [47.4, 1585.0], [47.5, 1585.0], [47.6, 1586.0], [47.7, 1586.0], [47.8, 1586.0], [47.9, 1586.0], [48.0, 1587.0], [48.1, 1587.0], [48.2, 1588.0], [48.3, 1588.0], [48.4, 1588.0], [48.5, 1589.0], [48.6, 1589.0], [48.7, 1589.0], [48.8, 1589.0], [48.9, 1590.0], [49.0, 1590.0], [49.1, 1590.0], [49.2, 1591.0], [49.3, 1591.0], [49.4, 1592.0], [49.5, 1592.0], [49.6, 1592.0], [49.7, 1592.0], [49.8, 1593.0], [49.9, 1593.0], [50.0, 1593.0], [50.1, 1593.0], [50.2, 1593.0], [50.3, 1594.0], [50.4, 1594.0], [50.5, 1594.0], [50.6, 1595.0], [50.7, 1596.0], [50.8, 1596.0], [50.9, 1596.0], [51.0, 1596.0], [51.1, 1597.0], [51.2, 1597.0], [51.3, 1597.0], [51.4, 1598.0], [51.5, 1598.0], [51.6, 1598.0], [51.7, 1599.0], [51.8, 1600.0], [51.9, 1600.0], [52.0, 1600.0], [52.1, 1601.0], [52.2, 1601.0], [52.3, 1602.0], [52.4, 1602.0], [52.5, 1603.0], [52.6, 1603.0], [52.7, 1603.0], [52.8, 1604.0], [52.9, 1604.0], [53.0, 1604.0], [53.1, 1605.0], [53.2, 1605.0], [53.3, 1605.0], [53.4, 1606.0], [53.5, 1606.0], [53.6, 1606.0], [53.7, 1606.0], [53.8, 1607.0], [53.9, 1608.0], [54.0, 1608.0], [54.1, 1608.0], [54.2, 1610.0], [54.3, 1610.0], [54.4, 1611.0], [54.5, 1611.0], [54.6, 1612.0], [54.7, 1612.0], [54.8, 1613.0], [54.9, 1613.0], [55.0, 1614.0], [55.1, 1614.0], [55.2, 1615.0], [55.3, 1616.0], [55.4, 1616.0], [55.5, 1617.0], [55.6, 1617.0], [55.7, 1618.0], [55.8, 1619.0], [55.9, 1620.0], [56.0, 1621.0], [56.1, 1622.0], [56.2, 1622.0], [56.3, 1623.0], [56.4, 1624.0], [56.5, 1625.0], [56.6, 1625.0], [56.7, 1626.0], [56.8, 1626.0], [56.9, 1627.0], [57.0, 1628.0], [57.1, 1629.0], [57.2, 1629.0], [57.3, 1629.0], [57.4, 1630.0], [57.5, 1630.0], [57.6, 1631.0], [57.7, 1631.0], [57.8, 1632.0], [57.9, 1633.0], [58.0, 1633.0], [58.1, 1634.0], [58.2, 1634.0], [58.3, 1635.0], [58.4, 1635.0], [58.5, 1636.0], [58.6, 1637.0], [58.7, 1637.0], [58.8, 1637.0], [58.9, 1638.0], [59.0, 1638.0], [59.1, 1639.0], [59.2, 1639.0], [59.3, 1639.0], [59.4, 1640.0], [59.5, 1640.0], [59.6, 1640.0], [59.7, 1640.0], [59.8, 1641.0], [59.9, 1641.0], [60.0, 1641.0], [60.1, 1642.0], [60.2, 1642.0], [60.3, 1642.0], [60.4, 1643.0], [60.5, 1643.0], [60.6, 1644.0], [60.7, 1644.0], [60.8, 1644.0], [60.9, 1645.0], [61.0, 1645.0], [61.1, 1645.0], [61.2, 1646.0], [61.3, 1646.0], [61.4, 1646.0], [61.5, 1647.0], [61.6, 1647.0], [61.7, 1647.0], [61.8, 1648.0], [61.9, 1648.0], [62.0, 1648.0], [62.1, 1649.0], [62.2, 1649.0], [62.3, 1650.0], [62.4, 1651.0], [62.5, 1651.0], [62.6, 1652.0], [62.7, 1652.0], [62.8, 1653.0], [62.9, 1653.0], [63.0, 1654.0], [63.1, 1654.0], [63.2, 1655.0], [63.3, 1656.0], [63.4, 1656.0], [63.5, 1656.0], [63.6, 1657.0], [63.7, 1658.0], [63.8, 1660.0], [63.9, 1663.0], [64.0, 1664.0], [64.1, 1665.0], [64.2, 1666.0], [64.3, 1667.0], [64.4, 1670.0], [64.5, 1672.0], [64.6, 1673.0], [64.7, 1675.0], [64.8, 1677.0], [64.9, 1679.0], [65.0, 1680.0], [65.1, 1682.0], [65.2, 1684.0], [65.3, 1686.0], [65.4, 1690.0], [65.5, 1691.0], [65.6, 1696.0], [65.7, 1698.0], [65.8, 1699.0], [65.9, 1701.0], [66.0, 1703.0], [66.1, 1705.0], [66.2, 1707.0], [66.3, 1709.0], [66.4, 1711.0], [66.5, 1713.0], [66.6, 1714.0], [66.7, 1716.0], [66.8, 1718.0], [66.9, 1719.0], [67.0, 1721.0], [67.1, 1722.0], [67.2, 1723.0], [67.3, 1726.0], [67.4, 1728.0], [67.5, 1729.0], [67.6, 1732.0], [67.7, 1734.0], [67.8, 1736.0], [67.9, 1738.0], [68.0, 1739.0], [68.1, 1740.0], [68.2, 1742.0], [68.3, 1744.0], [68.4, 1745.0], [68.5, 1746.0], [68.6, 1748.0], [68.7, 1750.0], [68.8, 1750.0], [68.9, 1751.0], [69.0, 1753.0], [69.1, 1753.0], [69.2, 1757.0], [69.3, 1760.0], [69.4, 1763.0], [69.5, 1766.0], [69.6, 1769.0], [69.7, 1771.0], [69.8, 1773.0], [69.9, 1774.0], [70.0, 1777.0], [70.1, 1781.0], [70.2, 1781.0], [70.3, 1782.0], [70.4, 1784.0], [70.5, 1785.0], [70.6, 1786.0], [70.7, 1787.0], [70.8, 1789.0], [70.9, 1790.0], [71.0, 1792.0], [71.1, 1794.0], [71.2, 1796.0], [71.3, 1798.0], [71.4, 1799.0], [71.5, 1800.0], [71.6, 1800.0], [71.7, 1801.0], [71.8, 1802.0], [71.9, 1804.0], [72.0, 1804.0], [72.1, 1806.0], [72.2, 1807.0], [72.3, 1807.0], [72.4, 1808.0], [72.5, 1809.0], [72.6, 1809.0], [72.7, 1810.0], [72.8, 1810.0], [72.9, 1812.0], [73.0, 1814.0], [73.1, 1814.0], [73.2, 1815.0], [73.3, 1816.0], [73.4, 1817.0], [73.5, 1817.0], [73.6, 1818.0], [73.7, 1818.0], [73.8, 1819.0], [73.9, 1821.0], [74.0, 1822.0], [74.1, 1823.0], [74.2, 1823.0], [74.3, 1824.0], [74.4, 1825.0], [74.5, 1826.0], [74.6, 1828.0], [74.7, 1831.0], [74.8, 1832.0], [74.9, 1834.0], [75.0, 1837.0], [75.1, 1842.0], [75.2, 1843.0], [75.3, 1844.0], [75.4, 1848.0], [75.5, 1850.0], [75.6, 1854.0], [75.7, 1854.0], [75.8, 1855.0], [75.9, 1861.0], [76.0, 1861.0], [76.1, 1863.0], [76.2, 1864.0], [76.3, 1864.0], [76.4, 1865.0], [76.5, 1865.0], [76.6, 1866.0], [76.7, 1867.0], [76.8, 1867.0], [76.9, 1868.0], [77.0, 1868.0], [77.1, 1868.0], [77.2, 1869.0], [77.3, 1869.0], [77.4, 1870.0], [77.5, 1871.0], [77.6, 1871.0], [77.7, 1872.0], [77.8, 1872.0], [77.9, 1873.0], [78.0, 1874.0], [78.1, 1875.0], [78.2, 1875.0], [78.3, 1876.0], [78.4, 1876.0], [78.5, 1878.0], [78.6, 1878.0], [78.7, 1879.0], [78.8, 1880.0], [78.9, 1881.0], [79.0, 1883.0], [79.1, 1884.0], [79.2, 1885.0], [79.3, 1886.0], [79.4, 1886.0], [79.5, 1887.0], [79.6, 1889.0], [79.7, 1890.0], [79.8, 1895.0], [79.9, 1898.0], [80.0, 1900.0], [80.1, 1904.0], [80.2, 1925.0], [80.3, 1988.0], [80.4, 2021.0], [80.5, 2071.0], [80.6, 2083.0], [80.7, 2103.0], [80.8, 2121.0], [80.9, 2159.0], [81.0, 2174.0], [81.1, 2186.0], [81.2, 2212.0], [81.3, 2228.0], [81.4, 2236.0], [81.5, 2264.0], [81.6, 2275.0], [81.7, 2294.0], [81.8, 2324.0], [81.9, 2364.0], [82.0, 2385.0], [82.1, 2406.0], [82.2, 2423.0], [82.3, 2444.0], [82.4, 2461.0], [82.5, 2483.0], [82.6, 2500.0], [82.7, 2518.0], [82.8, 2530.0], [82.9, 2538.0], [83.0, 2552.0], [83.1, 2556.0], [83.2, 2584.0], [83.3, 2605.0], [83.4, 2625.0], [83.5, 2658.0], [83.6, 2670.0], [83.7, 2716.0], [83.8, 2736.0], [83.9, 2799.0], [84.0, 2846.0], [84.1, 2861.0], [84.2, 2888.0], [84.3, 2926.0], [84.4, 3030.0], [84.5, 3092.0], [84.6, 3144.0], [84.7, 3181.0], [84.8, 3191.0], [84.9, 3229.0], [85.0, 3262.0], [85.1, 3283.0], [85.2, 3321.0], [85.3, 3391.0], [85.4, 3443.0], [85.5, 3468.0], [85.6, 3481.0], [85.7, 3497.0], [85.8, 3504.0], [85.9, 3511.0], [86.0, 3516.0], [86.1, 3517.0], [86.2, 3518.0], [86.3, 3526.0], [86.4, 3531.0], [86.5, 3534.0], [86.6, 3536.0], [86.7, 3541.0], [86.8, 3543.0], [86.9, 3551.0], [87.0, 3555.0], [87.1, 3558.0], [87.2, 3563.0], [87.3, 3567.0], [87.4, 3573.0], [87.5, 3581.0], [87.6, 3590.0], [87.7, 3596.0], [87.8, 3601.0], [87.9, 3611.0], [88.0, 3627.0], [88.1, 3715.0], [88.2, 3896.0], [88.3, 3921.0], [88.4, 3940.0], [88.5, 4050.0], [88.6, 4132.0], [88.7, 4219.0], [88.8, 4259.0], [88.9, 4286.0], [89.0, 4305.0], [89.1, 4337.0], [89.2, 4370.0], [89.3, 4384.0], [89.4, 4414.0], [89.5, 4450.0], [89.6, 4456.0], [89.7, 4528.0], [89.8, 4547.0], [89.9, 4572.0], [90.0, 4627.0], [90.1, 4648.0], [90.2, 4689.0], [90.3, 4696.0], [90.4, 4724.0], [90.5, 4743.0], [90.6, 4761.0], [90.7, 4779.0], [90.8, 4804.0], [90.9, 4833.0], [91.0, 4856.0], [91.1, 4873.0], [91.2, 4887.0], [91.3, 4893.0], [91.4, 4911.0], [91.5, 4916.0], [91.6, 4922.0], [91.7, 4948.0], [91.8, 4961.0], [91.9, 4975.0], [92.0, 4997.0], [92.1, 5004.0], [92.2, 5014.0], [92.3, 5023.0], [92.4, 5043.0], [92.5, 5057.0], [92.6, 5080.0], [92.7, 5095.0], [92.8, 5106.0], [92.9, 5115.0], [93.0, 5123.0], [93.1, 5126.0], [93.2, 5130.0], [93.3, 5136.0], [93.4, 5164.0], [93.5, 5182.0], [93.6, 5187.0], [93.7, 5201.0], [93.8, 5222.0], [93.9, 5236.0], [94.0, 5261.0], [94.1, 5292.0], [94.2, 5320.0], [94.3, 5343.0], [94.4, 5357.0], [94.5, 5403.0], [94.6, 5427.0], [94.7, 5460.0], [94.8, 5476.0], [94.9, 5538.0], [95.0, 5556.0], [95.1, 5580.0], [95.2, 5609.0], [95.3, 5620.0], [95.4, 5655.0], [95.5, 5677.0], [95.6, 5700.0], [95.7, 5710.0], [95.8, 5730.0], [95.9, 5749.0], [96.0, 5763.0], [96.1, 5776.0], [96.2, 5791.0], [96.3, 5801.0], [96.4, 5828.0], [96.5, 5848.0], [96.6, 5870.0], [96.7, 5909.0], [96.8, 5919.0], [96.9, 5951.0], [97.0, 5968.0], [97.1, 5991.0], [97.2, 6036.0], [97.3, 6048.0], [97.4, 6104.0], [97.5, 6171.0], [97.6, 6206.0], [97.7, 6229.0], [97.8, 6271.0], [97.9, 6336.0], [98.0, 6533.0], [98.1, 6707.0], [98.2, 6828.0], [98.3, 6887.0], [98.4, 7051.0], [98.5, 7179.0], [98.6, 7303.0], [98.7, 7757.0], [98.8, 7947.0], [98.9, 8133.0], [99.0, 8732.0], [99.1, 8933.0], [99.2, 13129.0], [99.3, 13223.0], [99.4, 13297.0], [99.5, 13562.0], [99.6, 13667.0], [99.7, 13792.0], [99.8, 15000.0], [99.9, 15759.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 710.0, "series": [{"data": [[100.0, 238.0], [200.0, 26.0], [300.0, 34.0], [400.0, 2.0], [500.0, 19.0], [600.0, 52.0], [700.0, 126.0], [800.0, 128.0], [900.0, 74.0], [1000.0, 150.0], [1100.0, 87.0], [1200.0, 42.0], [1300.0, 100.0], [1400.0, 75.0], [1500.0, 710.0], [1600.0, 506.0], [1700.0, 203.0], [1800.0, 308.0], [1900.0, 12.0], [2000.0, 12.0], [2100.0, 18.0], [2300.0, 11.0], [2200.0, 21.0], [2400.0, 19.0], [2500.0, 25.0], [2600.0, 13.0], [2700.0, 10.0], [2800.0, 11.0], [2900.0, 5.0], [3000.0, 6.0], [3100.0, 11.0], [3300.0, 6.0], [3200.0, 11.0], [3400.0, 17.0], [3500.0, 72.0], [3700.0, 2.0], [3600.0, 11.0], [3800.0, 3.0], [3900.0, 9.0], [4000.0, 4.0], [4200.0, 9.0], [4100.0, 4.0], [4300.0, 15.0], [4400.0, 10.0], [4600.0, 13.0], [4500.0, 12.0], [4700.0, 16.0], [4800.0, 20.0], [4900.0, 25.0], [5000.0, 25.0], [5100.0, 35.0], [5200.0, 16.0], [5300.0, 12.0], [5400.0, 13.0], [5500.0, 11.0], [5600.0, 16.0], [5700.0, 24.0], [5800.0, 15.0], [5900.0, 18.0], [6000.0, 8.0], [6100.0, 7.0], [6200.0, 11.0], [6300.0, 3.0], [6400.0, 1.0], [6600.0, 1.0], [6500.0, 2.0], [6700.0, 2.0], [6800.0, 7.0], [6900.0, 1.0], [7000.0, 2.0], [7100.0, 5.0], [7200.0, 1.0], [7300.0, 2.0], [7600.0, 1.0], [7700.0, 3.0], [7800.0, 1.0], [7900.0, 3.0], [8000.0, 1.0], [8100.0, 1.0], [8200.0, 1.0], [8700.0, 3.0], [8600.0, 1.0], [8500.0, 1.0], [8900.0, 1.0], [10100.0, 2.0], [10400.0, 1.0], [13200.0, 7.0], [13100.0, 2.0], [13700.0, 4.0], [13400.0, 2.0], [13500.0, 2.0], [13600.0, 2.0], [14700.0, 1.0], [14800.0, 1.0], [15000.0, 1.0], [15200.0, 2.0], [15400.0, 1.0], [15700.0, 1.0], [17800.0, 1.0], [17900.0, 1.0], [18500.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 18500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 300.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2447.0, "series": [{"data": [[0.0, 300.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 853.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2447.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 371.7113888888887, "minX": 1.6966632E12, "maxY": 371.7113888888887, "series": [{"data": [[1.6966632E12, 371.7113888888887]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6966632E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 101.0, "minX": 1.0, "maxY": 6691.5, "series": [{"data": [[2.0, 117.2], [3.0, 104.66666666666667], [4.0, 104.5], [5.0, 1786.8], [6.0, 136.2], [7.0, 1865.2], [8.0, 1867.9090909090905], [9.0, 115.0], [10.0, 1517.6000000000001], [11.0, 105.5], [12.0, 6288.0], [13.0, 2362.666666666667], [14.0, 4379.0], [15.0, 3038.5], [16.0, 131.0], [17.0, 4249.0], [18.0, 5292.5], [19.0, 4036.0], [20.0, 133.0], [21.0, 129.0], [22.0, 408.0], [23.0, 120.0], [24.0, 121.0], [25.0, 2029.2499999999998], [26.0, 116.0], [27.0, 115.0], [28.0, 2535.0], [29.0, 1363.75], [30.0, 104.2], [31.0, 114.0], [33.0, 111.0], [32.0, 4774.8], [35.0, 115.0], [34.0, 109.0], [37.0, 109.0], [36.0, 2301.25], [39.0, 113.0], [38.0, 2268.25], [41.0, 108.0], [40.0, 4428.0], [43.0, 1959.1428571428573], [42.0, 115.0], [45.0, 116.0], [44.0, 2658.0], [47.0, 1508.3333333333335], [46.0, 117.0], [49.0, 2235.5], [48.0, 1159.25], [51.0, 122.0], [50.0, 1773.25], [53.0, 107.5], [52.0, 839.5], [55.0, 6691.5], [54.0, 4736.428571428571], [57.0, 1682.0], [56.0, 3129.0], [59.0, 2487.0], [58.0, 924.5], [61.0, 116.0], [60.0, 192.0], [63.0, 3896.0], [62.0, 182.0], [67.0, 1945.6666666666667], [66.0, 1490.0], [65.0, 2423.0], [64.0, 101.0], [71.0, 101.0], [70.0, 778.0], [69.0, 1471.0], [68.0, 1047.0], [75.0, 104.0], [74.0, 1396.0], [73.0, 108.0], [72.0, 110.0], [79.0, 1461.0], [78.0, 107.33333333333333], [76.0, 1218.0], [83.0, 2852.333333333333], [82.0, 104.0], [81.0, 108.0], [80.0, 1487.0], [86.0, 117.0], [85.0, 751.5], [84.0, 523.3333333333334], [90.0, 860.0], [89.0, 101.0], [88.0, 545.6666666666666], [95.0, 942.3333333333333], [94.0, 1463.5], [93.0, 107.0], [92.0, 801.75], [99.0, 879.3333333333333], [98.0, 1265.5], [97.0, 1883.0], [96.0, 108.0], [103.0, 1158.0], [102.0, 1449.0], [101.0, 101.5], [100.0, 102.0], [106.0, 130.66666666666666], [105.0, 107.0], [104.0, 108.0], [111.0, 135.0], [110.0, 132.0], [109.0, 123.0], [108.0, 158.0], [115.0, 505.3333333333333], [114.0, 809.0], [113.0, 101.0], [112.0, 550.5], [119.0, 105.5], [118.0, 259.42857142857144], [117.0, 979.6], [116.0, 106.5], [122.0, 1078.4], [121.0, 432.14285714285717], [120.0, 111.0], [127.0, 281.0], [126.0, 296.0], [125.0, 263.0], [124.0, 1197.0], [135.0, 164.0], [134.0, 227.0], [133.0, 253.33333333333334], [132.0, 344.0], [131.0, 210.0], [130.0, 286.0], [129.0, 241.5], [143.0, 280.0], [142.0, 303.0], [141.0, 323.0], [140.0, 326.0], [139.0, 335.0], [138.0, 272.0], [137.0, 324.0], [136.0, 226.0], [150.0, 345.75], [148.0, 337.0], [147.0, 347.0], [146.0, 293.0], [145.0, 318.5], [144.0, 282.0], [159.0, 842.2], [158.0, 819.5], [157.0, 1613.0], [156.0, 332.0], [154.0, 314.3333333333333], [153.0, 335.33333333333337], [167.0, 163.0], [166.0, 130.0], [165.0, 142.0], [164.0, 140.0], [163.0, 143.0], [162.0, 146.0], [161.0, 1407.2], [160.0, 1211.0], [175.0, 168.5], [173.0, 169.0], [170.0, 143.0], [169.0, 132.0], [168.0, 151.0], [183.0, 367.5], [182.0, 339.0], [181.0, 173.0], [180.0, 232.0], [179.0, 251.0], [178.0, 224.0], [177.0, 343.5], [176.0, 259.0], [191.0, 977.0], [190.0, 648.0], [189.0, 978.0], [188.0, 631.0], [187.0, 623.0], [186.0, 332.0], [185.0, 327.0], [184.0, 319.5], [199.0, 925.0], [197.0, 936.5], [195.0, 874.0], [194.0, 1854.0], [193.0, 843.25], [192.0, 706.0], [207.0, 1123.0], [206.0, 873.0], [205.0, 961.0], [204.0, 963.0], [203.0, 1567.6666666666667], [202.0, 1015.6666666666666], [201.0, 968.0], [200.0, 978.0], [215.0, 944.0], [214.0, 915.75], [213.0, 1146.0], [212.0, 1095.0], [211.0, 1155.0], [210.0, 1055.3333333333333], [209.0, 1072.5], [208.0, 1144.0], [223.0, 1073.2], [221.0, 1064.0], [220.0, 1035.4166666666667], [219.0, 1002.5], [218.0, 936.0], [217.0, 2074.5], [216.0, 1050.5], [231.0, 1679.75], [230.0, 2033.6666666666667], [229.0, 1080.0], [228.0, 1407.1666666666667], [227.0, 1119.5], [226.0, 1222.6666666666667], [225.0, 1530.6], [238.0, 1090.3333333333333], [236.0, 1068.0], [234.0, 1100.0], [233.0, 1044.6666666666667], [232.0, 1091.0], [247.0, 1040.0], [246.0, 1075.0], [245.0, 1711.0], [244.0, 1039.3333333333333], [241.0, 1040.0], [240.0, 1045.0], [255.0, 1082.5], [254.0, 1087.5], [253.0, 1061.3333333333333], [251.0, 1059.5], [250.0, 1052.0], [249.0, 1039.0], [248.0, 1042.0], [269.0, 1226.4285714285716], [271.0, 1271.0], [268.0, 2100.0], [259.0, 1052.5], [258.0, 1435.4], [256.0, 1091.0], [267.0, 1915.7], [266.0, 914.0], [265.0, 919.0], [264.0, 921.0], [263.0, 2565.6666666666665], [262.0, 1853.5], [261.0, 2647.5], [260.0, 1772.0], [286.0, 798.0], [287.0, 847.0], [285.0, 797.6666666666666], [284.0, 795.0], [283.0, 812.0], [282.0, 821.0], [281.0, 809.0], [280.0, 765.0], [279.0, 793.0], [272.0, 792.0], [274.0, 2513.3333333333335], [273.0, 1354.0], [278.0, 771.0], [277.0, 791.5], [276.0, 1830.25], [302.0, 759.0], [303.0, 752.0], [301.0, 757.0], [300.0, 1797.0], [299.0, 772.5], [298.0, 1139.5], [297.0, 1122.142857142857], [296.0, 631.0], [295.0, 630.1666666666667], [289.0, 824.8], [288.0, 2263.0], [291.0, 814.5], [290.0, 794.0], [294.0, 1689.3333333333333], [293.0, 2287.285714285714], [292.0, 1774.2857142857142], [306.0, 4292.8], [313.0, 749.0], [312.0, 753.0], [311.0, 738.0], [310.0, 767.5], [309.0, 749.0], [308.0, 754.0], [307.0, 2288.5], [305.0, 1998.857142857143], [304.0, 750.0], [335.0, 959.5], [334.0, 961.0], [333.0, 949.0], [332.0, 960.5], [331.0, 959.0], [330.0, 1153.581395348837], [350.0, 1118.0], [351.0, 1044.0], [349.0, 1105.6], [348.0, 1365.75], [347.0, 1197.0], [346.0, 1437.6666666666667], [345.0, 5968.666666666666], [344.0, 1111.0], [343.0, 1255.0], [337.0, 954.0], [336.0, 1457.4], [339.0, 959.5], [338.0, 955.0], [342.0, 1550.4], [341.0, 1131.5], [340.0, 963.5], [366.0, 1163.25], [367.0, 1311.8333333333335], [365.0, 1117.6666666666667], [364.0, 1139.5], [363.0, 1198.5], [362.0, 1068.0], [361.0, 1084.5], [360.0, 1376.2857142857144], [359.0, 1108.0], [352.0, 1050.0], [355.0, 1081.0], [354.0, 1101.75], [358.0, 5820.833333333333], [357.0, 1591.5], [356.0, 1040.0], [382.0, 1544.3333333333335], [383.0, 1545.875], [381.0, 1572.4166666666667], [380.0, 1623.5], [379.0, 1612.3076923076924], [378.0, 1605.857142857143], [377.0, 1598.2], [376.0, 1681.1666666666665], [375.0, 1757.0], [369.0, 1092.6666666666667], [368.0, 1107.0], [371.0, 1078.0], [370.0, 1027.0], [374.0, 1780.4], [373.0, 2156.724999999999], [372.0, 1048.0], [398.0, 1596.0], [399.0, 1622.6944444444443], [397.0, 1605.0], [396.0, 1602.5909090909092], [395.0, 1595.9999999999998], [394.0, 1842.769230769231], [393.0, 1657.75], [392.0, 2753.300000000001], [391.0, 2017.8266666666675], [385.0, 1582.3], [384.0, 1555.75], [387.0, 1614.25], [386.0, 1599.5], [390.0, 3324.544117647059], [389.0, 1614.2881355932204], [388.0, 1614.4166666666665], [414.0, 1560.0], [415.0, 1569.125], [413.0, 1562.5], [412.0, 1566.0], [411.0, 1581.625], [410.0, 1581.75], [409.0, 1570.0], [408.0, 1586.0], [407.0, 1573.8], [401.0, 1589.5], [400.0, 1593.3333333333333], [403.0, 1597.0], [402.0, 1593.2727272727273], [406.0, 1708.7142857142856], [405.0, 1586.5], [404.0, 1589.0], [430.0, 1564.5], [431.0, 1571.0], [429.0, 1560.5], [428.0, 1564.0], [427.0, 1552.0], [426.0, 1567.0], [425.0, 1563.4], [424.0, 1555.0], [423.0, 1548.375], [417.0, 1569.0], [416.0, 1562.4], [419.0, 1565.375], [418.0, 1575.0], [422.0, 1542.0], [421.0, 1558.7777777777776], [420.0, 1551.4285714285716], [446.0, 1647.6666666666667], [447.0, 1759.888888888889], [445.0, 1642.714285714286], [444.0, 1637.2], [443.0, 1644.5], [442.0, 1715.1176470588234], [441.0, 1641.4999999999998], [440.0, 1665.0], [439.0, 1630.6666666666665], [433.0, 1568.3333333333333], [432.0, 1566.3846153846152], [435.0, 1587.0000000000002], [434.0, 1565.8333333333333], [438.0, 1790.9166666666667], [437.0, 1645.6923076923074], [436.0, 1706.4999999999998], [450.0, 2483.021556886223], [449.0, 2022.04], [448.0, 2120.5], [1.0, 106.33333333333333]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[371.7113888888887, 2003.4155555555587]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 450.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9382.5, "minX": 1.6966632E12, "maxY": 198799.95, "series": [{"data": [[1.6966632E12, 198799.95]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6966632E12, 9382.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6966632E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2003.4155555555587, "minX": 1.6966632E12, "maxY": 2003.4155555555587, "series": [{"data": [[1.6966632E12, 2003.4155555555587]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6966632E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2003.128888888883, "minX": 1.6966632E12, "maxY": 2003.128888888883, "series": [{"data": [[1.6966632E12, 2003.128888888883]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6966632E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 548.7108333333338, "minX": 1.6966632E12, "maxY": 548.7108333333338, "series": [{"data": [[1.6966632E12, 548.7108333333338]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6966632E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 100.0, "minX": 1.6966632E12, "maxY": 18595.0, "series": [{"data": [[1.6966632E12, 18595.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6966632E12, 100.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6966632E12, 4626.400000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6966632E12, 8731.499999999989]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6966632E12, 1593.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.6966632E12, 5555.799999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6966632E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 108.5, "minX": 18.0, "maxY": 4992.5, "series": [{"data": [[133.0, 781.0], [32.0, 108.5], [146.0, 1781.0], [183.0, 1592.0], [199.0, 286.0], [208.0, 1869.0], [238.0, 1606.0], [243.0, 1351.0], [250.0, 1590.0], [259.0, 1817.0], [261.0, 1629.0], [260.0, 1557.5], [266.0, 1037.5], [18.0, 112.0], [19.0, 118.0], [322.0, 4992.5], [330.0, 1177.5], [22.0, 2436.5], [94.0, 892.5], [23.0, 126.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 330.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 108.5, "minX": 18.0, "maxY": 4992.5, "series": [{"data": [[133.0, 781.0], [32.0, 108.5], [146.0, 1781.0], [183.0, 1591.0], [199.0, 286.0], [208.0, 1868.5], [238.0, 1606.0], [243.0, 1351.0], [250.0, 1589.0], [259.0, 1817.0], [261.0, 1629.0], [260.0, 1557.0], [266.0, 1037.5], [18.0, 112.0], [19.0, 118.0], [322.0, 4992.5], [330.0, 1177.5], [22.0, 2436.5], [94.0, 892.0], [23.0, 126.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 330.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 60.0, "minX": 1.6966632E12, "maxY": 60.0, "series": [{"data": [[1.6966632E12, 60.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6966632E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 60.0, "minX": 1.6966632E12, "maxY": 60.0, "series": [{"data": [[1.6966632E12, 60.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6966632E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 60.0, "minX": 1.6966632E12, "maxY": 60.0, "series": [{"data": [[1.6966632E12, 60.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6966632E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 60.0, "minX": 1.6966632E12, "maxY": 60.0, "series": [{"data": [[1.6966632E12, 60.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6966632E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

