/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 107.0, "minX": 0.0, "maxY": 38804.0, "series": [{"data": [[0.0, 107.0], [0.1, 108.0], [0.2, 109.0], [0.3, 110.0], [0.4, 110.0], [0.5, 111.0], [0.6, 112.0], [0.7, 112.0], [0.8, 113.0], [0.9, 114.0], [1.0, 118.0], [1.1, 120.0], [1.2, 132.0], [1.3, 159.0], [1.4, 207.0], [1.5, 214.0], [1.6, 224.0], [1.7, 228.0], [1.8, 235.0], [1.9, 241.0], [2.0, 265.0], [2.1, 277.0], [2.2, 304.0], [2.3, 317.0], [2.4, 330.0], [2.5, 345.0], [2.6, 366.0], [2.7, 391.0], [2.8, 397.0], [2.9, 400.0], [3.0, 406.0], [3.1, 411.0], [3.2, 439.0], [3.3, 466.0], [3.4, 512.0], [3.5, 521.0], [3.6, 541.0], [3.7, 569.0], [3.8, 610.0], [3.9, 628.0], [4.0, 635.0], [4.1, 638.0], [4.2, 645.0], [4.3, 669.0], [4.4, 679.0], [4.5, 718.0], [4.6, 730.0], [4.7, 750.0], [4.8, 758.0], [4.9, 768.0], [5.0, 785.0], [5.1, 867.0], [5.2, 896.0], [5.3, 904.0], [5.4, 932.0], [5.5, 945.0], [5.6, 954.0], [5.7, 962.0], [5.8, 967.0], [5.9, 970.0], [6.0, 980.0], [6.1, 1004.0], [6.2, 1017.0], [6.3, 1066.0], [6.4, 1092.0], [6.5, 1110.0], [6.6, 1126.0], [6.7, 1155.0], [6.8, 1165.0], [6.9, 1183.0], [7.0, 1236.0], [7.1, 1326.0], [7.2, 1357.0], [7.3, 1369.0], [7.4, 1405.0], [7.5, 1415.0], [7.6, 1437.0], [7.7, 1472.0], [7.8, 1479.0], [7.9, 1488.0], [8.0, 1500.0], [8.1, 1505.0], [8.2, 1511.0], [8.3, 1516.0], [8.4, 1524.0], [8.5, 1544.0], [8.6, 1567.0], [8.7, 1602.0], [8.8, 1708.0], [8.9, 1819.0], [9.0, 1824.0], [9.1, 1836.0], [9.2, 1843.0], [9.3, 1855.0], [9.4, 1868.0], [9.5, 1877.0], [9.6, 1881.0], [9.7, 1884.0], [9.8, 1886.0], [9.9, 1887.0], [10.0, 1890.0], [10.1, 1893.0], [10.2, 1895.0], [10.3, 1897.0], [10.4, 1900.0], [10.5, 1901.0], [10.6, 1902.0], [10.7, 1904.0], [10.8, 1906.0], [10.9, 1908.0], [11.0, 1910.0], [11.1, 1914.0], [11.2, 1915.0], [11.3, 1917.0], [11.4, 1923.0], [11.5, 1927.0], [11.6, 1929.0], [11.7, 1932.0], [11.8, 1933.0], [11.9, 1934.0], [12.0, 1936.0], [12.1, 1938.0], [12.2, 1939.0], [12.3, 1939.0], [12.4, 1941.0], [12.5, 1942.0], [12.6, 1944.0], [12.7, 1946.0], [12.8, 1948.0], [12.9, 1950.0], [13.0, 1955.0], [13.1, 1958.0], [13.2, 1964.0], [13.3, 1970.0], [13.4, 1973.0], [13.5, 1984.0], [13.6, 1989.0], [13.7, 1997.0], [13.8, 2008.0], [13.9, 2015.0], [14.0, 2018.0], [14.1, 2020.0], [14.2, 2023.0], [14.3, 2025.0], [14.4, 2026.0], [14.5, 2029.0], [14.6, 2030.0], [14.7, 2032.0], [14.8, 2034.0], [14.9, 2039.0], [15.0, 2045.0], [15.1, 2049.0], [15.2, 2053.0], [15.3, 2055.0], [15.4, 2057.0], [15.5, 2058.0], [15.6, 2058.0], [15.7, 2059.0], [15.8, 2060.0], [15.9, 2062.0], [16.0, 2065.0], [16.1, 2068.0], [16.2, 2070.0], [16.3, 2073.0], [16.4, 2074.0], [16.5, 2076.0], [16.6, 2078.0], [16.7, 2080.0], [16.8, 2083.0], [16.9, 2084.0], [17.0, 2089.0], [17.1, 2093.0], [17.2, 2096.0], [17.3, 2100.0], [17.4, 2103.0], [17.5, 2108.0], [17.6, 2112.0], [17.7, 2114.0], [17.8, 2116.0], [17.9, 2120.0], [18.0, 2124.0], [18.1, 2130.0], [18.2, 2136.0], [18.3, 2144.0], [18.4, 2150.0], [18.5, 2153.0], [18.6, 2155.0], [18.7, 2157.0], [18.8, 2159.0], [18.9, 2161.0], [19.0, 2162.0], [19.1, 2165.0], [19.2, 2168.0], [19.3, 2171.0], [19.4, 2175.0], [19.5, 2183.0], [19.6, 2189.0], [19.7, 2192.0], [19.8, 2203.0], [19.9, 2211.0], [20.0, 2217.0], [20.1, 2222.0], [20.2, 2232.0], [20.3, 2244.0], [20.4, 2251.0], [20.5, 2255.0], [20.6, 2266.0], [20.7, 2271.0], [20.8, 2278.0], [20.9, 2293.0], [21.0, 2314.0], [21.1, 2317.0], [21.2, 2320.0], [21.3, 2321.0], [21.4, 2322.0], [21.5, 2323.0], [21.6, 2324.0], [21.7, 2324.0], [21.8, 2325.0], [21.9, 2326.0], [22.0, 2327.0], [22.1, 2327.0], [22.2, 2329.0], [22.3, 2330.0], [22.4, 2331.0], [22.5, 2332.0], [22.6, 2334.0], [22.7, 2335.0], [22.8, 2337.0], [22.9, 2338.0], [23.0, 2338.0], [23.1, 2340.0], [23.2, 2340.0], [23.3, 2342.0], [23.4, 2342.0], [23.5, 2344.0], [23.6, 2344.0], [23.7, 2345.0], [23.8, 2349.0], [23.9, 2350.0], [24.0, 2352.0], [24.1, 2354.0], [24.2, 2355.0], [24.3, 2356.0], [24.4, 2357.0], [24.5, 2358.0], [24.6, 2360.0], [24.7, 2361.0], [24.8, 2361.0], [24.9, 2363.0], [25.0, 2364.0], [25.1, 2366.0], [25.2, 2368.0], [25.3, 2372.0], [25.4, 2374.0], [25.5, 2377.0], [25.6, 2379.0], [25.7, 2381.0], [25.8, 2382.0], [25.9, 2384.0], [26.0, 2385.0], [26.1, 2387.0], [26.2, 2388.0], [26.3, 2390.0], [26.4, 2391.0], [26.5, 2394.0], [26.6, 2395.0], [26.7, 2397.0], [26.8, 2398.0], [26.9, 2399.0], [27.0, 2399.0], [27.1, 2400.0], [27.2, 2402.0], [27.3, 2403.0], [27.4, 2405.0], [27.5, 2406.0], [27.6, 2407.0], [27.7, 2409.0], [27.8, 2411.0], [27.9, 2414.0], [28.0, 2416.0], [28.1, 2421.0], [28.2, 2423.0], [28.3, 2426.0], [28.4, 2427.0], [28.5, 2429.0], [28.6, 2434.0], [28.7, 2437.0], [28.8, 2439.0], [28.9, 2439.0], [29.0, 2441.0], [29.1, 2442.0], [29.2, 2442.0], [29.3, 2445.0], [29.4, 2446.0], [29.5, 2449.0], [29.6, 2451.0], [29.7, 2452.0], [29.8, 2454.0], [29.9, 2455.0], [30.0, 2457.0], [30.1, 2460.0], [30.2, 2462.0], [30.3, 2463.0], [30.4, 2464.0], [30.5, 2465.0], [30.6, 2466.0], [30.7, 2468.0], [30.8, 2468.0], [30.9, 2469.0], [31.0, 2470.0], [31.1, 2471.0], [31.2, 2471.0], [31.3, 2472.0], [31.4, 2474.0], [31.5, 2476.0], [31.6, 2480.0], [31.7, 2482.0], [31.8, 2486.0], [31.9, 2493.0], [32.0, 2499.0], [32.1, 2501.0], [32.2, 2505.0], [32.3, 2512.0], [32.4, 2517.0], [32.5, 2521.0], [32.6, 2527.0], [32.7, 2530.0], [32.8, 2536.0], [32.9, 2539.0], [33.0, 2543.0], [33.1, 2547.0], [33.2, 2551.0], [33.3, 2552.0], [33.4, 2556.0], [33.5, 2562.0], [33.6, 2568.0], [33.7, 2573.0], [33.8, 2576.0], [33.9, 2582.0], [34.0, 2590.0], [34.1, 2597.0], [34.2, 2600.0], [34.3, 2606.0], [34.4, 2609.0], [34.5, 2618.0], [34.6, 2623.0], [34.7, 2629.0], [34.8, 2631.0], [34.9, 2636.0], [35.0, 2644.0], [35.1, 2652.0], [35.2, 2656.0], [35.3, 2660.0], [35.4, 2666.0], [35.5, 2675.0], [35.6, 2685.0], [35.7, 2692.0], [35.8, 2697.0], [35.9, 2702.0], [36.0, 2706.0], [36.1, 2712.0], [36.2, 2719.0], [36.3, 2724.0], [36.4, 2732.0], [36.5, 2735.0], [36.6, 2744.0], [36.7, 2747.0], [36.8, 2751.0], [36.9, 2756.0], [37.0, 2764.0], [37.1, 2768.0], [37.2, 2774.0], [37.3, 2777.0], [37.4, 2778.0], [37.5, 2780.0], [37.6, 2781.0], [37.7, 2784.0], [37.8, 2785.0], [37.9, 2788.0], [38.0, 2790.0], [38.1, 2793.0], [38.2, 2796.0], [38.3, 2797.0], [38.4, 2799.0], [38.5, 2802.0], [38.6, 2803.0], [38.7, 2806.0], [38.8, 2808.0], [38.9, 2809.0], [39.0, 2813.0], [39.1, 2815.0], [39.2, 2817.0], [39.3, 2819.0], [39.4, 2821.0], [39.5, 2823.0], [39.6, 2828.0], [39.7, 2837.0], [39.8, 2841.0], [39.9, 2845.0], [40.0, 2847.0], [40.1, 2849.0], [40.2, 2852.0], [40.3, 2853.0], [40.4, 2854.0], [40.5, 2856.0], [40.6, 2857.0], [40.7, 2860.0], [40.8, 2862.0], [40.9, 2865.0], [41.0, 2868.0], [41.1, 2872.0], [41.2, 2874.0], [41.3, 2876.0], [41.4, 2877.0], [41.5, 2878.0], [41.6, 2879.0], [41.7, 2883.0], [41.8, 2884.0], [41.9, 2887.0], [42.0, 2888.0], [42.1, 2889.0], [42.2, 2891.0], [42.3, 2893.0], [42.4, 2895.0], [42.5, 2897.0], [42.6, 2898.0], [42.7, 2899.0], [42.8, 2901.0], [42.9, 2903.0], [43.0, 2905.0], [43.1, 2906.0], [43.2, 2907.0], [43.3, 2909.0], [43.4, 2910.0], [43.5, 2912.0], [43.6, 2914.0], [43.7, 2916.0], [43.8, 2917.0], [43.9, 2918.0], [44.0, 2919.0], [44.1, 2920.0], [44.2, 2921.0], [44.3, 2922.0], [44.4, 2924.0], [44.5, 2924.0], [44.6, 2925.0], [44.7, 2926.0], [44.8, 2927.0], [44.9, 2929.0], [45.0, 2930.0], [45.1, 2932.0], [45.2, 2941.0], [45.3, 2946.0], [45.4, 2950.0], [45.5, 2954.0], [45.6, 2958.0], [45.7, 2962.0], [45.8, 2966.0], [45.9, 2969.0], [46.0, 2974.0], [46.1, 2977.0], [46.2, 2979.0], [46.3, 2983.0], [46.4, 2986.0], [46.5, 2990.0], [46.6, 2994.0], [46.7, 2997.0], [46.8, 2999.0], [46.9, 3000.0], [47.0, 3003.0], [47.1, 3005.0], [47.2, 3008.0], [47.3, 3009.0], [47.4, 3012.0], [47.5, 3014.0], [47.6, 3016.0], [47.7, 3017.0], [47.8, 3019.0], [47.9, 3020.0], [48.0, 3022.0], [48.1, 3023.0], [48.2, 3024.0], [48.3, 3026.0], [48.4, 3027.0], [48.5, 3030.0], [48.6, 3030.0], [48.7, 3031.0], [48.8, 3032.0], [48.9, 3033.0], [49.0, 3034.0], [49.1, 3035.0], [49.2, 3036.0], [49.3, 3036.0], [49.4, 3037.0], [49.5, 3039.0], [49.6, 3040.0], [49.7, 3042.0], [49.8, 3044.0], [49.9, 3045.0], [50.0, 3048.0], [50.1, 3053.0], [50.2, 3059.0], [50.3, 3067.0], [50.4, 3069.0], [50.5, 3073.0], [50.6, 3075.0], [50.7, 3077.0], [50.8, 3082.0], [50.9, 3087.0], [51.0, 3093.0], [51.1, 3098.0], [51.2, 3106.0], [51.3, 3111.0], [51.4, 3114.0], [51.5, 3118.0], [51.6, 3123.0], [51.7, 3129.0], [51.8, 3131.0], [51.9, 3135.0], [52.0, 3139.0], [52.1, 3156.0], [52.2, 3162.0], [52.3, 3169.0], [52.4, 3172.0], [52.5, 3175.0], [52.6, 3178.0], [52.7, 3181.0], [52.8, 3186.0], [52.9, 3196.0], [53.0, 3213.0], [53.1, 3231.0], [53.2, 3244.0], [53.3, 3255.0], [53.4, 3263.0], [53.5, 3274.0], [53.6, 3284.0], [53.7, 3295.0], [53.8, 3313.0], [53.9, 3321.0], [54.0, 3331.0], [54.1, 3341.0], [54.2, 3346.0], [54.3, 3352.0], [54.4, 3362.0], [54.5, 3379.0], [54.6, 3386.0], [54.7, 3391.0], [54.8, 3399.0], [54.9, 3411.0], [55.0, 3431.0], [55.1, 3449.0], [55.2, 3465.0], [55.3, 3476.0], [55.4, 3487.0], [55.5, 3494.0], [55.6, 3499.0], [55.7, 3507.0], [55.8, 3512.0], [55.9, 3517.0], [56.0, 3531.0], [56.1, 3541.0], [56.2, 3546.0], [56.3, 3558.0], [56.4, 3569.0], [56.5, 3580.0], [56.6, 3587.0], [56.7, 3602.0], [56.8, 3610.0], [56.9, 3623.0], [57.0, 3632.0], [57.1, 3641.0], [57.2, 3646.0], [57.3, 3652.0], [57.4, 3661.0], [57.5, 3665.0], [57.6, 3671.0], [57.7, 3680.0], [57.8, 3698.0], [57.9, 3713.0], [58.0, 3725.0], [58.1, 3730.0], [58.2, 3731.0], [58.3, 3735.0], [58.4, 3739.0], [58.5, 3740.0], [58.6, 3741.0], [58.7, 3743.0], [58.8, 3744.0], [58.9, 3745.0], [59.0, 3746.0], [59.1, 3747.0], [59.2, 3748.0], [59.3, 3749.0], [59.4, 3751.0], [59.5, 3752.0], [59.6, 3753.0], [59.7, 3753.0], [59.8, 3754.0], [59.9, 3755.0], [60.0, 3755.0], [60.1, 3756.0], [60.2, 3757.0], [60.3, 3757.0], [60.4, 3758.0], [60.5, 3758.0], [60.6, 3759.0], [60.7, 3760.0], [60.8, 3760.0], [60.9, 3760.0], [61.0, 3761.0], [61.1, 3762.0], [61.2, 3762.0], [61.3, 3762.0], [61.4, 3763.0], [61.5, 3763.0], [61.6, 3764.0], [61.7, 3764.0], [61.8, 3765.0], [61.9, 3765.0], [62.0, 3766.0], [62.1, 3766.0], [62.2, 3766.0], [62.3, 3767.0], [62.4, 3767.0], [62.5, 3768.0], [62.6, 3769.0], [62.7, 3769.0], [62.8, 3771.0], [62.9, 3772.0], [63.0, 3773.0], [63.1, 3774.0], [63.2, 3776.0], [63.3, 3779.0], [63.4, 3781.0], [63.5, 3782.0], [63.6, 3783.0], [63.7, 3785.0], [63.8, 3787.0], [63.9, 3788.0], [64.0, 3790.0], [64.1, 3793.0], [64.2, 3795.0], [64.3, 3799.0], [64.4, 3802.0], [64.5, 3806.0], [64.6, 3808.0], [64.7, 3811.0], [64.8, 3817.0], [64.9, 3818.0], [65.0, 3820.0], [65.1, 3821.0], [65.2, 3822.0], [65.3, 3823.0], [65.4, 3824.0], [65.5, 3825.0], [65.6, 3826.0], [65.7, 3827.0], [65.8, 3828.0], [65.9, 3829.0], [66.0, 3830.0], [66.1, 3830.0], [66.2, 3831.0], [66.3, 3831.0], [66.4, 3832.0], [66.5, 3833.0], [66.6, 3833.0], [66.7, 3834.0], [66.8, 3835.0], [66.9, 3836.0], [67.0, 3837.0], [67.1, 3838.0], [67.2, 3839.0], [67.3, 3840.0], [67.4, 3840.0], [67.5, 3841.0], [67.6, 3843.0], [67.7, 3845.0], [67.8, 3846.0], [67.9, 3847.0], [68.0, 3848.0], [68.1, 3850.0], [68.2, 3851.0], [68.3, 3851.0], [68.4, 3853.0], [68.5, 3855.0], [68.6, 3856.0], [68.7, 3857.0], [68.8, 3859.0], [68.9, 3860.0], [69.0, 3862.0], [69.1, 3863.0], [69.2, 3866.0], [69.3, 3867.0], [69.4, 3868.0], [69.5, 3871.0], [69.6, 3873.0], [69.7, 3875.0], [69.8, 3877.0], [69.9, 3877.0], [70.0, 3878.0], [70.1, 3879.0], [70.2, 3882.0], [70.3, 3883.0], [70.4, 3885.0], [70.5, 3886.0], [70.6, 3887.0], [70.7, 3887.0], [70.8, 3888.0], [70.9, 3889.0], [71.0, 3890.0], [71.1, 3892.0], [71.2, 3893.0], [71.3, 3894.0], [71.4, 3895.0], [71.5, 3897.0], [71.6, 3900.0], [71.7, 3901.0], [71.8, 3903.0], [71.9, 3904.0], [72.0, 3905.0], [72.1, 3906.0], [72.2, 3907.0], [72.3, 3908.0], [72.4, 3909.0], [72.5, 3910.0], [72.6, 3911.0], [72.7, 3912.0], [72.8, 3913.0], [72.9, 3914.0], [73.0, 3914.0], [73.1, 3916.0], [73.2, 3917.0], [73.3, 3918.0], [73.4, 3919.0], [73.5, 3919.0], [73.6, 3920.0], [73.7, 3922.0], [73.8, 3923.0], [73.9, 3925.0], [74.0, 3927.0], [74.1, 3929.0], [74.2, 3934.0], [74.3, 3938.0], [74.4, 3940.0], [74.5, 3975.0], [74.6, 4048.0], [74.7, 4419.0], [74.8, 4516.0], [74.9, 4571.0], [75.0, 4871.0], [75.1, 4981.0], [75.2, 5100.0], [75.3, 5110.0], [75.4, 5122.0], [75.5, 5128.0], [75.6, 5129.0], [75.7, 5134.0], [75.8, 5138.0], [75.9, 5140.0], [76.0, 5141.0], [76.1, 5144.0], [76.2, 5147.0], [76.3, 5150.0], [76.4, 5152.0], [76.5, 5156.0], [76.6, 5162.0], [76.7, 5165.0], [76.8, 5168.0], [76.9, 5169.0], [77.0, 5171.0], [77.1, 5172.0], [77.2, 5174.0], [77.3, 5175.0], [77.4, 5178.0], [77.5, 5180.0], [77.6, 5182.0], [77.7, 5183.0], [77.8, 5190.0], [77.9, 5194.0], [78.0, 5197.0], [78.1, 5203.0], [78.2, 5209.0], [78.3, 5213.0], [78.4, 5215.0], [78.5, 5224.0], [78.6, 5227.0], [78.7, 5233.0], [78.8, 5242.0], [78.9, 5247.0], [79.0, 5256.0], [79.1, 5262.0], [79.2, 5271.0], [79.3, 5275.0], [79.4, 5281.0], [79.5, 5296.0], [79.6, 5304.0], [79.7, 5323.0], [79.8, 5333.0], [79.9, 5341.0], [80.0, 5350.0], [80.1, 5357.0], [80.2, 5366.0], [80.3, 5381.0], [80.4, 5394.0], [80.5, 5403.0], [80.6, 5410.0], [80.7, 5415.0], [80.8, 5425.0], [80.9, 5426.0], [81.0, 5433.0], [81.1, 5438.0], [81.2, 5440.0], [81.3, 5444.0], [81.4, 5447.0], [81.5, 5450.0], [81.6, 5454.0], [81.7, 5461.0], [81.8, 5715.0], [81.9, 5949.0], [82.0, 6071.0], [82.1, 6328.0], [82.2, 6423.0], [82.3, 6497.0], [82.4, 6533.0], [82.5, 6575.0], [82.6, 6602.0], [82.7, 6620.0], [82.8, 6641.0], [82.9, 6668.0], [83.0, 6685.0], [83.1, 6710.0], [83.2, 6779.0], [83.3, 6875.0], [83.4, 7037.0], [83.5, 7186.0], [83.6, 7300.0], [83.7, 7371.0], [83.8, 7436.0], [83.9, 7495.0], [84.0, 7520.0], [84.1, 7572.0], [84.2, 7591.0], [84.3, 7608.0], [84.4, 7626.0], [84.5, 7645.0], [84.6, 7669.0], [84.7, 7727.0], [84.8, 8008.0], [84.9, 8301.0], [85.0, 8711.0], [85.1, 8869.0], [85.2, 8963.0], [85.3, 9108.0], [85.4, 9503.0], [85.5, 9828.0], [85.6, 9899.0], [85.7, 10100.0], [85.8, 10202.0], [85.9, 10397.0], [86.0, 10465.0], [86.1, 10545.0], [86.2, 10896.0], [86.3, 11115.0], [86.4, 11324.0], [86.5, 11538.0], [86.6, 11779.0], [86.7, 12095.0], [86.8, 12272.0], [86.9, 12331.0], [87.0, 12394.0], [87.1, 12461.0], [87.2, 12510.0], [87.3, 12538.0], [87.4, 12585.0], [87.5, 12610.0], [87.6, 12643.0], [87.7, 12667.0], [87.8, 12693.0], [87.9, 12733.0], [88.0, 12760.0], [88.1, 12780.0], [88.2, 12828.0], [88.3, 12858.0], [88.4, 12870.0], [88.5, 12881.0], [88.6, 12902.0], [88.7, 12925.0], [88.8, 12940.0], [88.9, 12965.0], [89.0, 12983.0], [89.1, 13005.0], [89.2, 13023.0], [89.3, 13059.0], [89.4, 13075.0], [89.5, 13097.0], [89.6, 13111.0], [89.7, 13151.0], [89.8, 13163.0], [89.9, 13168.0], [90.0, 13179.0], [90.1, 13214.0], [90.2, 13235.0], [90.3, 13262.0], [90.4, 13272.0], [90.5, 13279.0], [90.6, 13294.0], [90.7, 13305.0], [90.8, 13316.0], [90.9, 13328.0], [91.0, 13338.0], [91.1, 13359.0], [91.2, 13368.0], [91.3, 13376.0], [91.4, 13384.0], [91.5, 13405.0], [91.6, 13420.0], [91.7, 13437.0], [91.8, 13452.0], [91.9, 13463.0], [92.0, 13483.0], [92.1, 13491.0], [92.2, 13515.0], [92.3, 13528.0], [92.4, 13546.0], [92.5, 13568.0], [92.6, 13580.0], [92.7, 13597.0], [92.8, 13611.0], [92.9, 13634.0], [93.0, 13655.0], [93.1, 13692.0], [93.2, 13722.0], [93.3, 13769.0], [93.4, 13813.0], [93.5, 13867.0], [93.6, 13918.0], [93.7, 13980.0], [93.8, 14018.0], [93.9, 14056.0], [94.0, 14095.0], [94.1, 14143.0], [94.2, 14189.0], [94.3, 14239.0], [94.4, 14272.0], [94.5, 14293.0], [94.6, 14305.0], [94.7, 14325.0], [94.8, 14341.0], [94.9, 14360.0], [95.0, 14378.0], [95.1, 14398.0], [95.2, 14414.0], [95.3, 14433.0], [95.4, 14453.0], [95.5, 14471.0], [95.6, 14493.0], [95.7, 14509.0], [95.8, 14525.0], [95.9, 14546.0], [96.0, 14575.0], [96.1, 14585.0], [96.2, 14593.0], [96.3, 14602.0], [96.4, 14613.0], [96.5, 14635.0], [96.6, 14656.0], [96.7, 14664.0], [96.8, 14676.0], [96.9, 14686.0], [97.0, 14703.0], [97.1, 14728.0], [97.2, 14744.0], [97.3, 14770.0], [97.4, 14790.0], [97.5, 14827.0], [97.6, 14853.0], [97.7, 14872.0], [97.8, 14952.0], [97.9, 15028.0], [98.0, 15102.0], [98.1, 15183.0], [98.2, 15219.0], [98.3, 15296.0], [98.4, 15473.0], [98.5, 15665.0], [98.6, 15931.0], [98.7, 16052.0], [98.8, 16121.0], [98.9, 16170.0], [99.0, 16241.0], [99.1, 16272.0], [99.2, 16366.0], [99.3, 18243.0], [99.4, 18446.0], [99.5, 18548.0], [99.6, 18640.0], [99.7, 18788.0], [99.8, 19060.0], [99.9, 27049.0], [100.0, 38804.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 579.0, "series": [{"data": [[100.0, 109.0], [200.0, 67.0], [300.0, 55.0], [400.0, 38.0], [500.0, 33.0], [600.0, 51.0], [700.0, 49.0], [800.0, 17.0], [900.0, 68.0], [1000.0, 27.0], [1100.0, 42.0], [1200.0, 9.0], [1300.0, 24.0], [1400.0, 50.0], [1500.0, 56.0], [1600.0, 8.0], [1700.0, 5.0], [1800.0, 121.0], [1900.0, 268.0], [2000.0, 287.0], [2100.0, 196.0], [2200.0, 95.0], [2300.0, 487.0], [2400.0, 400.0], [2500.0, 173.0], [2600.0, 132.0], [2700.0, 207.0], [2800.0, 343.0], [2900.0, 331.0], [3000.0, 341.0], [3100.0, 144.0], [3200.0, 66.0], [3300.0, 85.0], [3400.0, 64.0], [3500.0, 85.0], [3600.0, 91.0], [3700.0, 524.0], [3800.0, 579.0], [3900.0, 236.0], [4000.0, 8.0], [4200.0, 3.0], [4100.0, 1.0], [4500.0, 13.0], [4400.0, 6.0], [4600.0, 1.0], [4800.0, 6.0], [5100.0, 230.0], [5000.0, 3.0], [4900.0, 10.0], [5200.0, 120.0], [5300.0, 70.0], [5400.0, 103.0], [5500.0, 3.0], [5600.0, 2.0], [5700.0, 6.0], [5800.0, 3.0], [5900.0, 4.0], [6000.0, 6.0], [6100.0, 1.0], [6200.0, 2.0], [6300.0, 9.0], [6600.0, 40.0], [6400.0, 12.0], [6500.0, 21.0], [6800.0, 10.0], [6900.0, 3.0], [6700.0, 11.0], [7000.0, 5.0], [7100.0, 7.0], [7300.0, 13.0], [7400.0, 13.0], [7200.0, 5.0], [7600.0, 35.0], [7500.0, 26.0], [7700.0, 4.0], [7900.0, 1.0], [7800.0, 4.0], [8000.0, 4.0], [8100.0, 1.0], [8200.0, 3.0], [8600.0, 3.0], [8700.0, 5.0], [8300.0, 4.0], [8500.0, 1.0], [8900.0, 7.0], [9200.0, 1.0], [9100.0, 4.0], [9000.0, 4.0], [8800.0, 8.0], [9500.0, 3.0], [9700.0, 3.0], [9300.0, 1.0], [9400.0, 2.0], [9600.0, 1.0], [9800.0, 10.0], [10100.0, 8.0], [9900.0, 5.0], [10000.0, 2.0], [10200.0, 5.0], [10600.0, 2.0], [10500.0, 6.0], [10400.0, 11.0], [10300.0, 4.0], [10700.0, 2.0], [11100.0, 5.0], [11000.0, 5.0], [11200.0, 3.0], [10800.0, 3.0], [10900.0, 2.0], [11300.0, 6.0], [11400.0, 2.0], [11500.0, 4.0], [11600.0, 2.0], [11700.0, 3.0], [11900.0, 2.0], [12000.0, 3.0], [12100.0, 2.0], [12200.0, 8.0], [11800.0, 3.0], [12600.0, 30.0], [12700.0, 26.0], [12400.0, 10.0], [12300.0, 16.0], [12500.0, 22.0], [12800.0, 37.0], [12900.0, 39.0], [13000.0, 35.0], [13100.0, 46.0], [13200.0, 46.0], [13300.0, 64.0], [13400.0, 54.0], [13500.0, 47.0], [13600.0, 30.0], [13700.0, 20.0], [13800.0, 17.0], [13900.0, 14.0], [14000.0, 23.0], [14100.0, 16.0], [14200.0, 27.0], [14300.0, 43.0], [14400.0, 45.0], [14500.0, 48.0], [14600.0, 54.0], [14700.0, 41.0], [14800.0, 25.0], [14900.0, 9.0], [15000.0, 9.0], [15100.0, 15.0], [15200.0, 10.0], [15300.0, 2.0], [15400.0, 8.0], [15500.0, 2.0], [15600.0, 5.0], [15800.0, 5.0], [16000.0, 8.0], [16100.0, 13.0], [16200.0, 17.0], [15900.0, 6.0], [16300.0, 6.0], [17100.0, 1.0], [16600.0, 1.0], [16500.0, 2.0], [16800.0, 2.0], [18200.0, 2.0], [18300.0, 3.0], [18400.0, 5.0], [17500.0, 1.0], [18700.0, 7.0], [18800.0, 6.0], [18500.0, 13.0], [18600.0, 4.0], [19100.0, 1.0], [19200.0, 1.0], [19000.0, 1.0], [21600.0, 1.0], [22500.0, 2.0], [22600.0, 1.0], [26800.0, 1.0], [27000.0, 1.0], [27300.0, 1.0], [28500.0, 1.0], [28700.0, 1.0], [32400.0, 1.0], [32600.0, 1.0], [32500.0, 1.0], [34200.0, 1.0], [38800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 38800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 269.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7359.0, "series": [{"data": [[0.0, 269.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 372.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7359.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 566.7534354142127, "minX": 1.6967469E12, "maxY": 999.2820465798637, "series": [{"data": [[1.6967469E12, 999.2820465798637], [1.69674696E12, 566.7534354142127]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69674696E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 107.0, "minX": 1.0, "maxY": 10582.0, "series": [{"data": [[2.0, 4175.666666666667], [3.0, 5707.666666666666], [4.0, 4203.5], [5.0, 7004.0], [6.0, 113.0], [7.0, 108.0], [8.0, 114.0], [9.0, 237.57142857142858], [10.0, 112.0], [11.0, 8031.499999999999], [12.0, 9273.4], [13.0, 120.0], [14.0, 3095.5], [15.0, 2179.333333333333], [16.0, 215.0], [17.0, 6646.333333333333], [18.0, 2408.6666666666665], [19.0, 6872.0], [20.0, 10203.0], [21.0, 140.0], [22.0, 2466.5], [23.0, 109.5], [24.0, 1254.25], [25.0, 193.0], [26.0, 181.66666666666666], [27.0, 154.6], [28.0, 5930.833333333333], [29.0, 213.0], [30.0, 7990.5], [31.0, 4897.857142857142], [33.0, 111.0], [32.0, 224.5], [35.0, 117.0], [34.0, 144.0], [37.0, 110.5], [36.0, 115.0], [39.0, 112.0], [38.0, 114.0], [41.0, 109.0], [40.0, 107.0], [43.0, 114.0], [42.0, 112.0], [45.0, 114.0], [44.0, 207.75], [47.0, 114.0], [46.0, 114.0], [49.0, 111.0], [48.0, 113.0], [53.0, 118.16666666666666], [55.0, 110.0], [54.0, 117.0], [57.0, 117.0], [56.0, 108.5], [59.0, 117.0], [58.0, 189.0], [60.0, 116.33333333333333], [62.0, 114.5], [67.0, 212.42857142857142], [66.0, 277.0], [64.0, 4204.75], [71.0, 220.33333333333334], [68.0, 293.5], [75.0, 224.6], [72.0, 213.25], [79.0, 230.0], [78.0, 229.0], [76.0, 224.0], [83.0, 229.0], [82.0, 232.0], [81.0, 223.0], [80.0, 252.66666666666666], [87.0, 241.0], [86.0, 838.8], [85.0, 1710.5], [84.0, 254.5], [91.0, 257.0], [90.0, 237.33333333333334], [88.0, 265.0], [94.0, 258.0], [93.0, 261.5], [92.0, 249.0], [98.0, 279.0], [97.0, 280.0], [96.0, 275.0], [103.0, 320.0], [101.0, 277.0], [100.0, 318.3333333333333], [107.0, 313.75], [106.0, 304.0], [105.0, 440.8], [104.0, 293.0], [111.0, 348.3333333333333], [110.0, 345.0], [109.0, 537.0], [108.0, 317.0], [115.0, 400.0], [114.0, 398.5], [113.0, 386.8333333333333], [112.0, 354.0], [119.0, 406.25], [118.0, 1877.8], [117.0, 1041.25], [116.0, 402.25], [123.0, 1694.0], [122.0, 397.0], [121.0, 397.0], [120.0, 1738.0], [127.0, 5522.333333333333], [125.0, 2646.8571428571427], [124.0, 398.6666666666667], [135.0, 493.0], [134.0, 461.0], [133.0, 458.0], [132.0, 458.0], [131.0, 447.3333333333333], [129.0, 438.0], [128.0, 7523.0], [143.0, 532.0], [142.0, 525.0], [141.0, 519.0], [140.0, 3606.6], [138.0, 513.0], [137.0, 514.0], [136.0, 507.0], [151.0, 546.0], [149.0, 532.6666666666666], [148.0, 529.0], [147.0, 536.0], [145.0, 547.6666666666666], [156.0, 621.0], [155.0, 591.0], [153.0, 571.75], [152.0, 548.0], [167.0, 634.0], [166.0, 635.0], [165.0, 6458.5], [164.0, 3813.6], [163.0, 628.0], [162.0, 621.3333333333334], [160.0, 617.0], [175.0, 635.0], [174.0, 634.5], [173.0, 934.2], [172.0, 652.3333333333334], [171.0, 638.0], [170.0, 3844.2], [169.0, 637.0], [168.0, 634.0], [183.0, 663.0], [182.0, 673.3333333333334], [180.0, 649.0], [179.0, 8482.5], [178.0, 658.5], [176.0, 640.0], [190.0, 708.0], [189.0, 704.0], [188.0, 3658.5], [186.0, 667.0], [185.0, 671.0], [184.0, 669.0], [199.0, 726.0], [198.0, 728.0], [197.0, 720.0], [196.0, 721.5], [195.0, 706.0], [194.0, 710.0], [193.0, 711.0], [192.0, 730.0], [207.0, 754.0], [206.0, 751.0], [205.0, 750.0], [204.0, 8175.0], [203.0, 742.0], [202.0, 739.0], [201.0, 738.0], [200.0, 731.5], [215.0, 1215.75], [214.0, 779.6666666666666], [213.0, 766.6666666666666], [212.0, 763.0], [211.0, 762.0], [210.0, 757.0], [209.0, 4297.25], [208.0, 755.0], [223.0, 867.0], [222.0, 846.0], [221.0, 835.0], [220.0, 890.5], [219.0, 3204.6250000000005], [217.0, 1666.5], [231.0, 970.0], [230.0, 903.0], [229.0, 1559.3333333333335], [228.0, 891.0], [227.0, 879.0], [226.0, 1516.6666666666667], [225.0, 876.0], [224.0, 869.0], [239.0, 926.0], [238.0, 945.0], [236.0, 905.0], [235.0, 919.0], [234.0, 899.75], [232.0, 903.0], [247.0, 966.0], [246.0, 945.0], [244.0, 945.0], [243.0, 940.0], [242.0, 946.3333333333334], [241.0, 931.0], [240.0, 956.0], [255.0, 967.0], [254.0, 961.5], [253.0, 962.0], [252.0, 949.75], [250.0, 946.0], [249.0, 944.0], [270.0, 1017.6666666666667], [269.0, 1006.5], [257.0, 962.0], [267.0, 988.5], [266.0, 978.3333333333334], [265.0, 984.5], [264.0, 989.0], [263.0, 2791.875], [262.0, 969.0], [260.0, 966.6666666666666], [284.0, 1102.0], [287.0, 1105.0], [286.0, 1115.0], [285.0, 4674.25], [283.0, 1375.25], [279.0, 1079.5], [277.0, 1070.2], [275.0, 1050.0], [274.0, 1092.0], [273.0, 1043.0], [272.0, 1364.3333333333335], [302.0, 1159.25], [303.0, 1160.25], [300.0, 1136.0], [289.0, 1117.5], [288.0, 1121.0], [299.0, 1134.0], [298.0, 1136.0], [297.0, 1129.5], [295.0, 1130.0], [293.0, 1129.0], [292.0, 1689.0], [318.0, 1362.25], [319.0, 1367.0], [317.0, 1357.5], [316.0, 1353.0], [315.0, 1334.5], [314.0, 3118.714285714286], [313.0, 1222.0], [312.0, 1203.0], [311.0, 1191.0], [305.0, 1166.0], [304.0, 5572.333333333334], [307.0, 1171.5], [306.0, 1167.0], [310.0, 1192.0], [309.0, 1183.5], [308.0, 1183.3333333333333], [333.0, 1442.0], [334.0, 1448.0], [332.0, 1435.0], [323.0, 1415.75], [322.0, 5813.300000000001], [320.0, 1362.0], [331.0, 1437.0], [330.0, 1420.3333333333333], [329.0, 1416.0], [328.0, 1416.5], [327.0, 1403.5], [326.0, 1406.0], [325.0, 1405.0], [324.0, 1410.0], [350.0, 1477.5], [351.0, 1479.5], [349.0, 1480.0], [348.0, 1473.5], [347.0, 2196.0], [346.0, 4682.25], [344.0, 1496.0], [342.0, 1493.0], [337.0, 1501.0], [336.0, 1465.5], [341.0, 1471.0], [366.0, 1517.5], [367.0, 1508.0], [365.0, 1511.0], [364.0, 1513.0], [363.0, 1508.0], [362.0, 1513.6], [361.0, 1511.0], [360.0, 1512.0], [359.0, 1514.75], [352.0, 1480.6666666666667], [355.0, 1501.0], [354.0, 1493.1666666666665], [358.0, 1502.0], [357.0, 1504.3333333333333], [356.0, 1495.0], [382.0, 1824.8], [383.0, 1822.6666666666667], [381.0, 5387.0], [380.0, 1685.7142857142858], [379.0, 1607.6666666666667], [378.0, 1602.0], [377.0, 1596.0], [376.0, 1588.75], [375.0, 6971.5], [369.0, 1522.0], [368.0, 1521.0], [371.0, 1545.5], [370.0, 1532.6666666666667], [374.0, 1588.0], [373.0, 1561.8333333333333], [372.0, 5259.333333333333], [397.0, 1849.0], [398.0, 1852.0], [396.0, 1845.0], [387.0, 1822.3333333333333], [386.0, 1824.0], [385.0, 1819.0], [384.0, 1821.0], [395.0, 1843.0], [394.0, 1840.0], [393.0, 1839.3333333333333], [392.0, 1839.0], [391.0, 1831.5], [390.0, 1823.0], [388.0, 1822.0], [414.0, 1880.875], [415.0, 1879.5], [412.0, 1879.0], [403.0, 4916.0], [402.0, 1855.0], [401.0, 1848.0], [400.0, 1856.6666666666667], [411.0, 1881.0], [410.0, 1877.75], [408.0, 3055.5], [407.0, 1878.6666666666667], [406.0, 1865.0], [405.0, 1887.6666666666667], [404.0, 1874.75], [430.0, 1902.0], [431.0, 1903.0], [429.0, 1902.0], [428.0, 1908.2857142857142], [427.0, 1919.25], [426.0, 1912.75], [425.0, 1913.5], [424.0, 1908.0], [423.0, 2494.5], [417.0, 1887.0], [416.0, 1884.6666666666667], [419.0, 1900.1666666666665], [418.0, 1887.6666666666667], [422.0, 1902.0], [421.0, 1908.3333333333333], [420.0, 1911.3333333333333], [446.0, 1891.0], [447.0, 1894.5], [445.0, 1895.0], [444.0, 1896.0], [443.0, 1901.5], [442.0, 1895.5], [441.0, 1902.0], [440.0, 1913.0], [439.0, 1901.0], [433.0, 5803.0], [435.0, 1917.6666666666667], [434.0, 3575.2857142857147], [437.0, 1900.0], [436.0, 1914.0], [451.0, 1887.0], [463.0, 1899.75], [462.0, 1901.8333333333333], [457.0, 1891.0], [456.0, 1887.6666666666667], [455.0, 3814.0000000000005], [454.0, 1883.0], [453.0, 1884.0], [452.0, 1886.0], [450.0, 1886.5], [449.0, 1887.6666666666667], [448.0, 1895.0], [478.0, 1937.0], [479.0, 1934.0], [477.0, 1939.0], [476.0, 1937.0], [475.0, 1935.0], [474.0, 1934.0], [473.0, 1935.6666666666667], [472.0, 1933.0], [471.0, 1924.0], [464.0, 1904.0], [467.0, 1902.3333333333333], [465.0, 1905.0], [470.0, 1925.0], [469.0, 1919.0], [468.0, 1915.4], [493.0, 1939.3333333333333], [495.0, 1939.0], [492.0, 1933.0], [482.0, 1950.0], [481.0, 1934.0], [480.0, 1932.3333333333333], [491.0, 1937.6666666666667], [490.0, 3195.166666666667], [489.0, 1943.0], [488.0, 1940.3333333333333], [487.0, 1939.0], [486.0, 1943.0], [485.0, 1939.0], [484.0, 1949.0], [510.0, 1928.0], [511.0, 5435.5], [509.0, 1930.0], [508.0, 1933.0], [507.0, 1934.0], [506.0, 1932.0], [505.0, 1934.0], [504.0, 1930.0], [503.0, 1929.0], [496.0, 1942.0], [498.0, 1934.5], [497.0, 4993.25], [502.0, 1927.0], [501.0, 1927.5], [500.0, 1937.75], [539.0, 1951.5], [532.0, 1960.0], [542.0, 1956.0], [528.0, 1940.5], [537.0, 1945.3333333333333], [536.0, 1947.5], [526.0, 1948.3333333333333], [513.0, 1930.0], [515.0, 1939.0], [514.0, 1944.0], [519.0, 1943.0], [516.0, 1931.0], [524.0, 1938.0], [521.0, 3581.6], [535.0, 1946.5], [534.0, 1944.0], [533.0, 1961.0], [531.0, 1958.0], [530.0, 1957.0], [569.0, 1991.0], [561.0, 1972.0], [573.0, 1980.6666666666667], [574.0, 1989.0], [560.0, 1967.0], [571.0, 6098.333333333333], [568.0, 1981.0], [551.0, 1956.0], [550.0, 1955.0], [549.0, 1948.6], [547.0, 8260.0], [546.0, 1943.5], [545.0, 1947.0], [544.0, 1944.5], [559.0, 1970.0], [558.0, 1964.6666666666667], [557.0, 4183.625], [555.0, 1964.0], [554.0, 4620.333333333333], [552.0, 1955.0], [566.0, 1970.5], [563.0, 1971.0], [562.0, 1975.0], [600.0, 2026.3333333333333], [604.0, 2028.6666666666667], [607.0, 2032.0], [593.0, 2013.5], [592.0, 2008.0], [596.0, 2019.6], [594.0, 2007.5], [606.0, 2033.5], [605.0, 2027.5], [603.0, 2029.0], [602.0, 2026.5], [601.0, 2026.0], [591.0, 2025.0], [576.0, 1987.0], [578.0, 6188.5], [577.0, 5757.0], [580.0, 1989.0], [579.0, 3899.0], [583.0, 4394.0], [581.0, 1993.0], [590.0, 2017.0], [589.0, 3466.0], [586.0, 2000.0], [585.0, 2022.0], [584.0, 2013.0], [599.0, 2027.5], [597.0, 2031.0], [632.0, 2091.0], [638.0, 2100.5], [639.0, 2116.0], [625.0, 2073.5], [624.0, 2077.5], [627.0, 2079.0], [626.0, 2075.5], [636.0, 2101.4], [635.0, 2098.0], [633.0, 3994.8333333333335], [623.0, 2088.0], [609.0, 2039.0], [608.0, 2029.5], [611.0, 2043.0], [610.0, 5747.333333333334], [613.0, 2045.0], [612.0, 2043.5], [615.0, 2049.0], [614.0, 3593.4999999999995], [622.0, 2075.3333333333335], [621.0, 2074.5], [620.0, 2070.3333333333335], [619.0, 2070.0], [618.0, 3861.2], [617.0, 2060.5], [616.0, 2052.0], [631.0, 2348.222222222222], [630.0, 2078.0], [629.0, 2093.0], [628.0, 3597.0], [664.0, 2111.0], [668.0, 2129.0], [669.0, 2126.0], [659.0, 2119.0], [657.0, 2116.0], [667.0, 2124.0], [666.0, 2123.0], [665.0, 2120.5], [655.0, 2115.0], [641.0, 2104.3333333333335], [643.0, 2106.0], [642.0, 2096.0], [645.0, 2747.0], [644.0, 2112.5], [647.0, 2107.6666666666665], [646.0, 2108.0], [654.0, 2139.3333333333335], [652.0, 2114.0], [651.0, 2112.0], [650.0, 2117.0], [649.0, 2113.6666666666665], [648.0, 2106.3333333333335], [663.0, 2118.0], [662.0, 2122.5], [661.0, 2118.3333333333335], [660.0, 2119.3333333333335], [698.0, 2153.0], [702.0, 2157.6666666666665], [703.0, 2155.0], [692.0, 2155.25], [689.0, 2160.0], [701.0, 2155.0], [700.0, 2157.0], [699.0, 2160.0], [697.0, 2163.5], [679.0, 2144.0], [678.0, 2144.6666666666665], [677.0, 2138.0], [676.0, 2139.0], [675.0, 2135.0], [674.0, 2130.0], [673.0, 2130.0], [672.0, 2139.75], [687.0, 2173.0], [686.0, 2151.0], [684.0, 2161.0], [682.0, 2152.0], [681.0, 2149.0], [695.0, 2155.0], [693.0, 2155.0], [732.0, 2162.0], [735.0, 2170.0], [721.0, 2163.0], [720.0, 2179.5], [723.0, 2160.0], [722.0, 6030.0], [725.0, 2159.0], [724.0, 2188.0], [734.0, 2168.0], [733.0, 4314.5], [731.0, 2157.0], [730.0, 2167.0], [729.0, 2156.0], [728.0, 2157.0], [718.0, 2168.5], [706.0, 2156.5], [704.0, 2153.0], [708.0, 2162.0], [707.0, 2162.0], [711.0, 2174.5], [709.0, 2162.5], [716.0, 6640.0], [715.0, 2165.0], [714.0, 2162.0], [713.0, 2161.0], [712.0, 2161.0], [727.0, 2159.5], [726.0, 2164.6666666666665], [760.0, 2215.4], [766.0, 2214.0], [767.0, 2212.0], [765.0, 2215.5], [763.0, 2217.0], [761.0, 2211.0], [751.0, 4960.666666666667], [737.0, 2175.0], [736.0, 2171.0], [739.0, 2178.0], [738.0, 2176.0], [741.0, 2185.0], [740.0, 2180.0], [743.0, 2186.0], [742.0, 2191.0], [749.0, 2190.0], [748.0, 2189.0], [747.0, 2192.0], [746.0, 2189.5], [745.0, 2188.0], [744.0, 2184.0], [756.0, 2200.0], [755.0, 2204.0], [753.0, 2200.0], [752.0, 2194.0], [793.0, 2366.2], [798.0, 2337.0], [799.0, 2348.5], [785.0, 2294.5], [784.0, 2286.0], [787.0, 2332.0], [786.0, 6124.714285714285], [789.0, 2341.0], [788.0, 2337.5], [797.0, 2704.6956521739125], [796.0, 2373.0], [795.0, 3352.333333333333], [792.0, 2363.0], [775.0, 4488.5], [774.0, 2248.0], [772.0, 4249.333333333333], [771.0, 2236.25], [770.0, 7159.0], [769.0, 2220.0], [768.0, 2214.0], [783.0, 2283.0], [782.0, 2278.0], [781.0, 2281.25], [780.0, 4449.75], [779.0, 2268.0], [778.0, 2260.0], [777.0, 3915.0], [776.0, 2258.0], [791.0, 2357.6], [790.0, 5641.4], [828.0, 2377.0], [831.0, 2389.0625], [817.0, 3915.5], [816.0, 2320.166666666667], [819.0, 3912.7727272727275], [818.0, 2796.2142857142862], [821.0, 2329.0], [820.0, 2333.5], [830.0, 2383.7], [829.0, 2380.1538461538466], [827.0, 3374.25], [826.0, 3514.222222222222], [825.0, 2366.6666666666665], [824.0, 2362.666666666667], [815.0, 2320.0], [801.0, 2353.5], [800.0, 2354.6666666666665], [803.0, 2344.0], [802.0, 4003.8529411764707], [805.0, 2339.777777777778], [804.0, 4287.5], [807.0, 3595.7999999999993], [806.0, 3277.5454545454545], [814.0, 2324.0], [813.0, 3979.75], [812.0, 2326.0], [810.0, 4091.0], [809.0, 2329.375], [808.0, 2919.2727272727275], [823.0, 2889.1379310344823], [822.0, 2942.7391304347825], [860.0, 2450.0], [863.0, 2452.0], [849.0, 2428.5], [848.0, 2429.0], [851.0, 4295.2], [850.0, 5571.0], [853.0, 2440.0], [852.0, 2438.0], [862.0, 2451.1666666666665], [861.0, 2453.0], [859.0, 3701.6], [858.0, 2452.0], [857.0, 2446.3], [856.0, 2441.5], [847.0, 2432.0], [833.0, 2575.875], [832.0, 2406.6363636363635], [835.0, 2418.571428571429], [834.0, 2399.0], [837.0, 2385.2], [836.0, 4389.5], [839.0, 3460.314285714286], [838.0, 2375.0], [846.0, 2430.0], [845.0, 2424.5], [844.0, 3257.25], [843.0, 3748.9999999999995], [842.0, 2402.0], [841.0, 2400.0], [840.0, 2402.0], [855.0, 5800.0], [854.0, 2437.0], [892.0, 2650.75], [895.0, 2660.0], [880.0, 5902.5], [883.0, 2614.5], [882.0, 2602.5], [885.0, 2621.0], [884.0, 2621.0], [894.0, 2657.75], [893.0, 2654.5], [891.0, 2644.75], [890.0, 2636.3333333333335], [889.0, 2633.0], [888.0, 2634.0], [879.0, 3370.75], [865.0, 2460.823529411765], [864.0, 2453.5], [867.0, 2470.333333333334], [866.0, 2469.714285714286], [869.0, 2473.0], [868.0, 3821.25], [871.0, 3357.2727272727275], [870.0, 4634.4375], [878.0, 3472.285714285714], [877.0, 2561.0], [876.0, 2550.6666666666665], [875.0, 2552.0], [874.0, 2550.3333333333335], [873.0, 2546.1111111111113], [872.0, 2525.25], [887.0, 3691.0], [886.0, 5806.0], [920.0, 4461.333333333333], [924.0, 2736.0], [927.0, 6640.0], [912.0, 5085.0], [914.0, 2702.0], [913.0, 2709.0], [926.0, 3837.6666666666665], [925.0, 2733.0], [923.0, 2735.0], [922.0, 2724.0], [921.0, 4138.5], [911.0, 10582.0], [897.0, 2665.0], [896.0, 2661.0], [899.0, 2662.0], [898.0, 2663.0], [901.0, 2663.0], [900.0, 4308.5], [903.0, 2666.0], [902.0, 2663.0], [910.0, 2690.5], [909.0, 2687.0], [908.0, 2679.0], [907.0, 2680.0], [906.0, 2675.0], [905.0, 7256.25], [904.0, 2666.0], [917.0, 2704.0], [916.0, 2711.3333333333335], [953.0, 2799.0], [958.0, 2806.0], [959.0, 2804.0], [945.0, 2785.0], [944.0, 6305.5], [947.0, 2790.0], [946.0, 2788.5], [949.0, 2797.0], [948.0, 2798.0], [957.0, 2808.0], [956.0, 2803.0], [955.0, 2807.5], [952.0, 2797.0], [935.0, 2773.0], [934.0, 2766.2], [933.0, 5171.0], [932.0, 2747.0], [931.0, 4611.25], [930.0, 2754.0], [929.0, 4679.5], [928.0, 2736.0], [943.0, 2803.0], [942.0, 2789.0], [941.0, 2787.0], [940.0, 2781.0], [939.0, 2776.0], [938.0, 2784.0], [936.0, 2777.0], [951.0, 2798.0], [950.0, 2797.0], [988.0, 2821.0], [991.0, 4446.9758713136725], [977.0, 2804.3333333333335], [979.0, 2806.0], [978.0, 2802.0], [981.0, 3400.5], [980.0, 2816.0], [990.0, 2820.0], [989.0, 2844.0], [987.0, 2862.25], [986.0, 2828.6666666666665], [985.0, 5022.2], [984.0, 2820.3333333333335], [975.0, 2807.666666666667], [960.0, 2807.0], [962.0, 2805.5], [961.0, 2802.0], [964.0, 2797.5], [963.0, 2803.0], [967.0, 2796.0], [966.0, 5822.833333333333], [971.0, 3689.5], [969.0, 2797.5], [968.0, 2795.0], [983.0, 2817.3333333333335], [982.0, 2822.0], [1000.0, 5820.162566625661], [999.0, 4494.75], [998.0, 3247.875], [997.0, 3640.0390625], [996.0, 4236.085714285714], [995.0, 2975.0], [994.0, 3894.538461538461], [993.0, 4700.18367346939], [992.0, 5638.0], [1.0, 8031.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[861.5757500000025, 4668.206874999997]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8218.633333333333, "minX": 1.6967469E12, "maxY": 333303.7, "series": [{"data": [[1.6967469E12, 333303.7], [1.69674696E12, 109025.43333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6967469E12, 12631.366666666667], [1.69674696E12, 8218.633333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69674696E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2568.0918727915127, "minX": 1.6967469E12, "maxY": 5649.133504492932, "series": [{"data": [[1.6967469E12, 5649.133504492932], [1.69674696E12, 2568.0918727915127]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69674696E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2565.019630938357, "minX": 1.6967469E12, "maxY": 5646.3829084907275, "series": [{"data": [[1.6967469E12, 5646.3829084907275], [1.69674696E12, 2565.019630938357]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69674696E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.981939536709879, "minX": 1.6967469E12, "maxY": 1800.714102329, "series": [{"data": [[1.6967469E12, 1800.714102329], [1.69674696E12, 6.981939536709879]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69674696E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 107.0, "minX": 1.6967469E12, "maxY": 38804.0, "series": [{"data": [[1.6967469E12, 32696.0], [1.69674696E12, 38804.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6967469E12, 1888.0], [1.69674696E12, 107.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6967469E12, 13569.800000000001], [1.69674696E12, 2821.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6967469E12, 16332.82], [1.69674696E12, 15763.999999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6967469E12, 3778.0], [1.69674696E12, 2149.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.6967469E12, 14585.0], [1.69674696E12, 9352.799999999974]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69674696E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 111.0, "minX": 1.0, "maxY": 15296.0, "series": [{"data": [[2.0, 250.0], [3.0, 325.0], [83.0, 15296.0], [121.0, 2554.5], [170.0, 3887.0], [191.0, 3827.0], [196.0, 3834.5], [193.0, 3914.0], [13.0, 11298.0], [211.0, 3755.0], [219.0, 3889.0], [236.0, 3004.0], [241.0, 3005.5], [246.0, 3468.5], [16.0, 12404.5], [265.0, 3766.0], [1.0, 12028.0], [277.0, 2086.0], [290.0, 3075.0], [288.0, 2916.0], [339.0, 2464.0], [341.0, 2381.0], [21.0, 281.5], [360.0, 3031.0], [357.0, 1837.0], [23.0, 111.0], [392.0, 13072.0], [385.0, 2325.0], [405.0, 2014.0], [423.0, 14297.0], [420.0, 754.5], [442.0, 5275.5], [439.0, 2719.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 442.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 111.0, "minX": 1.0, "maxY": 15296.0, "series": [{"data": [[2.0, 250.0], [3.0, 325.0], [83.0, 15296.0], [121.0, 2554.5], [170.0, 3887.0], [191.0, 3827.0], [196.0, 3834.5], [193.0, 3914.0], [13.0, 11298.0], [211.0, 3755.0], [219.0, 3889.0], [236.0, 3004.0], [241.0, 3005.5], [246.0, 3468.5], [16.0, 12404.5], [265.0, 3766.0], [1.0, 12028.0], [277.0, 2086.0], [290.0, 3075.0], [288.0, 2916.0], [339.0, 2464.0], [341.0, 2381.0], [21.0, 233.0], [360.0, 3031.0], [357.0, 1837.0], [23.0, 111.0], [392.0, 13072.0], [385.0, 2324.0], [405.0, 2013.0], [423.0, 14297.0], [420.0, 754.0], [442.0, 5275.5], [439.0, 2719.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 442.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.933333333333334, "minX": 1.6967469E12, "maxY": 107.4, "series": [{"data": [[1.6967469E12, 107.4], [1.69674696E12, 25.933333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69674696E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 42.45, "minX": 1.6967469E12, "maxY": 90.88333333333334, "series": [{"data": [[1.6967469E12, 90.88333333333334], [1.69674696E12, 42.45]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69674696E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 42.45, "minX": 1.6967469E12, "maxY": 90.88333333333334, "series": [{"data": [[1.6967469E12, 90.88333333333334], [1.69674696E12, 42.45]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69674696E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 42.45, "minX": 1.6967469E12, "maxY": 90.88333333333334, "series": [{"data": [[1.6967469E12, 90.88333333333334], [1.69674696E12, 42.45]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69674696E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

